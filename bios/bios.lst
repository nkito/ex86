   1              	        .arch i8086,jumps
   2              	        .code16
   3              	        .att_syntax prefix
   4              	
   5              		.section .poweron, "ax"
   6              	
   7              	        .global reset_entry
   8              	
   9              	reset_entry:
  10 0000 EA000000 		ljmp	$0xf000, $0
  10      F0
  11              	
   1              	        .arch i8086,jumps
   2              	        .code16
   3              	        .att_syntax prefix
   4              	        .text
   5              	
   6              	        .global _start
   7              	
   8              	_start:
   9 0000 8CC8     		mov	%cs, %ax
  10 0002 3D00E0   		cmp	$0xe000, %ax
  11 0005 741A     		je	1f
  12              	
  13              		// ----------------------------------------------------------
  14              		// copy BIOS image (0xf0000 -> 0xe0000)
  15              		// ----------------------------------------------------------
  16 0007 FC       		cld			// make sure that movsb copies forward
  17 0008 B800E0   		movw	$0xe000, %ax
  18 000b 8EC0     		movw	%ax, %es	// destination segment
  19 000d BF0000   		movw	$0, %di		// destination position (with ES)
  20              	
  21 0010 8CC8     		mov	%cs, %ax
  22 0012 8ED8     		movw	%ax, %ds	// source segment
  23 0014 BE0000   		movw	$0, %si		// source position (with DS)
  24              	
  25 0017 B90080   		movw	$0x8000, %cx	// # words
  26              	
  27 001a F3A5     		rep	movsw
  28              		// ----------------------------------------------------------
  29              	
  30              		// Jump to the copied program
  31 001c EA000000 		ljmp	$0xe000, $_start
  31      E0
  32              	
  33              	1:
  34 0021 8CC8     		mov	%cs, %ax
  35 0023 8ED8     		mov	%ax, %ds
  36 0025 8ED0     		mov	%ax, %ss
  37 0027 8EC0     		mov	%ax, %es
  38              	
  39              		// Clear the BSS region
  40 0029 FC       		cld			// make sure that stosb store forward
  41 002a B80000   		mov	$0, %ax
  42 002d BF0000   		mov	$__sbss,  %di
  43 0030 B90000   		mov	$__lbss0, %cx
  44 0033 F3AA     		rep stosb
  45              	
  46              		// copy the initial DX reg. value to a variable defined in bios.c
  47 0035 89160000 		mov	%dx, initial_dx_value
  48              	
  49 0039 BCFFFF   		mov	$0xffff, %sp
  50              	
  51              	//------------------------------------
  52              	//      Enter the main function
  53              	//------------------------------------
  54 003c FA       		cli
  55 003d E8FEFF   		call	main
  56              	
  57              	//------------------------------------
  58              	//      Reset the cpu
  59              	//------------------------------------
  60 0040 F4       		hlt
  61              	
  62              	//------------------------------------
  63              	//      Stop the system
  64              	//------------------------------------
  65 0041 FA       		cli
  66              	_inf_loop:
  67 0042 EBFE     		jmp _inf_loop
  68              	//------------------------------------
  69              	
  70              	
  71              	
  72              	
  73              	
  74              		.global copy_data
  75              	copy_data:
  76 0044 55       		push	%bp
  77 0045 89E5     		mov	%sp, %bp
  78 0047 06       		push	%es
  79              	
  80 0048 50       		push	%ax
  81 0049 51       		push	%cx
  82 004a 56       		push	%si
  83 004b 57       		push	%di
  84              	
  85              		// ----------------------------------------------------------
  86 004c FC       		cld			// make sure that movsb copies forward
  87 004d 8B4606   		movw	6(%bp), %ax	// destination
  88 0050 8EC0     		movw	%ax, %es
  89              	
  90 0052 8B4604   		movw	4(%bp), %ax
  91 0055 89C6     		movw	%ax, %si	// source position (with DS)
  92              	
  93 0057 8B4608   		movw	8(%bp), %ax
  94 005a 89C7     		movw	%ax, %di	// destination position (with ES)
  95              	
  96 005c 8B460A   		movw	10(%bp), %ax	// bytes
  97 005f 89C1     		movw	%ax, %cx
  98              		
  99 0061 F3A4     		rep	movsb
 100              		// ----------------------------------------------------------
 101              	
 102 0063 5F       		pop	%di
 103 0064 5E       		pop	%si
 104 0065 59       		pop	%cx
 105 0066 58       		pop	%ax
 106              	
 107 0067 07       		pop	%es
 108 0068 5D       		pop	%bp
 109 0069 C3       		ret
 110              	
 111              	
 112              		.global copy_data_word
 113              	copy_data_word:
 114 006a 55       		push	%bp
 115 006b 89E5     		mov	%sp, %bp
 116 006d 06       		push	%es
 117              	
 118 006e 50       		push	%ax
 119 006f 51       		push	%cx
 120 0070 56       		push	%si
 121 0071 57       		push	%di
 122              	
 123              		// ----------------------------------------------------------
 124 0072 FC       		cld			// make sure that movsb copies forward
 125 0073 8B4606   		movw	6(%bp), %ax	// destination
 126 0076 8EC0     		movw	%ax, %es
 127              	
 128 0078 8B4604   		movw	4(%bp), %ax
 129 007b 89C6     		movw	%ax, %si	// source position (with DS)
 130              	
 131 007d 8B4608   		movw	8(%bp), %ax
 132 0080 89C7     		movw	%ax, %di	// destination position (with ES)
 133              	
 134 0082 8B460A   		movw	10(%bp), %ax	// bytes
 135 0085 89C1     		movw	%ax, %cx
 136              		
 137 0087 F3A5     		rep	movsw
 138              		// ----------------------------------------------------------
 139              	
 140 0089 5F       		pop	%di
 141 008a 5E       		pop	%si
 142 008b 59       		pop	%cx
 143 008c 58       		pop	%ax
 144              	
 145 008d 07       		pop	%es
 146 008e 5D       		pop	%bp
 147 008f C3       		ret
 148              	
 149              	
 150              		.global fetch_data
 151              	fetch_data:
 152 0090 55       		push	%bp
 153 0091 89E5     		mov	%sp, %bp
 154 0093 1E       		push	%ds
 155 0094 06       		push	%es
 156              	
 157 0095 50       		push	%ax
 158 0096 51       		push	%cx
 159 0097 56       		push	%si
 160 0098 57       		push	%di
 161              	
 162              	
 163              		// ----------------------------------------------------------
 164 0099 FC       		cld			// make sure that movsb copies forward
 165 009a 8B4604   		movw	4(%bp), %ax	// source
 166 009d 8ED8     		movw	%ax, %ds
 167 009f 8CC8     		movw	%cs, %ax	// destination
 168 00a1 8EC0     		movw	%ax, %es
 169              	
 170 00a3 8B4606   		movw	6(%bp), %ax
 171 00a6 89C6     		movw	%ax, %si	// source position (with DS)
 172              	
 173 00a8 8B4608   		movw	8(%bp), %ax
 174 00ab 89C7     		movw	%ax, %di	// destination position (with ES)
 175              	
 176 00ad 8B460A   		movw	10(%bp), %ax	// bytes
 177 00b0 89C1     		movw	%ax, %cx
 178              	
 179 00b2 F3A4     		rep	movsb
 180              		// ----------------------------------------------------------
 181              	
 182 00b4 5F       		pop	%di
 183 00b5 5E       		pop	%si
 184 00b6 59       		pop	%cx
 185 00b7 58       		pop	%ax
 186              	
 187 00b8 07       		pop	%es
 188 00b9 1F       		pop	%ds
 189 00ba 5D       		pop	%bp
 190 00bb C3       		ret
 191              	
 192              		.global fetch_data_word
 193              	fetch_data_word:
 194 00bc 55       		push	%bp
 195 00bd 89E5     		mov	%sp, %bp
 196 00bf 1E       		push	%ds
 197 00c0 06       		push	%es
 198              	
 199 00c1 50       		push	%ax
 200 00c2 51       		push	%cx
 201 00c3 56       		push	%si
 202 00c4 57       		push	%di
 203              	
 204              	
 205              		// ----------------------------------------------------------
 206 00c5 FC       		cld			// make sure that movsb copies forward
 207 00c6 8B4604   		movw	4(%bp), %ax	// source
 208 00c9 8ED8     		movw	%ax, %ds
 209 00cb 8CC8     		movw	%cs, %ax	// destination
 210 00cd 8EC0     		movw	%ax, %es
 211              	
 212 00cf 8B4606   		movw	6(%bp), %ax
 213 00d2 89C6     		movw	%ax, %si	// source position (with DS)
 214              	
 215 00d4 8B4608   		movw	8(%bp), %ax
 216 00d7 89C7     		movw	%ax, %di	// destination position (with ES)
 217              	
 218 00d9 8B460A   		movw	10(%bp), %ax	// bytes
 219 00dc 89C1     		movw	%ax, %cx
 220              	
 221 00de F3A5     		rep	movsw
 222              		// ----------------------------------------------------------
 223              	
 224 00e0 5F       		pop	%di
 225 00e1 5E       		pop	%si
 226 00e2 59       		pop	%cx
 227 00e3 58       		pop	%ax
 228              	
 229 00e4 07       		pop	%es
 230 00e5 1F       		pop	%ds
 231 00e6 5D       		pop	%bp
 232 00e7 C3       		ret
 233              	
 234              	
 235              		.global int11_handler_asm
 236              	int11_handler_asm:
 237              		// Bits
 238              		//    0 : IPL diskette installed
 239              		//    1 : math coprocessor
 240              		// 5- 4 : initial video mode (10 : 80x25 Color)
 241              		// 7- 6 : # of diskette drives, less 1  when bit0 = 1
 242              		//    8 : 0 if DMA installed
 243              		//11- 9 : number of serial ports
 244              		//   12 : game adapter installed
 245              		//15-14 : number of printer ports
 246              		//   
 247              		// See: https://stanislavs.org/helppc/int_11.html
 248              		//
 249              	
 250 00e8 B86101   		movw	$((1<<8)+(0x01<<6)+(0x02<<4)+1), %ax	// co-processor is not available
 251              		// movw    $((1<<8)+(0x01<<6)+(0x02<<4)+2+1), %ax
 252 00eb CF       		iret
 253              	
 254              	
 255              		.global int12_handler_asm
 256              	int12_handler_asm:
 257 00ec 8CC8     		mov	%cs, %ax
 258              	
 259 00ee D1E8     		shrw 	%ax
 260 00f0 D1E8     		shrw 	%ax
 261 00f2 D1E8     		shrw 	%ax
 262 00f4 D1E8     		shrw 	%ax
 263 00f6 D1E8     		shrw 	%ax
 264 00f8 D1E8     		shrw 	%ax
 265              	
 266 00fa 3D8002   		cmpw	$640, %ax
 267 00fd 7F01     		jg	1f
 268 00ff CF       		iret
 269              	1:
 270 0100 B88002   		movw	$640, %ax
 271 0103 CF       		iret
 272              	
 273              	
   1              		.arch i8086,jumps
   2              		.code16
   3              		.att_syntax prefix
   4              	#NO_APP
   5              		.section	.rodata.str1.1,"aMS",@progbits,1
   6              	.LC0:
   7 0000 257300   		.string	"%s"
   8              	.LC1:
   9 0003 0D0A00   		.string	"\r\n"
  10              		.text
  12              	printSection.part.0:
  13 0000 55       		pushw	%bp
  14 0001 89E5     		movw	%sp,	%bp
  15 0003 83EC02   		subw	$2,	%sp
  16 0006 FF7604   		pushw	4(%bp)
  17 0009 B80000   		movw	$.LC0,	%ax
  18 000c 50       		pushw	%ax
  19 000d B03F     		movb	$63,	%al
  20 000f 50       		pushw	%ax
  21 0010 8846FF   		movb	%al,	-1(%bp)
  22 0013 E8FEFF   		call	disp_printf
  23 0016 BA0300   		movw	$.LC1,	%dx
  24 0019 52       		pushw	%dx
  25 001a 8A46FF   		movb	-1(%bp),	%al
  26 001d 50       		pushw	%ax
  27 001e E8FEFF   		call	disp_printf
  28 0021 89EC     		movw	%bp,	%sp
  29 0023 5D       		popw	%bp
  30 0024 C3       		ret
  32              		.section	.rodata.str1.1
  33              	.LC2:
  34 0006 0A0D2025 		.string	"\n\r %s"
  34      7300
  35              	.LC3:
  36 000c 0A0D00   		.string	"\n\r"
  37              		.text
  38              		.global	printSection
  40              	printSection:
  41 0025 55       		pushw	%bp
  42 0026 89E5     		movw	%sp,	%bp
  43 0028 83EC02   		subw	$2,	%sp
  44 002b 8B4604   		movw	4(%bp),	%ax
  45 002e 8B5606   		movw	6(%bp),	%dx
  46 0031 85C0     		testw	%ax,	%ax
  47 0033 7422     		je	.L9
  48 0035 83F801   		cmpw	$1,	%ax
  49 0038 743F     		je	.L10
  50 003a 52       		pushw	%dx
  51 003b B80000   		movw	$.LC0,	%ax
  52 003e 50       		pushw	%ax
  53 003f B00A     		movb	$10,	%al
  54 0041 50       		pushw	%ax
  55 0042 E8FEFF   		call	disp_printf
  56 0045 83C406   		addw	$6,	%sp
  57 0048 C7460603 		movw	$.LC1,	6(%bp)
  57      00
  58 004d C646040F 		movb	$15,	4(%bp)
  59 0051 89EC     		movw	%bp,	%sp
  60 0053 5D       		popw	%bp
  61 0054 E9FEFF   		jmp	disp_printf
  62              	.L9:
  63 0057 52       		pushw	%dx
  64 0058 B80600   		movw	$.LC2,	%ax
  65 005b 50       		pushw	%ax
  66 005c B02F     		movb	$47,	%al
  67 005e 50       		pushw	%ax
  68 005f 8846FF   		movb	%al,	-1(%bp)
  69 0062 E8FEFF   		call	disp_printf
  70 0065 83C406   		addw	$6,	%sp
  71 0068 C746060C 		movw	$.LC3,	6(%bp)
  71      00
  72 006d 8A46FF   		movb	-1(%bp),	%al
  73 0070 884604   		movb	%al,	4(%bp)
  74 0073 89EC     		movw	%bp,	%sp
  75 0075 5D       		popw	%bp
  76 0076 E9FEFF   		jmp	disp_printf
  77              	.L10:
  78 0079 895604   		movw	%dx,	4(%bp)
  79 007c 89EC     		movw	%bp,	%sp
  80 007e 5D       		popw	%bp
  81 007f E97EFF   		jmp	printSection.part.0
  83              		.section	.rodata.str1.1
  84              	.LC4:
  85 000f 44726976 		.string	"Drive A: "
  85      6520413A 
  85      2000
  86              	.LC5:
  87 0019 204F4B20 		.string	" OK  (%lu bytes)\n"
  87      2028256C 
  87      75206279 
  87      74657329 
  87      0A00
  88              	.LC6:
  89 002b 202D2D20 		.string	" -- \n"
  89      0A00
  90              	.LC7:
  91 0031 44726976 		.string	"Drive B: "
  91      6520423A 
  91      2000
  92              	.LC8:
  93 003b 44726976 		.string	"Drive C: "
  93      6520433A 
  93      2000
  94              	.LC9:
  95 0045 20206E6F 		.string	"  no MBR found\n"
  95      204D4252 
  95      20666F75 
  95      6E640A00 
  96              	.LC10:
  97 0055 20204D42 		.string	"  MBR found "
  97      5220666F 
  97      756E6420 
  97      00
  98              	.LC11:
  99 0062 20285061 		.string	" (Partition %d: CHS = %u-%u-%u - %u-%u-%u (%lu sectors))\n"
  99      72746974 
  99      696F6E20 
  99      25643A20 
  99      43485320 
 100              	.LC12:
 101 009c 20204348 		.string	"  CHS is set to %u-%u-%u.\n"
 101      53206973 
 101      20736574 
 101      20746F20 
 101      25752D25 
 102              	.LC13:
 103 00b7 54686572 		.string	"There are no images.\n\n"
 103      65206172 
 103      65206E6F 
 103      20696D61 
 103      6765732E 
 104              	.LC14:
 105 00ce 44726976 		.string	"Drive error... \n\n"
 105      65206572 
 105      726F722E 
 105      2E2E200A 
 105      0A00
 106              		.text
 107              		.global	fstest
 109              	fstest:
 110 0082 56       		pushw	%si
 111 0083 57       		pushw	%di
 112 0084 06       		pushw	%es
 113 0085 55       		pushw	%bp
 114 0086 89E5     		movw	%sp,	%bp
 115 0088 83EC10   		subw	$16,	%sp
 116 008b B80F00   		movw	$.LC4,	%ax
 117 008e 50       		pushw	%ax
 118 008f B207     		movb	$7,	%dl
 119 0091 52       		pushw	%dx
 120 0092 8856FA   		movb	%dl,	-6(%bp)
 121 0095 E8FEFF   		call	disp_printf
 122 0098 8D46FC   		leaw	-4(%bp),	%ax
 123 009b 50       		pushw	%ax
 124 009c 30C0     		xorb	%al,	%al
 125 009e 50       		pushw	%ax
 126 009f E8FEFF   		call	emuGetDriveSize
 127 00a2 83C408   		addw	$8,	%sp
 128 00a5 84C0     		testb	%al,	%al
 129 00a7 8A56FA   		movb	-6(%bp),	%dl
 130 00aa 7403E901 		jne	.L12
 130      01
 131 00af FF76FE   		pushw	-2(%bp)
 132 00b2 FF76FC   		pushw	-4(%bp)
 133 00b5 B81900   		movw	$.LC5,	%ax
 134 00b8 50       		pushw	%ax
 135 00b9 52       		pushw	%dx
 136 00ba E8FEFF   		call	disp_printf
 137 00bd 83C408   		addw	$8,	%sp
 138 00c0 833E0000 		cmpw	$0,	bootDrive
 138      00
 139 00c5 7D03E9B7 		jl	.L31
 139      01
 140              	.L13:
 141 00ca B83100   		movw	$.LC7,	%ax
 142 00cd 50       		pushw	%ax
 143 00ce B207     		movb	$7,	%dl
 144 00d0 52       		pushw	%dx
 145 00d1 8856FA   		movb	%dl,	-6(%bp)
 146 00d4 E8FEFF   		call	disp_printf
 147 00d7 8D46FC   		leaw	-4(%bp),	%ax
 148 00da 50       		pushw	%ax
 149 00db B001     		movb	$1,	%al
 150 00dd 50       		pushw	%ax
 151 00de E8FEFF   		call	emuGetDriveSize
 152 00e1 83C408   		addw	$8,	%sp
 153 00e4 84C0     		testb	%al,	%al
 154 00e6 8A56FA   		movb	-6(%bp),	%dl
 155 00e9 7403E9B4 		jne	.L14
 155      00
 156 00ee FF76FE   		pushw	-2(%bp)
 157 00f1 FF76FC   		pushw	-4(%bp)
 158 00f4 B81900   		movw	$.LC5,	%ax
 159 00f7 50       		pushw	%ax
 160 00f8 52       		pushw	%dx
 161 00f9 E8FEFF   		call	disp_printf
 162 00fc 83C408   		addw	$8,	%sp
 163 00ff 833E0000 		cmpw	$0,	bootDrive
 163      00
 164 0104 7D03E981 		jl	.L32
 164      01
 165              	.L15:
 166 0109 C7060000 		movw	$0,	hdd_ready
 166      0000
 167 010f B83B00   		movw	$.LC8,	%ax
 168 0112 50       		pushw	%ax
 169 0113 B207     		movb	$7,	%dl
 170 0115 52       		pushw	%dx
 171 0116 8856FA   		movb	%dl,	-6(%bp)
 172 0119 E8FEFF   		call	disp_printf
 173 011c 8D46FC   		leaw	-4(%bp),	%ax
 174 011f 50       		pushw	%ax
 175 0120 B002     		movb	$2,	%al
 176 0122 50       		pushw	%ax
 177 0123 E8FEFF   		call	emuGetDriveSize
 178 0126 83C408   		addw	$8,	%sp
 179 0129 84C0     		testb	%al,	%al
 180 012b 8A56FA   		movb	-6(%bp),	%dl
 181 012e 755C     		jne	.L16
 182 0130 FF76FE   		pushw	-2(%bp)
 183 0133 FF76FC   		pushw	-4(%bp)
 184 0136 B81900   		movw	$.LC5,	%ax
 185 0139 50       		pushw	%ax
 186 013a 52       		pushw	%dx
 187 013b E8FEFF   		call	disp_printf
 188 013e 83C408   		addw	$8,	%sp
 189 0141 833E0000 		cmpw	$0,	bootDrive
 189      00
 190 0146 7D03E913 		jl	.L33
 190      01
 191              	#APP
 192              	;# 73 "src/bios.c" 1
   1              	#include <stdio.h>
   2              	#include "basicio.h"
   3              	
   4              	#include "terminal.h"
   5              	#include "timer.h"
   6              	#include "system.h"
   7              	
   8              	#include "asmfuncs.h"
   9              	
  10              	#include "int10h.h"
  11              	
  12              	#include "emu_interface.h"
  13              	
  14              	int bootDrive = -1;
  15              	
  16              	unsigned long BufMem[1024/sizeof(unsigned long)];
  17              	
  18              	
  19              	void printSection(unsigned int level, char *str){
  20              		if( level == 0 ){
  21              			disp_printf(0x2f, "\n\r %s", str);
  22              			disp_printf(0x2f, "\n\r");
  23              		}else if( level == 1 ){
  24              			disp_printf(0x3f, "%s", str);
  25              			disp_printf(0x3f, "\r\n");
  26              		}else{
  27              			disp_printf(0xa, "%s", str);
  28              			disp_printf(0xf, "\r\n");
  29              		}
  30              	}
  31              	
  32              	unsigned int  hdd_ready    =  0;
  33              	unsigned int  hdd_cylinder =  0; // 0-based
  34              	unsigned int  hdd_head     =  0; // 0-based
  35              	unsigned int  hdd_sector   = 63; // 1-based
  36              	unsigned long hdd_total_sectors =  0;
  37              	
  38              	#define DISP_ATTR_NORMAL 0x07
  39              	
  40              	int fstest(void){
  41              	 	unsigned char *buf = (unsigned char *)BufMem;
  42              	
  43              		uint8_t result;
  44              		uint32_t driveSize;
  45              		unsigned int reg_ss;
  46              	
  47              	 	disp_printf(DISP_ATTR_NORMAL, "Drive A: ");
  48              		result = emuGetDriveSize(0, &driveSize);
  49              	 	if(result == EMU_INTERFACE_RESULT_OK){
  50              	 		disp_printf(DISP_ATTR_NORMAL, " OK  (%lu bytes)\n", driveSize);
  51              	 		if( bootDrive < 0 ) bootDrive = 0;
  52              	 	}else{
  53              	 		disp_printf(DISP_ATTR_NORMAL, " -- \n");
  54              	 	}
  55              	
  56              	 	disp_printf(DISP_ATTR_NORMAL, "Drive B: ");
  57              		result = emuGetDriveSize(1, &driveSize);
  58              	 	if(result == EMU_INTERFACE_RESULT_OK){
  59              	 		disp_printf(DISP_ATTR_NORMAL, " OK  (%lu bytes)\n", driveSize);
  60              	 		if( bootDrive < 0 ) bootDrive = 0;
  61              	 	}else{
  62              	 		disp_printf(DISP_ATTR_NORMAL, " -- \n");
  63              	 	}
  64              	
  65              		hdd_ready = 0;
  66              		disp_printf(DISP_ATTR_NORMAL,"Drive C: ");
  67              		result = emuGetDriveSize(2, &driveSize);
  68              	 	if(result == EMU_INTERFACE_RESULT_OK){
  69              			disp_printf(DISP_ATTR_NORMAL, " OK  (%lu bytes)\n", driveSize);
  70              			if( bootDrive < 0 ) bootDrive = 2;
  71              	
  72              			//--------------------------------
  73 014b 8CD0     			asm volatile("mov  %%ss, %w0" : "=a"(reg_ss) : );
  74              			result = emuReadDriveSector(2, 0, reg_ss, (uint16_t)buf);
 193              		mov  %ss, %ax
 194              	;# 0 "" 2
 195              	#NO_APP
 196 014d BE0000   		movw	$BufMem,	%si
 197 0150 56       		pushw	%si
 198 0151 50       		pushw	%ax
 199 0152 31FF     		xorw	%di,	%di
 200 0154 57       		pushw	%di
 201 0155 57       		pushw	%di
 202 0156 B002     		movb	$2,	%al
 203 0158 50       		pushw	%ax
 204 0159 E8FEFF   		call	emuReadDriveSector
 205 015c 83C40A   		addw	$10,	%sp
 206 015f 84C0     		testb	%al,	%al
 207 0161 7403E9E1 		jne	.L18
 207      00
 208              	.L36:
 209 0166 803EFE01 		cmpb	$85,	BufMem+510
 209      55
 210 016b 7451     		je	.L34
 211              	.L19:
 212 016d B84500   		movw	$.LC9,	%ax
 213 0170 50       		pushw	%ax
 214 0171 B007     		movb	$7,	%al
 215 0173 50       		pushw	%ax
 216 0174 E8FEFF   		call	disp_printf
 217 0177 83C404   		addw	$4,	%sp
 218 017a 31C0     		xorw	%ax,	%ax
 219 017c 39060000 		cmpw	%ax,	bootDrive
 220 0180 7D03E90E 		jl	.L35
 220      01
 221              	.L11:
 222 0185 89EC     		movw	%bp,	%sp
 223 0187 5D       		popw	%bp
 224 0188 07       		popw	%es
 225 0189 5F       		popw	%di
 226 018a 5E       		popw	%si
 227 018b C3       		ret
 228              	.L16:
 229 018c B82B00   		movw	$.LC6,	%ax
 230 018f 50       		pushw	%ax
 231 0190 52       		pushw	%dx
 232 0191 E8FEFF   		call	disp_printf
 233 0194 83C404   		addw	$4,	%sp
 234 0197 31C0     		xorw	%ax,	%ax
 235 0199 39060000 		cmpw	%ax,	bootDrive
 236 019d 7DE6     		jge	.L11
 237 019f E9F100   		jmp	.L35
 238              	.L14:
 239 01a2 B82B00   		movw	$.LC6,	%ax
 240 01a5 50       		pushw	%ax
 241 01a6 52       		pushw	%dx
 242 01a7 E8FEFF   		call	disp_printf
 243 01aa 83C404   		addw	$4,	%sp
 244 01ad E959FF   		jmp	.L15
 245              	.L12:
 246 01b0 B82B00   		movw	$.LC6,	%ax
 247 01b3 50       		pushw	%ax
 248 01b4 52       		pushw	%dx
 249 01b5 E8FEFF   		call	disp_printf
 250 01b8 83C404   		addw	$4,	%sp
 251 01bb E90CFF   		jmp	.L13
 252              	.L34:
 253 01be 803EFF01 		cmpb	$-86,	BufMem+511
 253      AA
 254 01c3 75A8     		jne	.L19
 255 01c5 B85500   		movw	$.LC10,	%ax
 256 01c8 50       		pushw	%ax
 257 01c9 B007     		movb	$7,	%al
 258 01cb 50       		pushw	%ax
 259 01cc E8FEFF   		call	disp_printf
 260 01cf BBC301   		movw	$BufMem+451,	%bx
 261 01d2 83C404   		addw	$4,	%sp
 262 01d5 897EFA   		movw	%di,	-6(%bp)
 263              	.L23:
 264 01d8 8A6F01   		movb	1(%bx),	%ch
 265 01db 88E8     		movb	%ch,	%al
 266 01dd 30E4     		xorb	%ah,	%ah
 267 01df D1E0     		shlw	$1,	%ax
 268 01e1 D1E0     		shlw	$1,	%ax
 269 01e3 250003   		andw	$768,	%ax
 270 01e6 8946F4   		movw	%ax,	-12(%bp)
 271 01e9 8A4702   		movb	2(%bx),	%al
 272 01ec 8846F8   		movb	%al,	-8(%bp)
 273 01ef C646F900 		movb	$0,	-7(%bp)
 274 01f3 8A0F     		movb	(%bx),	%cl
 275 01f5 884EF6   		movb	%cl,	-10(%bp)
 276 01f8 8166F6FF 		andw	$255,	-10(%bp)
 276      00
 277 01fd 9F       		lahf
 278 01fe D0E4     		shlb	%ah
 279 0200 99       		cwtd
 280 0201 88D0     		movb	%dl,	%al
 281 0203 F6D8     		negb	%al
 282 0205 80E53F   		andb	$63,	%ch
 283 0208 9F       		lahf
 284 0209 D0E4     		shlb	%ah
 285 020b 99       		cwtd
 286 020c 88D6     		movb	%dl,	%dh
 287 020e F6DE     		negb	%dh
 288 0210 08F0     		orb	%dh,	%al
 289 0212 8B56F4   		movw	-12(%bp),	%dx
 290 0215 0356F8   		addw	-8(%bp),	%dx
 291 0218 8956F8   		movw	%dx,	-8(%bp)
 292 021b 9F       		lahf
 293 021c D0E4     		shlb	%ah
 294 021e 99       		cwtd
 295 021f 88D6     		movb	%dl,	%dh
 296 0221 F6DE     		negb	%dh
 297 0223 88C2     		movb	%al,	%dl
 298 0225 08F2     		orb	%dh,	%dl
 299 0227 747C     		je	.L22
 300 0229 FF46FA   		incw	-6(%bp)
 301 022c 8B46FA   		movw	-6(%bp),	%ax
 302 022f 83C710   		addw	$16,	%di
 303 0232 83C310   		addw	$16,	%bx
 304 0235 83F804   		cmpw	$4,	%ax
 305 0238 759E     		jne	.L23
 306 023a 31C0     		xorw	%ax,	%ax
 307 023c 39060000 		cmpw	%ax,	bootDrive
 308 0240 7C03E940 		jge	.L11
 308      FF
 309 0245 EB4C     		jmp	.L35
 310              	.L18:
 311 0247 B8CE00   		movw	$.LC14,	%ax
 312 024a 50       		pushw	%ax
 313 024b B007     		movb	$7,	%al
 314 024d 50       		pushw	%ax
 315 024e E8FEFF   		call	disp_printf
 316 0251 83C404   		addw	$4,	%sp
 317 0254 B80100   		movw	$1,	%ax
 318              	.L37:
 319 0257 89EC     		movw	%bp,	%sp
 320 0259 5D       		popw	%bp
 321 025a 07       		popw	%es
 322 025b 5F       		popw	%di
 323 025c 5E       		popw	%si
 324 025d C3       		ret
 325              	.L33:
 326 025e C7060000 		movw	$2,	bootDrive
 326      0200
 327              	#APP
 328              	;# 73 "src/bios.c" 1
 329              		mov  %ss, %ax
 330              	;# 0 "" 2
 331              	#NO_APP
 332 0266 BE0000   		movw	$BufMem,	%si
 333 0269 56       		pushw	%si
 334 026a 50       		pushw	%ax
 335 026b 31FF     		xorw	%di,	%di
 336 026d 57       		pushw	%di
 337 026e 57       		pushw	%di
 338 026f B002     		movb	$2,	%al
 339 0271 50       		pushw	%ax
 340 0272 E8FEFF   		call	emuReadDriveSector
 341 0275 83C40A   		addw	$10,	%sp
 342 0278 84C0     		testb	%al,	%al
 343 027a 7503E9E7 		je	.L36
 343      FE
 344 027f EBC6     		jmp	.L18
 345              	.L31:
 346 0281 C7060000 		movw	$0,	bootDrive
 346      0000
 347 0287 E940FE   		jmp	.L13
 348              	.L32:
 349 028a C7060000 		movw	$0,	bootDrive
 349      0000
 350 0290 E976FE   		jmp	.L15
 351              	.L35:
 352 0293 B8B700   		movw	$.LC13,	%ax
 353 0296 50       		pushw	%ax
 354 0297 B007     		movb	$7,	%al
 355 0299 50       		pushw	%ax
 356 029a E8FEFF   		call	disp_printf
 357 029d 83C404   		addw	$4,	%sp
 358 02a0 B80100   		movw	$1,	%ax
 359 02a3 EBB2     		jmp	.L37
 360              	.L22:
 361 02a5 88EA     		movb	%ch,	%dl
 362 02a7 884EF4   		movb	%cl,	-12(%bp)
 363 02aa 8B5EFA   		movw	-6(%bp),	%bx
 364 02ad 83C31C   		addw	$28,	%bx
 365 02b0 D1E3     		shlw	$1,	%bx
 366 02b2 D1E3     		shlw	$1,	%bx
 367 02b4 D1E3     		shlw	$1,	%bx
 368 02b6 D1E3     		shlw	$1,	%bx
 369 02b8 8A28     		movb	(%bx,%si),	%ch
 370 02ba 886EF0   		movb	%ch,	-16(%bp)
 371 02bd 8AA5C101 		movb	BufMem+449(%di),	%ah
 372 02c1 8866F2   		movb	%ah,	-14(%bp)
 373 02c4 8AB5BF01 		movb	BufMem+447(%di),	%dh
 374 02c8 8876F1   		movb	%dh,	-15(%bp)
 375 02cb C7060000 		movw	$1,	hdd_ready
 375      0100
 376 02d1 8B76FE   		movw	-2(%bp),	%si
 377 02d4 89F0     		movw	%si,	%ax
 378 02d6 B107     		movb	$7,	%cl
 379 02d8 D3E0     		shlw	%cl,	%ax
 380 02da B109     		movb	$9,	%cl
 381 02dc 8B7EFC   		movw	-4(%bp),	%di
 382 02df D3EF     		shrw	%cl,	%di
 383 02e1 09C7     		orw	%ax,	%di
 384 02e3 D3EE     		shrw	%cl,	%si
 385 02e5 893E0000 		movw	%di,	hdd_total_sectors
 386 02e9 89360200 		movw	%si,	hdd_total_sectors+2
 387 02ed 8A46F4   		movb	-12(%bp),	%al
 388 02f0 30E4     		xorb	%ah,	%ah
 389 02f2 A30000   		movw	%ax,	hdd_head
 390 02f5 88D1     		movb	%dl,	%cl
 391 02f7 B600     		movb	$0,	%dh
 392 02f9 89160000 		movw	%dx,	hdd_sector
 393 02fd 40       		incw	%ax
 394 02fe 884EF3   		movb	%cl,	-13(%bp)
 395 0301 884EF4   		movb	%cl,	-12(%bp)
 396 0304 C646F500 		movb	$0,	-11(%bp)
 397 0308 F766F4   		mulw	-12(%bp)
 398 030b 52       		pushw	%dx
 399 030c 50       		pushw	%ax
 400 030d 56       		pushw	%si
 401 030e 57       		pushw	%di
 402 030f E8FEFF   		call	__udivsi3
 403 0312 83C408   		addw	$8,	%sp
 404 0315 A30000   		movw	%ax,	hdd_cylinder
 405 0318 56       		pushw	%si
 406 0319 57       		pushw	%di
 407 031a 8A46F3   		movb	-13(%bp),	%al
 408 031d 30E4     		xorb	%ah,	%ah
 409 031f 50       		pushw	%ax
 410 0320 FF76F6   		pushw	-10(%bp)
 411 0323 FF76F8   		pushw	-8(%bp)
 412 0326 8A6EF0   		movb	-16(%bp),	%ch
 413 0329 88E8     		movb	%ch,	%al
 414 032b 243F     		andb	$63,	%al
 415 032d 30E4     		xorb	%ah,	%ah
 416 032f 50       		pushw	%ax
 417 0330 8A46F1   		movb	-15(%bp),	%al
 418 0333 30E4     		xorb	%ah,	%ah
 419 0335 50       		pushw	%ax
 420 0336 88E8     		movb	%ch,	%al
 421 0338 30E4     		xorb	%ah,	%ah
 422 033a D1E0     		shlw	$1,	%ax
 423 033c D1E0     		shlw	$1,	%ax
 424 033e 250003   		andw	$768,	%ax
 425 0341 8A56F2   		movb	-14(%bp),	%dl
 426 0344 30F6     		xorb	%dh,	%dh
 427 0346 01D0     		addw	%dx,	%ax
 428 0348 50       		pushw	%ax
 429 0349 FF76FA   		pushw	-6(%bp)
 430 034c B86200   		movw	$.LC11,	%ax
 431 034f 50       		pushw	%ax
 432 0350 B007     		movb	$7,	%al
 433 0352 50       		pushw	%ax
 434 0353 E8FEFF   		call	disp_printf
 435 0356 FF360000 		pushw	hdd_sector
 436 035a FF360000 		pushw	hdd_head
 437 035e FF360000 		pushw	hdd_cylinder
 438 0362 B89C00   		movw	$.LC12,	%ax
 439 0365 50       		pushw	%ax
 440 0366 B007     		movb	$7,	%al
 441 0368 50       		pushw	%ax
 442 0369 E8FEFF   		call	disp_printf
 443 036c 83C420   		addw	$32,	%sp
 444 036f 31C0     		xorw	%ax,	%ax
 445 0371 39060000 		cmpw	%ax,	bootDrive
 446 0375 7C03E90B 		jge	.L11
 446      FE
 447 037a E916FF   		jmp	.L35
 449              		.section	.rodata.str1.1
 450              	.LC15:
 451 00e0 4C6F6164 		.string	"Loading boot sector ... "
 451      696E6720 
 451      626F6F74 
 451      20736563 
 451      746F7220 
 452              	.LC16:
 453 00f9 646F6E65 		.string	"done\n"
 453      0A00
 454              	.LC17:
 455 00ff 5761726E 		.string	"Warning: tail of the sector is not 0x55AA (0x%02x%02x)\n"
 455      696E673A 
 455      20746169 
 455      6C206F66 
 455      20746865 
 456              	.LC18:
 457 0137 506C6163 		.string	"Placed the sector data at 0x0000:0x7C00.\n"
 457      65642074 
 457      68652073 
 457      6563746F 
 457      72206461 
 458              	.LC19:
 459 0161 0A0A4661 		.string	"\n\nFailed to read the boot sector\n\n"
 459      696C6564 
 459      20746F20 
 459      72656164 
 459      20746865 
 460              		.text
 461              		.global	loadSector
 463              	loadSector:
 464 037d 56       		pushw	%si
 465 037e 55       		pushw	%bp
 466 037f 89E5     		movw	%sp,	%bp
 467 0381 83EC02   		subw	$2,	%sp
 468 0384 B8E000   		movw	$.LC15,	%ax
 469 0387 50       		pushw	%ax
 470 0388 B207     		movb	$7,	%dl
 471 038a 52       		pushw	%dx
 472 038b 8856FE   		movb	%dl,	-2(%bp)
 473 038e E8FEFF   		call	disp_printf
 474              	#APP
 475              	;# 130 "src/bios.c" 1
  75              			if(result != EMU_INTERFACE_RESULT_OK) goto drive_err;
  76              	
  77              			if( buf[510] != 0x55 || buf[511] != 0xAA ){
  78              				disp_printf(DISP_ATTR_NORMAL, "  no MBR found\n");
  79              			}else{
  80              				disp_printf(DISP_ATTR_NORMAL, "  MBR found ");
  81              				for(int p=0; p<4;p++){
  82              					int start_cyl  = (((unsigned int)buf[0x1be + 2 +0x10*p] & 0xc0)<<2) + (unsigned int)buf[0x1be +
  83              					int start_head =   buf[0x1be + 1 +0x10*p];
  84              					int start_sec  =  (buf[0x1be + 2 +0x10*p] & 0x3f);
  85              					int end_cyl  = (((unsigned int)(buf[0x1be + 6 +0x10*p] & 0xc0))<<2) + (unsigned int)buf[0x1be +
  86              					int end_head =   buf[0x1be + 5 +0x10*p];
  87              					int end_sec  =  (buf[0x1be + 6 +0x10*p] & 0x3f);
  88              	
  89              					if( end_cyl == 0 || end_head == 0 || end_sec == 0 ) continue;
  90              	
  91              					hdd_ready    = 1;
  92              					hdd_total_sectors = (driveSize >> 9);
  93              					hdd_head     = end_head;
  94              					hdd_sector   = end_sec;
  95              					hdd_cylinder = hdd_total_sectors / ( ((unsigned long)hdd_sector) * (hdd_head+1));
  96              	
  97              					disp_printf(DISP_ATTR_NORMAL, " (Partition %d: CHS = %u-%u-%u - %u-%u-%u (%lu sectors))\n", p,
  98              								start_cyl, start_head, start_sec,
  99              								end_cyl,   end_head,   end_sec,
 100              								hdd_total_sectors);
 101              					disp_printf(DISP_ATTR_NORMAL, "  CHS is set to %u-%u-%u.\n", hdd_cylinder, hdd_head, hdd_sector
 102              					break;
 103              				}
 104              			}
 105              			//--------------------------------
 106              		}else{
 107              			disp_printf(DISP_ATTR_NORMAL, " -- \n");
 108              		}
 109              	
 110              		if( bootDrive < 0 ){
 111              	 	    disp_printf(DISP_ATTR_NORMAL, "There are no images.\n\n");
 112              	 		return 1;
 113              	 	}
 114              	
 115              	 	return 0;
 116              	
 117              	drive_err:
 118              	    disp_printf(DISP_ATTR_NORMAL, "Drive error... \n\n");
 119              	 	return 1;
 120              	
 121              	}
 122              	
 123              	int loadSector(void){
 124              		unsigned char *buf = (unsigned char *)BufMem;
 125              		unsigned int reg_ss;
 126              		uint8_t result;
 127              	
 128              	 	disp_printf(DISP_ATTR_NORMAL, "Loading boot sector ... ");
 129              	
 130 0391 8CD0     		asm volatile("mov  %%ss, %w0" : "=a"(reg_ss) : );
 131              		result = emuReadDriveSector(bootDrive, 0, reg_ss, (uint16_t)buf);
 476              		mov  %ss, %ax
 477              	;# 0 "" 2
 478              	#NO_APP
 479 0393 BE0000   		movw	$BufMem,	%si
 480 0396 56       		pushw	%si
 481 0397 50       		pushw	%ax
 482 0398 31C0     		xorw	%ax,	%ax
 483 039a 50       		pushw	%ax
 484 039b 50       		pushw	%ax
 485 039c FF360000 		pushw	bootDrive
 486 03a0 E8FEFF   		call	emuReadDriveSector
 487 03a3 83C40E   		addw	$14,	%sp
 488 03a6 84C0     		testb	%al,	%al
 489 03a8 8A56FE   		movb	-2(%bp),	%dl
 490 03ab 7550     		jne	.L39
 491 03ad B8F900   		movw	$.LC16,	%ax
 492 03b0 50       		pushw	%ax
 493 03b1 52       		pushw	%dx
 494 03b2 E8FEFF   		call	disp_printf
 495 03b5 A0FE01   		movb	BufMem+510,	%al
 496 03b8 83C404   		addw	$4,	%sp
 497 03bb 8A16FF01 		movb	BufMem+511,	%dl
 498 03bf 3C55     		cmpb	$85,	%al
 499 03c1 744D     		je	.L50
 500 03c3 30F6     		xorb	%dh,	%dh
 501 03c5 52       		pushw	%dx
 502 03c6 30E4     		xorb	%ah,	%ah
 503 03c8 50       		pushw	%ax
 504 03c9 B8FF00   		movw	$.LC17,	%ax
 505 03cc 50       		pushw	%ax
 506 03cd B007     		movb	$7,	%al
 507 03cf 50       		pushw	%ax
 508 03d0 E8FEFF   		call	disp_printf
 509 03d3 83C408   		addw	$8,	%sp
 510              	.L42:
 511 03d6 B80002   		movw	$512,	%ax
 512 03d9 50       		pushw	%ax
 513 03da B8007C   		movw	$31744,	%ax
 514 03dd 50       		pushw	%ax
 515 03de 31C0     		xorw	%ax,	%ax
 516 03e0 50       		pushw	%ax
 517 03e1 8946FE   		movw	%ax,	-2(%bp)
 518 03e4 56       		pushw	%si
 519 03e5 E8FEFF   		call	copy_data
 520 03e8 BA3701   		movw	$.LC18,	%dx
 521 03eb 52       		pushw	%dx
 522 03ec B207     		movb	$7,	%dl
 523 03ee 52       		pushw	%dx
 524 03ef E8FEFF   		call	disp_printf
 525 03f2 83C40C   		addw	$12,	%sp
 526 03f5 8B46FE   		movw	-2(%bp),	%ax
 527 03f8 89EC     		movw	%bp,	%sp
 528 03fa 5D       		popw	%bp
 529 03fb 5E       		popw	%si
 530 03fc C3       		ret
 531              	.L39:
 532 03fd B86101   		movw	$.LC19,	%ax
 533 0400 50       		pushw	%ax
 534 0401 52       		pushw	%dx
 535 0402 E8FEFF   		call	disp_printf
 536 0405 83C404   		addw	$4,	%sp
 537 0408 B80100   		movw	$1,	%ax
 538 040b 89EC     		movw	%bp,	%sp
 539 040d 5D       		popw	%bp
 540 040e 5E       		popw	%si
 541 040f C3       		ret
 542              	.L50:
 543 0410 80FAAA   		cmpb	$-86,	%dl
 544 0413 74C1     		je	.L42
 545 0415 30F6     		xorb	%dh,	%dh
 546 0417 52       		pushw	%dx
 547 0418 30E4     		xorb	%ah,	%ah
 548 041a 50       		pushw	%ax
 549 041b B8FF00   		movw	$.LC17,	%ax
 550 041e 50       		pushw	%ax
 551 041f B007     		movb	$7,	%al
 552 0421 50       		pushw	%ax
 553 0422 E8FEFF   		call	disp_printf
 554 0425 83C408   		addw	$8,	%sp
 555 0428 EBAC     		jmp	.L42
 557              		.section	.rodata.str1.1
 558              	.LC20:
 559 0184 1B5B324A 		.string	"\033[2J"
 559      00
 560              	.LC21:
 561 0189 53776565 		.string	"Sweet pea x86 BIOS   (Build: Dec 17 2023 16:47:04) "
 561      74207065 
 561      61207838 
 561      36204249 
 561      4F532020 
 562              	.LC22:
 563 01bd 54657874 		.string	"Text   : 0x%04x:0x%04x - 0x%04x:0x%04x (0x%04x byte)\r\nData   : 0x%04x:0x%04x - 0x%04x:0
 563      2020203A 
 563      20307825 
 563      3034783A 
 563      30782530 
 564              	.LC23:
 565 0260 43505520 		.string	"CPU : i80%d  Memory : %d KiB\r\n"
 565      3A206938 
 565      30256420 
 565      204D656D 
 565      6F727920 
 566              	.LC24:
 567 027f 496E6974 		.string	"Initializing devices ..."
 567      69616C69 
 567      7A696E67 
 567      20646576 
 567      69636573 
 568              	.LC25:
 569 0298 4469736B 		.string	"Disks"
 569      7300
 570              	.LC26:
 571 029e 426F6F74 		.string	"Boot process failed...."
 571      2070726F 
 571      63657373 
 571      20666169 
 571      6C65642E 
 572              	.LC27:
 573 02b6 426F6F74 		.string	"Boot"
 573      00
 574              	.LC28:
 575 02bb 426F6F74 		.string	"Booting from drive %c: ...\n"
 575      696E6720 
 575      66726F6D 
 575      20647269 
 575      76652025 
 576              	.LC29:
 577 02d7 53776974 		.string	"Switched to Operating System ...\n"
 577      63686564 
 577      20746F20 
 577      4F706572 
 577      6174696E 
 578              		.section	.text.startup,"ax",@progbits
 579              		.global	main
 581              	main:
 582 0000 56       		pushw	%si
 583 0001 57       		pushw	%di
 584 0002 06       		pushw	%es
 585 0003 55       		pushw	%bp
 586 0004 89E5     		movw	%sp,	%bp
 587 0006 83EC06   		subw	$6,	%sp
 588              	#APP
 589              	;# 174 "src/bios.c" 1
 132              		if(result != EMU_INTERFACE_RESULT_OK) goto drive_err; 
 133              	
 134              	 	disp_printf(DISP_ATTR_NORMAL, "done\n");
 135              	 	if( buf[510] != 0x55 || buf[511] != 0xAA ){
 136              	 		disp_printf(DISP_ATTR_NORMAL, "Warning: tail of the sector is not 0x55AA (0x%02x%02x)\n", buf[51
 137              	 	}
 138              	
 139              	 	copy_data(buf, 0x0000, (unsigned char *)0x7C00, 512);
 140              	 	disp_printf(DISP_ATTR_NORMAL, "Placed the sector data at 0x0000:0x7C00.\n");
 141              	
 142              	 	return 0;
 143              	
 144              	drive_err:
 145              	    disp_printf(DISP_ATTR_NORMAL, "\n\nFailed to read the boot sector\n\n");
 146              	 	return 1;
 147              	}
 148              	
 149              	extern short  __stext, __etext, __ltext;
 150              	extern short  __sdata, __edata, __ldata;
 151              	extern short  __sbss , __ebss , __lbss0;
 152              	
 153              	extern unsigned short int_default_vector_table[]; 
 154              	extern unsigned short int10_handler_asm;
 155              	extern unsigned short int11_handler_asm;
 156              	extern unsigned short int12_handler_asm;
 157              	extern unsigned short int13_handler_asm;
 158              	extern unsigned short int14_handler_asm;
 159              	extern unsigned short int15_handler_asm;
 160              	extern unsigned short int16_handler_asm;
 161              	extern unsigned short int1a_handler_asm;
 162              	extern unsigned short int_timer_handler_asm;
 163              	
 164              	/* 486-class CPUs and newer ones have cache memory. Cache flush is necessary for some memory-relate
 165              	unsigned short processor_is_486_or_newer = 0;
 166              	/* the initial value of DX register was used to represent the processor model in some processors as
 167              	unsigned short initial_dx_value = 0;
 168              	
 169              	int main(void){
 170              		int i;
 171              		unsigned int reg_cs;
 172              	
 173              		//--------------------------------------------------
 174 0009 8CC8     		asm volatile("mov  %%cs, %w0" : "=a"(reg_cs) : );
 175              		unsigned short *p = (unsigned short *)BufMem;
 590              		mov  %cs, %ax
 591              	;# 0 "" 2
 592              	#NO_APP
 593 000b 8EC0     		movw	%ax,	%es
 594 000d BE0000   		movw	$int_default_vector_table,	%si
 595 0010 BF0200   		movw	$BufMem+2,	%di
 596 0013 8D55FE   		leaw	-2(%di),	%dx
 597 0016 89D3     		movw	%dx,	%bx
 598              	.L52:
 599 0018 8B04     		movw	(%si),	%ax
 600 001a 8907     		movw	%ax,	(%bx)
 601 001c 83C304   		addw	$4,	%bx
 602 001f 8C05     		movw	%es,	(%di)
 603 0021 83C602   		addw	$2,	%si
 604 0024 83C704   		addw	$4,	%di
 605 0027 81FB0004 		cmpw	$BufMem+1024,	%bx
 606 002b 75EB     		jne	.L52
 607 002d BF0000   		movw	$int10_handler_asm,	%di
 608 0030 893E4000 		movw	%di,	BufMem+64
 609 0034 C7064400 		movw	$int11_handler_asm,	BufMem+68
 609      0000
 610 003a C7064800 		movw	$int12_handler_asm,	BufMem+72
 610      0000
 611 0040 C7064C00 		movw	$int13_handler_asm,	BufMem+76
 611      0000
 612 0046 C7065000 		movw	$int14_handler_asm,	BufMem+80
 612      0000
 613 004c C7065400 		movw	$int15_handler_asm,	BufMem+84
 613      0000
 614 0052 C7065800 		movw	$int16_handler_asm,	BufMem+88
 614      0000
 615 0058 C7066800 		movw	$int1a_handler_asm,	BufMem+104
 615      0000
 616 005e C7062000 		movw	$int_timer_handler_asm,	BufMem+32
 616      0000
 617 0064 BB0004   		movw	$1024,	%bx
 618 0067 53       		pushw	%bx
 619 0068 895EFE   		movw	%bx,	-2(%bp)
 620 006b 31F6     		xorw	%si,	%si
 621 006d 56       		pushw	%si
 622 006e 56       		pushw	%si
 623 006f 52       		pushw	%dx
 624 0070 8956FA   		movw	%dx,	-6(%bp)
 625 0073 E8FEFF   		call	copy_data
 626 0076 B90001   		movw	$256,	%cx
 627 0079 51       		pushw	%cx
 628 007a 894EFC   		movw	%cx,	-4(%bp)
 629 007d 56       		pushw	%si
 630 007e 8B56FA   		movw	-6(%bp),	%dx
 631 0081 52       		pushw	%dx
 632 0082 E8FEFF   		call	s_memset
 633 0085 C7061000 		movw	$355,	BufMem+16
 633      6301
 634 008b C7061300 		movw	$640,	BufMem+19
 634      8002
 635 0091 C7061A00 		movw	$30,	BufMem+26
 635      1E00
 636 0097 C7061C00 		movw	$30,	BufMem+28
 636      1E00
 637 009d C6064900 		movb	$3,	BufMem+73
 637      03
 638 00a2 C7064A00 		movw	$80,	BufMem+74
 638      5000
 639 00a8 C7066300 		movw	$980,	BufMem+99
 639      D403
 640 00ae C6068400 		movb	$24,	BufMem+132
 640      18
 641 00b3 C7064C00 		movw	$4096,	BufMem+76
 641      0010
 642 00b9 36C70660 		movw	$1543,	%ss:BufMem+96
 642      000706
 643 00c0 C606AC00 		movb	$-22,	BufMem+172
 643      EA
 644 00c5 893EAD00 		movw	%di,	BufMem+173
 645 00c9 8C06AF00 		movw	%es,	BufMem+175
 646 00cd 8B4EFC   		movw	-4(%bp),	%cx
 647 00d0 51       		pushw	%cx
 648 00d1 8B5EFE   		movw	-2(%bp),	%bx
 649 00d4 53       		pushw	%bx
 650 00d5 56       		pushw	%si
 651 00d6 8B56FA   		movw	-6(%bp),	%dx
 652 00d9 52       		pushw	%dx
 653 00da E8FEFF   		call	copy_data
 654 00dd 83C416   		addw	$22,	%sp
 655 00e0 BAD007   		movw	$2000,	%dx
 656 00e3 89F3     		movw	%si,	%bx
 657 00e5 B800B8   		movw	$-18432,	%ax
 658              	.L53:
 659 00e8 8ED8     		movw	%ax,	%ds
 660 00ea C7072008 		movw	$2080,	(%bx)
 661 00ee 83C302   		addw	$2,	%bx
 662 00f1 4A       		decw	%dx
 663 00f2 75F4     		jne	.L53
 664 00f4 8956FA   		movw	%dx,	-6(%bp)
 665 00f7 B88401   		movw	$.LC20,	%ax
 666 00fa 50       		pushw	%ax
 667 00fb 16       		pushw	%ss
 668 00fc 1F       		popw	%ds
 669 00fd E8FEFF   		call	s_printf
 670 0100 B88901   		movw	$.LC21,	%ax
 671 0103 50       		pushw	%ax
 672 0104 8B56FA   		movw	-6(%bp),	%dx
 673 0107 52       		pushw	%dx
 674 0108 E8FEFF   		call	printSection
 675 010b B80000   		movw	$__lbss0,	%ax
 676 010e 50       		pushw	%ax
 677 010f B80000   		movw	$__ebss,	%ax
 678 0112 50       		pushw	%ax
 679 0113 06       		pushw	%es
 680 0114 B80000   		movw	$__sbss,	%ax
 681 0117 50       		pushw	%ax
 682 0118 06       		pushw	%es
 683 0119 B80000   		movw	$__ldata,	%ax
 684 011c 50       		pushw	%ax
 685 011d B80000   		movw	$__edata,	%ax
 686 0120 50       		pushw	%ax
 687 0121 06       		pushw	%es
 688 0122 B80000   		movw	$__sdata,	%ax
 689 0125 50       		pushw	%ax
 690 0126 06       		pushw	%es
 691 0127 B80000   		movw	$__ltext,	%ax
 692 012a 50       		pushw	%ax
 693 012b B80000   		movw	$__etext,	%ax
 694 012e 50       		pushw	%ax
 695 012f 06       		pushw	%es
 696 0130 B80000   		movw	$__stext,	%ax
 697 0133 50       		pushw	%ax
 698 0134 06       		pushw	%es
 699 0135 B8BD01   		movw	$.LC22,	%ax
 700 0138 50       		pushw	%ax
 701 0139 B007     		movb	$7,	%al
 702 013b 50       		pushw	%ax
 703 013c E8FEFF   		call	disp_printf
 704 013f 83C428   		addw	$40,	%sp
 705 0142 E8FEFF   		call	emuGetMemoryCapacity
 706 0145 89C6     		movw	%ax,	%si
 707 0147 8956FA   		movw	%dx,	-6(%bp)
 708 014a E8FEFF   		call	emuGetCPUType
 709 014d 8B56FA   		movw	-6(%bp),	%dx
 710 0150 89D3     		movw	%dx,	%bx
 711 0152 B106     		movb	$6,	%cl
 712 0154 D3E3     		shlw	%cl,	%bx
 713 0156 B10A     		movb	$10,	%cl
 714 0158 D3EE     		shrw	%cl,	%si
 715 015a 09DE     		orw	%bx,	%si
 716 015c D3EA     		shrw	%cl,	%dx
 717 015e 52       		pushw	%dx
 718 015f 56       		pushw	%si
 719 0160 50       		pushw	%ax
 720 0161 B86002   		movw	$.LC23,	%ax
 721 0164 50       		pushw	%ax
 722 0165 B007     		movb	$7,	%al
 723 0167 50       		pushw	%ax
 724 0168 E8FEFF   		call	disp_printf
 725 016b B87F02   		movw	$.LC24,	%ax
 726 016e 50       		pushw	%ax
 727 016f E8FEFF   		call	printSection.part.0
 728 0172 E8FEFF   		call	initTimer
 729 0175 B89802   		movw	$.LC25,	%ax
 730 0178 50       		pushw	%ax
 731 0179 E8FEFF   		call	printSection.part.0
 732 017c E8FEFF   		call	fstest
 733 017f 83C40E   		addw	$14,	%sp
 734 0182 85C0     		testw	%ax,	%ax
 735 0184 7554     		jne	.L62
 736 0186 B8B602   		movw	$.LC27,	%ax
 737 0189 50       		pushw	%ax
 738 018a E8FEFF   		call	printSection.part.0
 739 018d A10000   		movw	bootDrive,	%ax
 740 0190 83C041   		addw	$65,	%ax
 741 0193 50       		pushw	%ax
 742 0194 B8BB02   		movw	$.LC28,	%ax
 743 0197 50       		pushw	%ax
 744 0198 B007     		movb	$7,	%al
 745 019a 50       		pushw	%ax
 746 019b E8FEFF   		call	disp_printf
 747 019e E8FEFF   		call	loadSector
 748 01a1 A10000   		movw	bootDrive,	%ax
 749 01a4 83C041   		addw	$65,	%ax
 750 01a7 50       		pushw	%ax
 751 01a8 B8D702   		movw	$.LC29,	%ax
 752 01ab 50       		pushw	%ax
 753 01ac B007     		movb	$7,	%al
 754 01ae 50       		pushw	%ax
 755 01af E8FEFF   		call	disp_printf
 756 01b2 8B360000 		movw	bootDrive,	%si
 757 01b6 83C40E   		addw	$14,	%sp
 758 01b9 83FE01   		cmpw	$1,	%si
 759 01bc 7E03     		jle	.L56
 760 01be 83C67E   		addw	$126,	%si
 761              	.L56:
 762 01c1 E8FEFF   		call	startTimer
 763 01c4 89F0     		movw	%si,	%ax
 764              	#APP
 765              	;# 275 "src/bios.c" 1
 176              		for(i=0; i<256; i++){
 177              			*p++ = int_default_vector_table[i];
 178              			*p++ = reg_cs;
 179              		}
 180              	
 181              		p = (unsigned short *)BufMem;
 182              		p[0x10<<1] = (unsigned short)&int10_handler_asm;
 183              		p[0x11<<1] = (unsigned short)&int11_handler_asm;
 184              		p[0x12<<1] = (unsigned short)&int12_handler_asm;
 185              		p[0x13<<1] = (unsigned short)&int13_handler_asm;
 186              		p[0x14<<1] = (unsigned short)&int14_handler_asm;
 187              		p[0x15<<1] = (unsigned short)&int15_handler_asm;
 188              		p[0x16<<1] = (unsigned short)&int16_handler_asm;
 189              		p[0x1a<<1] = (unsigned short)&int1a_handler_asm;
 190              		p[0x08<<1] = (unsigned short)&int_timer_handler_asm;
 191              	
 192              		copy_data((unsigned char *)BufMem, 0x00, 0x0000, 1024);
 193              		//--------------------------------------------------
 194              	
 195              		s_memset(BufMem, 0x00, 256);
 196              	
 197              		unsigned char *pbyte = (unsigned char *)BufMem;
 198              		*((unsigned int  *)(&pbyte[0x10])) = ((1<<8)+(0x01<<6)+(0x02<<4)+2+1);	// See: https://stanislavs.
 199              		*((unsigned int  *)(&pbyte[0x13])) = 640;	// Memory Size in KBytes (INT 12h)
 200              		*((unsigned int  *)(&pbyte[0x1A])) = 0x1e;	// Keyboard buffer (40:1e-40:3d 32bytes) head from 40:0
 201              		*((unsigned int  *)(&pbyte[0x1C])) = 0x1e;	// Keyboard buffer (40:1e-40:3d 32bytes) tail from 40:0
 202              		*((unsigned char *)(&pbyte[0x49])) = 0x03;	// Video mode (Text  80 x 25 All but MDA 16 fore/8 back
 203              		*((unsigned int  *)(&pbyte[0x4a])) = 80;	// Number of screen columns 
 204              		*((unsigned int  *)(&pbyte[0x63])) = 0x3d4;	// Base port address for Video controller (TODO: check
 205              		*((unsigned char *)(&pbyte[0x84])) = 24;	// Rows on the screen (0-based)
 206              		*((unsigned int  *)(&pbyte[0x4c])) = 0x1000; // Size of video region buffer (4KB)
 207              		*((unsigned char *)(&pbyte[0x60])) = 07;	// Cuesor ending scan line
 208              		*((unsigned char *)(&pbyte[0x61])) = 06;	// Cuesor starting scan line
 209              	
 210              		//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 211              		// 40:AC : Second entry point of INT10 handler
 212              		//
 213              		// Note that 40:AC - 40:B3 (8bytes) are reserved space of BIOS Data area
 214              		//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 215              		*((unsigned char *)(&pbyte[0xAC])) = 0xEA;		// ljmp (JMP ptr16:16)
 216              		*((unsigned int  *)(&pbyte[0xAD])) = (unsigned short)&int10_handler_asm; // offset
 217              		*((unsigned int  *)(&pbyte[0xAF])) = reg_cs;	// segment
 218              		//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 219              	
 220              		copy_data((unsigned char *)BufMem, 0x00, (unsigned char *)0x400, 256);
 221              		//--------------------------------------------------
 222              	
 223              		/* Initialize the display of the emulated computer */
 224              	    unsigned char __far * dbuf = _MK_FP(0xb800, 0);
 225              		for(i=0; i< 80*25; i++){
 226              			*dbuf++ = ' ';
 227              			*dbuf++ = 0x08;
 228              		}
 229              	
 230              		// cursor position when OS boot
 231              	//	set_cursorPosition(0, 0, 24);
 232              	//	set_cursorPosition(0, 0, 15);
 233              	
 234              		s_printf("\033[2J");	// Clear the host terminal by the escape sequence code
 235              		printSection(0, "Sweet pea x86 BIOS   (Build: " __DATE__ " " __TIME__") ");
 236              	
 237              		disp_printf(DISP_ATTR_NORMAL, "Text   : 0x%04x:0x%04x - 0x%04x:0x%04x (0x%04x byte)\r\n"
 238              		         "Data   : 0x%04x:0x%04x - 0x%04x:0x%04x (0x%04x byte)\r\n"
 239              				 "BSS    : 0x%04x:0x%04x - 0x%04x:0x%04x (0x%04x byte)\r\n",
 240              			reg_cs, &__stext, reg_cs, &__etext, &__ltext, 
 241              			reg_cs, &__sdata, reg_cs, &__edata, &__ldata, 
 242              			reg_cs, &__sbss , reg_cs, &__ebss , &__lbss0);
 243              		disp_printf(DISP_ATTR_NORMAL, "CPU : i80%d  Memory : %d KiB\r\n",
 244              			emuGetCPUType(), emuGetMemoryCapacity()/1024);
 245              	
 246              		//--------------------------------------------------
 247              		printSection(1, "Initializing devices ...");
 248              		initTimer();
 249              	
 250              		printSection(1, "Disks");
 251              		if( fstest() != 0 ){
 252              			disp_printf(DISP_ATTR_NORMAL, "Boot process failed....");
 253              			return 0;
 254              		}
 255              	
 256              		printSection(1, "Boot");
 257              	
 258              	//	bootDrive = 2;
 259              		disp_printf(DISP_ATTR_NORMAL, "Booting from drive %c: ...\n", 'A'+bootDrive);
 260              		loadSector();
 261              	
 262              		disp_printf(DISP_ATTR_NORMAL, "Switched to Operating System ...\n", 'A'+bootDrive);
 263              	
 264              		int BIOSdriveNum = bootDrive;
 265              		if(BIOSdriveNum >= 2){
 266              			BIOSdriveNum = (BIOSdriveNum-2) + 0x80;
 267              		}
 268              	
 269              		//--------------------------------------------------
 270              		// starting the timer
 271              		startTimer();
 272              		//--------------------------------------------------
 273              	
 274              		// DX : boot drive number
 275 01c6 BCFFBF   		asm volatile(
 276 01c9 FB       			"mov $0xbfff, %%sp\n"
 277 01ca 89C2     			"sti\n"
 278 01cc EA007C00 			"mov  %w0, %%dx\n"
 278      00
 279              			"ljmp $0x00, $0x7c00\n"
 280              			 :  : "a"(BIOSdriveNum) );
 766              		mov $0xbfff, %sp
 767              	sti
 768              	mov  %ax, %dx
 769              	ljmp $0x00, $0x7c00
 770              	
 771              	;# 0 "" 2
 772              	#NO_APP
 773 01d1 31C0     		xorw	%ax,	%ax
 774 01d3 89EC     		movw	%bp,	%sp
 775 01d5 5D       		popw	%bp
 776 01d6 07       		popw	%es
 777 01d7 5F       		popw	%di
 778 01d8 5E       		popw	%si
 779 01d9 C3       		ret
 780              	.L62:
 781 01da B89E02   		movw	$.LC26,	%ax
 782 01dd 50       		pushw	%ax
 783 01de B007     		movb	$7,	%al
 784 01e0 50       		pushw	%ax
 785 01e1 E8FEFF   		call	disp_printf
 786 01e4 83C404   		addw	$4,	%sp
 787 01e7 31C0     		xorw	%ax,	%ax
 788 01e9 89EC     		movw	%bp,	%sp
 789 01eb 5D       		popw	%bp
 790 01ec 07       		popw	%es
 791 01ed 5F       		popw	%di
 792 01ee 5E       		popw	%si
 793 01ef C3       		ret
 795              		.global	initial_dx_value
 796              		.bss
 797              		.p2align	1
 800              	initial_dx_value:
 801 0000 0000     		.skip	2,0
 802              		.global	processor_is_486_or_newer
 803              		.p2align	1
 806              	processor_is_486_or_newer:
 807 0002 0000     		.skip	2,0
 808              		.global	hdd_total_sectors
 809              		.p2align	1
 812              	hdd_total_sectors:
 813 0004 00000000 		.skip	4,0
 814              		.global	hdd_sector
 815              		.data
 816              		.p2align	1
 819              	hdd_sector:
 820 0000 3F00     		.hword	63
 821              		.global	hdd_head
 822              		.bss
 823              		.p2align	1
 826              	hdd_head:
 827 0008 0000     		.skip	2,0
 828              		.global	hdd_cylinder
 829              		.p2align	1
 832              	hdd_cylinder:
 833 000a 0000     		.skip	2,0
 834              		.global	hdd_ready
 835              		.p2align	1
 838              	hdd_ready:
 839 000c 0000     		.skip	2,0
 840              		.comm	BufMem,1024,2
 841              		.global	bootDrive
 842              		.data
 843              		.p2align	1
 846              	bootDrive:
 847 0002 FFFF     		.hword	-1
 848              		.ident	"GCC: (GNU) 6.3.0"
   1              		.arch i8086,jumps
   2              		.code16
   3              		.att_syntax prefix
   4              	#NO_APP
   5              		.text
   6              		.global	display_putc
   8              	display_putc:
   9 0000 55       		pushw	%bp
  10 0001 89E5     		movw	%sp,	%bp
  11 0003 FF7606   		pushw	6(%bp)
  12 0006 30C0     		xorb	%al,	%al
  13 0008 50       		pushw	%ax
  14 0009 FF7604   		pushw	4(%bp)
  15 000c E8FEFF   		call	putCharWithAttr
  16 000f 89EC     		movw	%bp,	%sp
  17 0011 5D       		popw	%bp
  18 0012 C3       		ret
  20              		.global	memcmp
  22              	memcmp:
  23 0013 56       		pushw	%si
  24 0014 55       		pushw	%bp
  25 0015 89E5     		movw	%sp,	%bp
  26 0017 8B5E06   		movw	6(%bp),	%bx
  27 001a 8B7608   		movw	8(%bp),	%si
  28 001d 8B460A   		movw	10(%bp),	%ax
  29 0020 85C0     		testw	%ax,	%ax
  30 0022 7421     		je	.L3
  31 0024 8A17     		movb	(%bx),	%dl
  32 0026 8A24     		movb	(%si),	%ah
  33 0028 38E2     		cmpb	%ah,	%dl
  34 002a 7513     		jne	.L5
  35 002c 89D9     		movw	%bx,	%cx
  36 002e 034E0A   		addw	10(%bp),	%cx
  37              	.L7:
  38 0031 43       		incw	%bx
  39 0032 46       		incw	%si
  40 0033 39D9     		cmpw	%bx,	%cx
  41 0035 7411     		je	.L15
  42 0037 8A17     		movb	(%bx),	%dl
  43 0039 8A24     		movb	(%si),	%ah
  44 003b 38E2     		cmpb	%ah,	%dl
  45 003d 74F2     		je	.L7
  46              	.L5:
  47 003f 28E2     		subb	%ah,	%dl
  48 0041 18F6     		sbbb	%dh,	%dh
  49 0043 89D0     		movw	%dx,	%ax
  50              	.L3:
  51 0045 5D       		popw	%bp
  52 0046 5E       		popw	%si
  53 0047 C3       		ret
  54              	.L15:
  55 0048 31C0     		xorw	%ax,	%ax
  56 004a 5D       		popw	%bp
  57 004b 5E       		popw	%si
  58 004c C3       		ret
  60              		.global	s_memcmp
  62              	s_memcmp:
  63 004d 56       		pushw	%si
  64 004e 55       		pushw	%bp
  65 004f 89E5     		movw	%sp,	%bp
  66 0051 8B5E06   		movw	6(%bp),	%bx
  67 0054 8B7608   		movw	8(%bp),	%si
  68 0057 8B460A   		movw	10(%bp),	%ax
  69 005a 85C0     		testw	%ax,	%ax
  70 005c 7421     		je	.L16
  71 005e 8A17     		movb	(%bx),	%dl
  72 0060 8A24     		movb	(%si),	%ah
  73 0062 38E2     		cmpb	%ah,	%dl
  74 0064 7513     		jne	.L18
  75 0066 89D9     		movw	%bx,	%cx
  76 0068 034E0A   		addw	10(%bp),	%cx
  77              	.L20:
  78 006b 43       		incw	%bx
  79 006c 46       		incw	%si
  80 006d 39D9     		cmpw	%bx,	%cx
  81 006f 7411     		je	.L28
  82 0071 8A17     		movb	(%bx),	%dl
  83 0073 8A24     		movb	(%si),	%ah
  84 0075 38E2     		cmpb	%ah,	%dl
  85 0077 74F2     		je	.L20
  86              	.L18:
  87 0079 28E2     		subb	%ah,	%dl
  88 007b 18F6     		sbbb	%dh,	%dh
  89 007d 89D0     		movw	%dx,	%ax
  90              	.L16:
  91 007f 5D       		popw	%bp
  92 0080 5E       		popw	%si
  93 0081 C3       		ret
  94              	.L28:
  95 0082 31C0     		xorw	%ax,	%ax
  96 0084 5D       		popw	%bp
  97 0085 5E       		popw	%si
  98 0086 C3       		ret
 100              		.global	s_strncpy
 102              	s_strncpy:
 103 0087 56       		pushw	%si
 104 0088 57       		pushw	%di
 105 0089 55       		pushw	%bp
 106 008a 89E5     		movw	%sp,	%bp
 107 008c 8B7E08   		movw	8(%bp),	%di
 108 008f 837E0C00 		cmpw	$0,	12(%bp)
 109 0093 743B     		je	.L44
 110 0095 8B560C   		movw	12(%bp),	%dx
 111 0098 4A       		decw	%dx
 112 0099 8D4501   		leaw	1(%di),	%ax
 113 009c 8B5E0A   		movw	10(%bp),	%bx
 114 009f 43       		incw	%bx
 115 00a0 8B760A   		movw	10(%bp),	%si
 116 00a3 8A0C     		movb	(%si),	%cl
 117 00a5 880D     		movb	%cl,	(%di)
 118 00a7 89C6     		movw	%ax,	%si
 119 00a9 84C9     		testb	%cl,	%cl
 120 00ab 7413     		je	.L31
 121              	.L33:
 122 00ad 85D2     		testw	%dx,	%dx
 123 00af 741F     		je	.L44
 124 00b1 4A       		decw	%dx
 125 00b2 8D4401   		leaw	1(%si),	%ax
 126 00b5 8A0F     		movb	(%bx),	%cl
 127 00b7 880C     		movb	%cl,	(%si)
 128 00b9 43       		incw	%bx
 129 00ba 89C6     		movw	%ax,	%si
 130 00bc 84C9     		testb	%cl,	%cl
 131 00be 75ED     		jne	.L33
 132              	.L31:
 133 00c0 89C3     		movw	%ax,	%bx
 134 00c2 01D0     		addw	%dx,	%ax
 135 00c4 85D2     		testw	%dx,	%dx
 136 00c6 7408     		je	.L44
 137              	.L40:
 138 00c8 C60700   		movb	$0,	(%bx)
 139 00cb 43       		incw	%bx
 140 00cc 39D8     		cmpw	%bx,	%ax
 141 00ce 75F8     		jne	.L40
 142              	.L44:
 143 00d0 89F8     		movw	%di,	%ax
 144 00d2 5D       		popw	%bp
 145 00d3 5F       		popw	%di
 146 00d4 5E       		popw	%si
 147 00d5 C3       		ret
 149              		.global	s_strcpy
 151              	s_strcpy:
 152 00d6 56       		pushw	%si
 153 00d7 57       		pushw	%di
 154 00d8 89E3     		movw	%sp,	%bx
 155 00da 8B7F06   		movw	6(%bx),	%di
 156 00dd 8B7708   		movw	8(%bx),	%si
 157 00e0 8A04     		movb	(%si),	%al
 158 00e2 31DB     		xorw	%bx,	%bx
 159 00e4 84C0     		testb	%al,	%al
 160 00e6 7409     		je	.L50
 161              	.L51:
 162 00e8 8801     		movb	%al,	(%bx,%di)
 163 00ea 43       		incw	%bx
 164 00eb 8A00     		movb	(%bx,%si),	%al
 165 00ed 84C0     		testb	%al,	%al
 166 00ef 75F7     		jne	.L51
 167              	.L50:
 168 00f1 C60100   		movb	$0,	(%bx,%di)
 169 00f4 89F8     		movw	%di,	%ax
 170 00f6 5F       		popw	%di
 171 00f7 5E       		popw	%si
 172 00f8 C3       		ret
 174              		.global	s_strcmp
 176              	s_strcmp:
 177 00f9 56       		pushw	%si
 178 00fa 55       		pushw	%bp
 179 00fb 89E5     		movw	%sp,	%bp
 180 00fd 8B5E06   		movw	6(%bp),	%bx
 181 0100 8B7608   		movw	8(%bp),	%si
 182 0103 8A07     		movb	(%bx),	%al
 183 0105 8A0C     		movb	(%si),	%cl
 184 0107 38C1     		cmpb	%al,	%cl
 185 0109 7517     		jne	.L58
 186 010b 84C9     		testb	%cl,	%cl
 187 010d 740E     		je	.L64
 188              	.L61:
 189 010f 43       		incw	%bx
 190 0110 46       		incw	%si
 191 0111 8A07     		movb	(%bx),	%al
 192 0113 8A0C     		movb	(%si),	%cl
 193 0115 38C8     		cmpb	%cl,	%al
 194 0117 7509     		jne	.L58
 195 0119 84C0     		testb	%al,	%al
 196 011b 75F2     		jne	.L61
 197              	.L64:
 198 011d 31C0     		xorw	%ax,	%ax
 199 011f 5D       		popw	%bp
 200 0120 5E       		popw	%si
 201 0121 C3       		ret
 202              	.L58:
 203 0122 98       		cbtw
 204 0123 89C2     		movw	%ax,	%dx
 205 0125 88C8     		movb	%cl,	%al
 206 0127 98       		cbtw
 207 0128 29C2     		subw	%ax,	%dx
 208 012a 89D0     		movw	%dx,	%ax
 209 012c 5D       		popw	%bp
 210 012d 5E       		popw	%si
 211 012e C3       		ret
 213              		.global	s_strncmp
 215              	s_strncmp:
 216 012f 56       		pushw	%si
 217 0130 55       		pushw	%bp
 218 0131 89E5     		movw	%sp,	%bp
 219 0133 8B5E06   		movw	6(%bp),	%bx
 220 0136 8B7608   		movw	8(%bp),	%si
 221 0139 8B4E0A   		movw	10(%bp),	%cx
 222 013c 49       		decw	%cx
 223 013d 8A07     		movb	(%bx),	%al
 224 013f 8A14     		movb	(%si),	%dl
 225 0141 38D0     		cmpb	%dl,	%al
 226 0143 751C     		jne	.L69
 227              	.L81:
 228 0145 83F901   		cmpw	$1,	%cx
 229 0148 18E4     		sbbb	%ah,	%ah
 230 014a F6DC     		negb	%ah
 231 014c 3C01     		cmpb	$1,	%al
 232 014e 18C0     		sbbb	%al,	%al
 233 0150 F6D8     		negb	%al
 234 0152 08C4     		orb	%al,	%ah
 235 0154 7518     		jne	.L75
 236 0156 43       		incw	%bx
 237 0157 46       		incw	%si
 238 0158 49       		decw	%cx
 239 0159 8A07     		movb	(%bx),	%al
 240 015b 8A14     		movb	(%si),	%dl
 241 015d 38D0     		cmpb	%dl,	%al
 242 015f 74E4     		je	.L81
 243              	.L69:
 244 0161 98       		cbtw
 245 0162 89C1     		movw	%ax,	%cx
 246 0164 88D0     		movb	%dl,	%al
 247 0166 98       		cbtw
 248 0167 29C1     		subw	%ax,	%cx
 249 0169 89C8     		movw	%cx,	%ax
 250 016b 5D       		popw	%bp
 251 016c 5E       		popw	%si
 252 016d C3       		ret
 253              	.L75:
 254 016e 31C0     		xorw	%ax,	%ax
 255 0170 5D       		popw	%bp
 256 0171 5E       		popw	%si
 257 0172 C3       		ret
 259              		.global	s_strlen
 261              	s_strlen:
 262 0173 57       		pushw	%di
 263 0174 89E3     		movw	%sp,	%bx
 264 0176 8B7F04   		movw	4(%bx),	%di
 265 0179 31DB     		xorw	%bx,	%bx
 266 017b 803D00   		cmpb	$0,	(%di)
 267 017e 7406     		je	.L82
 268              	.L84:
 269 0180 43       		incw	%bx
 270 0181 803900   		cmpb	$0,	(%bx,%di)
 271 0184 75FA     		jne	.L84
 272              	.L82:
 273 0186 89D8     		movw	%bx,	%ax
 274 0188 5F       		popw	%di
 275 0189 C3       		ret
 277              		.global	s_strstr
 279              	s_strstr:
 280 018a 56       		pushw	%si
 281 018b 57       		pushw	%di
 282 018c 55       		pushw	%bp
 283 018d 89E5     		movw	%sp,	%bp
 284 018f 83EC02   		subw	$2,	%sp
 285 0192 C57E08   		ldsw	8(%bp),	%di
 286 0195 89F8     		movw	%di,	%ax
 287 0197 8CDA     		movw	%ds,	%dx
 288 0199 85D2     		testw	%dx,	%dx
 289 019b 7464     		je	.L90
 290 019d 8CDB     		movw	%ds,	%bx
 291 019f 368A07   		movb	%ss:(%bx),	%al
 292 01a2 88C2     		movb	%al,	%dl
 293 01a4 8846FF   		movb	%al,	-1(%bp)
 294 01a7 89F8     		movw	%di,	%ax
 295 01a9 84D2     		testb	%dl,	%dl
 296 01ab 7454     		je	.L90
 297 01ad 31C9     		xorw	%cx,	%cx
 298 01af 89CB     		movw	%cx,	%bx
 299 01b1 43       		incw	%bx
 300 01b2 8CDE     		movw	%ds,	%si
 301 01b4 36803801 		cmpb	$1,	%ss:(%bx,%si)
 302 01b8 720D     		jc	.L113
 303              	.L100:
 304 01ba 89D9     		movw	%bx,	%cx
 305 01bc 89CB     		movw	%cx,	%bx
 306 01be 43       		incw	%bx
 307 01bf 8CDE     		movw	%ds,	%si
 308 01c1 36803801 		cmpb	$1,	%ss:(%bx,%si)
 309 01c5 73F3     		jnc	.L100
 310              	.L113:
 311 01c7 89F8     		movw	%di,	%ax
 312 01c9 85DB     		testw	%bx,	%bx
 313 01cb 7434     		je	.L90
 314 01cd 368A05   		movb	%ss:(%di),	%al
 315 01d0 84C0     		testb	%al,	%al
 316 01d2 743D     		je	.L110
 317              	.L97:
 318 01d4 3A46FF   		cmpb	-1(%bp),	%al
 319 01d7 7530     		jne	.L93
 320 01d9 85C9     		testw	%cx,	%cx
 321 01db 7422     		je	.L104
 322 01dd 8CDB     		movw	%ds,	%bx
 323 01df 89FE     		movw	%di,	%si
 324 01e1 89CA     		movw	%cx,	%dx
 325              	.L95:
 326 01e3 46       		incw	%si
 327 01e4 43       		incw	%bx
 328 01e5 4A       		decw	%dx
 329 01e6 368A04   		movb	%ss:(%si),	%al
 330 01e9 363A07   		cmpb	%ss:(%bx),	%al
 331 01ec 751B     		jne	.L93
 332 01ee 83FA01   		cmpw	$1,	%dx
 333 01f1 18E4     		sbbb	%ah,	%ah
 334 01f3 F6DC     		negb	%ah
 335 01f5 3C01     		cmpb	$1,	%al
 336 01f7 18C0     		sbbb	%al,	%al
 337 01f9 F6D8     		negb	%al
 338 01fb 08C4     		orb	%al,	%ah
 339 01fd 74E4     		je	.L95
 340              	.L104:
 341 01ff 89F8     		movw	%di,	%ax
 342              	.L90:
 343 0201 89EC     		movw	%bp,	%sp
 344 0203 5D       		popw	%bp
 345 0204 5F       		popw	%di
 346 0205 5E       		popw	%si
 347 0206 16       		pushw	%ss
 348 0207 1F       		popw	%ds
 349 0208 C3       		ret
 350              	.L93:
 351 0209 47       		incw	%di
 352 020a 368A05   		movb	%ss:(%di),	%al
 353 020d 84C0     		testb	%al,	%al
 354 020f 75C3     		jne	.L97
 355              	.L110:
 356 0211 31C0     		xorw	%ax,	%ax
 357 0213 89EC     		movw	%bp,	%sp
 358 0215 5D       		popw	%bp
 359 0216 5F       		popw	%di
 360 0217 5E       		popw	%si
 361 0218 16       		pushw	%ss
 362 0219 1F       		popw	%ds
 363 021a C3       		ret
 365              		.global	s_strrchr
 367              	s_strrchr:
 368 021b 55       		pushw	%bp
 369 021c 89E5     		movw	%sp,	%bp
 370 021e 8B5E04   		movw	4(%bp),	%bx
 371 0221 8B5606   		movw	6(%bp),	%dx
 372 0224 8A07     		movb	(%bx),	%al
 373 0226 31C9     		xorw	%cx,	%cx
 374 0228 84C0     		testb	%al,	%al
 375 022a 740C     		je	.L114
 376              	.L117:
 377 022c 98       		cbtw
 378 022d 39D0     		cmpw	%dx,	%ax
 379 022f 740B     		je	.L123
 380 0231 43       		incw	%bx
 381 0232 8A07     		movb	(%bx),	%al
 382 0234 84C0     		testb	%al,	%al
 383 0236 75F4     		jne	.L117
 384              	.L114:
 385 0238 89C8     		movw	%cx,	%ax
 386 023a 5D       		popw	%bp
 387 023b C3       		ret
 388              	.L123:
 389 023c 89D9     		movw	%bx,	%cx
 390 023e 43       		incw	%bx
 391 023f 8A07     		movb	(%bx),	%al
 392 0241 84C0     		testb	%al,	%al
 393 0243 75E7     		jne	.L117
 394 0245 EBF1     		jmp	.L114
 396              		.global	s_strchr
 398              	s_strchr:
 399 0247 55       		pushw	%bp
 400 0248 89E5     		movw	%sp,	%bp
 401 024a 8B5E04   		movw	4(%bp),	%bx
 402 024d 8B5606   		movw	6(%bp),	%dx
 403 0250 8A07     		movb	(%bx),	%al
 404 0252 84C0     		testb	%al,	%al
 405 0254 7415     		je	.L129
 406 0256 98       		cbtw
 407 0257 39C2     		cmpw	%ax,	%dx
 408 0259 740C     		je	.L124
 409              	.L127:
 410 025b 43       		incw	%bx
 411 025c 8A07     		movb	(%bx),	%al
 412 025e 84C0     		testb	%al,	%al
 413 0260 7409     		je	.L129
 414 0262 98       		cbtw
 415 0263 39D0     		cmpw	%dx,	%ax
 416 0265 75F4     		jne	.L127
 417              	.L124:
 418 0267 89D8     		movw	%bx,	%ax
 419 0269 5D       		popw	%bp
 420 026a C3       		ret
 421              	.L129:
 422 026b 31DB     		xorw	%bx,	%bx
 423 026d 89D8     		movw	%bx,	%ax
 424 026f 5D       		popw	%bp
 425 0270 C3       		ret
 427              		.global	memset
 429              	memset:
 430 0271 55       		pushw	%bp
 431 0272 89E5     		movw	%sp,	%bp
 432 0274 8B4604   		movw	4(%bp),	%ax
 433 0277 8A4E06   		movb	6(%bp),	%cl
 434 027a 89C2     		movw	%ax,	%dx
 435 027c 035608   		addw	8(%bp),	%dx
 436 027f 837E0800 		cmpw	$0,	8(%bp)
 437 0283 7409     		je	.L140
 438 0285 89C3     		movw	%ax,	%bx
 439              	.L138:
 440 0287 880F     		movb	%cl,	(%bx)
 441 0289 43       		incw	%bx
 442 028a 39D3     		cmpw	%dx,	%bx
 443 028c 75F9     		jne	.L138
 444              	.L140:
 445 028e 5D       		popw	%bp
 446 028f C3       		ret
 448              		.global	s_memset
 450              	s_memset:
 451 0290 55       		pushw	%bp
 452 0291 89E5     		movw	%sp,	%bp
 453 0293 8B4604   		movw	4(%bp),	%ax
 454 0296 8A4E06   		movb	6(%bp),	%cl
 455 0299 89C2     		movw	%ax,	%dx
 456 029b 035608   		addw	8(%bp),	%dx
 457 029e 837E0800 		cmpw	$0,	8(%bp)
 458 02a2 7409     		je	.L150
 459 02a4 89C3     		movw	%ax,	%bx
 460              	.L148:
 461 02a6 880F     		movb	%cl,	(%bx)
 462 02a8 43       		incw	%bx
 463 02a9 39D3     		cmpw	%dx,	%bx
 464 02ab 75F9     		jne	.L148
 465              	.L150:
 466 02ad 5D       		popw	%bp
 467 02ae C3       		ret
 469              		.global	memcpy
 471              	memcpy:
 472 02af 56       		pushw	%si
 473 02b0 55       		pushw	%bp
 474 02b1 89E5     		movw	%sp,	%bp
 475 02b3 8B4606   		movw	6(%bp),	%ax
 476 02b6 8B7608   		movw	8(%bp),	%si
 477 02b9 89C2     		movw	%ax,	%dx
 478 02bb 03560A   		addw	10(%bp),	%dx
 479 02be 837E0A00 		cmpw	$0,	10(%bp)
 480 02c2 740C     		je	.L160
 481 02c4 89C3     		movw	%ax,	%bx
 482              	.L158:
 483 02c6 8A0C     		movb	(%si),	%cl
 484 02c8 880F     		movb	%cl,	(%bx)
 485 02ca 43       		incw	%bx
 486 02cb 46       		incw	%si
 487 02cc 39D3     		cmpw	%dx,	%bx
 488 02ce 75F6     		jne	.L158
 489              	.L160:
 490 02d0 5D       		popw	%bp
 491 02d1 5E       		popw	%si
 492 02d2 C3       		ret
 494              		.global	s_memcpy
 496              	s_memcpy:
 497 02d3 56       		pushw	%si
 498 02d4 55       		pushw	%bp
 499 02d5 89E5     		movw	%sp,	%bp
 500 02d7 8B4606   		movw	6(%bp),	%ax
 501 02da 8B7608   		movw	8(%bp),	%si
 502 02dd 89C2     		movw	%ax,	%dx
 503 02df 03560A   		addw	10(%bp),	%dx
 504 02e2 837E0A00 		cmpw	$0,	10(%bp)
 505 02e6 740C     		je	.L170
 506 02e8 89C3     		movw	%ax,	%bx
 507              	.L168:
 508 02ea 8A0C     		movb	(%si),	%cl
 509 02ec 880F     		movb	%cl,	(%bx)
 510 02ee 43       		incw	%bx
 511 02ef 46       		incw	%si
 512 02f0 39D3     		cmpw	%dx,	%bx
 513 02f2 75F6     		jne	.L168
 514              	.L170:
 515 02f4 5D       		popw	%bp
 516 02f5 5E       		popw	%si
 517 02f6 C3       		ret
 519              		.global	output_putc
 521              	output_putc:
 522 02f7 56       		pushw	%si
 523 02f8 57       		pushw	%di
 524 02f9 55       		pushw	%bp
 525 02fa 89E5     		movw	%sp,	%bp
 526 02fc 8E5E08   		movw	8(%bp),	%ds
 527 02ff 8A560A   		movb	10(%bp),	%dl
 528 0302 8CDB     		movw	%ds,	%bx
 529 0304 368B07   		movw	%ss:(%bx),	%ax
 530 0307 85C0     		testw	%ax,	%ax
 531 0309 745D     		je	.L184
 532 030b 8CDB     		movw	%ds,	%bx
 533 030d 368B4F04 		movw	%ss:4(%bx),	%cx
 534 0311 85C9     		testw	%cx,	%cx
 535 0313 7C34     		jl	.L185
 536 0315 8CDB     		movw	%ds,	%bx
 537 0317 368B7706 		movw	%ss:6(%bx),	%si
 538 031b 49       		decw	%cx
 539 031c 39CE     		cmpw	%cx,	%si
 540 031e 7D19     		jge	.L180
 541 0320 8D4C01   		leaw	1(%si),	%cx
 542 0323 8CDB     		movw	%ds,	%bx
 543 0325 36894F06 		movw	%cx,	%ss:6(%bx)
 544 0329 89C7     		movw	%ax,	%di
 545 032b 89F3     		movw	%si,	%bx
 546 032d 368811   		movb	%dl,	%ss:(%bx,%di)
 547 0330 8CDB     		movw	%ds,	%bx
 548 0332 368B07   		movw	%ss:(%bx),	%ax
 549 0335 368B7706 		movw	%ss:6(%bx),	%si
 550              	.L180:
 551 0339 89C7     		movw	%ax,	%di
 552 033b 89F3     		movw	%si,	%bx
 553 033d 36C60100 		movb	$0,	%ss:(%bx,%di)
 554 0341 89EC     		movw	%bp,	%sp
 555 0343 5D       		popw	%bp
 556 0344 5F       		popw	%di
 557 0345 5E       		popw	%si
 558 0346 16       		pushw	%ss
 559 0347 1F       		popw	%ds
 560 0348 C3       		ret
 561              	.L185:
 562 0349 368B7706 		movw	%ss:6(%bx),	%si
 563 034d 8D4C01   		leaw	1(%si),	%cx
 564 0350 8CDB     		movw	%ds,	%bx
 565 0352 36894F06 		movw	%cx,	%ss:6(%bx)
 566 0356 89C7     		movw	%ax,	%di
 567 0358 89F3     		movw	%si,	%bx
 568 035a 368811   		movb	%dl,	%ss:(%bx,%di)
 569 035d 8CDB     		movw	%ds,	%bx
 570 035f 368B07   		movw	%ss:(%bx),	%ax
 571 0362 368B7706 		movw	%ss:6(%bx),	%si
 572 0366 EBD1     		jmp	.L180
 573              	.L184:
 574 0368 368A4F02 		movb	%ss:2(%bx),	%cl
 575 036c 84C9     		testb	%cl,	%cl
 576 036e 750D     		jne	.L176
 577 0370 885608   		movb	%dl,	8(%bp)
 578 0373 16       		pushw	%ss
 579 0374 1F       		popw	%ds
 580 0375 89EC     		movw	%bp,	%sp
 581 0377 5D       		popw	%bp
 582 0378 5F       		popw	%di
 583 0379 5E       		popw	%si
 584 037a E9FEFF   		jmp	systemSerialPutc
 585              	.L176:
 586 037d 51       		pushw	%cx
 587 037e 50       		pushw	%ax
 588 037f 52       		pushw	%dx
 589 0380 16       		pushw	%ss
 590 0381 1F       		popw	%ds
 591 0382 E8FEFF   		call	putCharWithAttr
 592 0385 83C406   		addw	$6,	%sp
 593 0388 89EC     		movw	%bp,	%sp
 594 038a 5D       		popw	%bp
 595 038b 5F       		popw	%di
 596 038c 5E       		popw	%si
 597 038d C3       		ret
 599              		.global	output_string
 601              	output_string:
 602 038e 56       		pushw	%si
 603 038f 57       		pushw	%di
 604 0390 06       		pushw	%es
 605 0391 55       		pushw	%bp
 606 0392 89E5     		movw	%sp,	%bp
 607 0394 83EC02   		subw	$2,	%sp
 608 0397 8E460A   		movw	10(%bp),	%es
 609 039a 8B460C   		movw	12(%bp),	%ax
 610 039d 8946FE   		movw	%ax,	-2(%bp)
 611 03a0 8CC3     		movw	%es,	%bx
 612 03a2 8B07     		movw	(%bx),	%ax
 613 03a4 85C0     		testw	%ax,	%ax
 614 03a6 7503E996 		je	.L207
 614      00
 615 03ab 8CC3     		movw	%es,	%bx
 616 03ad 8B5F06   		movw	6(%bx),	%bx
 617 03b0 89C7     		movw	%ax,	%di
 618 03b2 C60100   		movb	$0,	(%bx,%di)
 619 03b5 8CC3     		movw	%es,	%bx
 620 03b7 8B4704   		movw	4(%bx),	%ax
 621 03ba 8B5EFE   		movw	-2(%bp),	%bx
 622 03bd 85C0     		testw	%ax,	%ax
 623 03bf 7C49     		jl	.L208
 624 03c1 803F00   		cmpb	$0,	(%bx)
 625 03c4 8CC3     		movw	%es,	%bx
 626 03c6 8B5F06   		movw	6(%bx),	%bx
 627 03c9 7431     		je	.L196
 628 03cb 48       		decw	%ax
 629 03cc 39C3     		cmpw	%ax,	%bx
 630 03ce 7D2C     		jge	.L196
 631 03d0 8B7EFE   		movw	-2(%bp),	%di
 632              	.L198:
 633 03d3 8D4701   		leaw	1(%bx),	%ax
 634 03d6 8CC6     		movw	%es,	%si
 635 03d8 894406   		movw	%ax,	6(%si)
 636 03db FF46FE   		incw	-2(%bp)
 637 03de 8A05     		movb	(%di),	%al
 638 03e0 8B34     		movw	(%si),	%si
 639 03e2 8800     		movb	%al,	(%bx,%si)
 640 03e4 8B5EFE   		movw	-2(%bp),	%bx
 641 03e7 803F00   		cmpb	$0,	(%bx)
 642 03ea 8CC3     		movw	%es,	%bx
 643 03ec 8B5F06   		movw	6(%bx),	%bx
 644 03ef 740B     		je	.L196
 645 03f1 47       		incw	%di
 646 03f2 8CC6     		movw	%es,	%si
 647 03f4 8B4404   		movw	4(%si),	%ax
 648 03f7 48       		decw	%ax
 649 03f8 39C3     		cmpw	%ax,	%bx
 650 03fa 7CD7     		jl	.L198
 651              	.L196:
 652 03fc 8CC7     		movw	%es,	%di
 653 03fe 8B3D     		movw	(%di),	%di
 654 0400 C60100   		movb	$0,	(%bx,%di)
 655              	.L186:
 656 0403 89EC     		movw	%bp,	%sp
 657 0405 5D       		popw	%bp
 658 0406 07       		popw	%es
 659 0407 5F       		popw	%di
 660 0408 5E       		popw	%si
 661 0409 C3       		ret
 662              	.L208:
 663 040a 89DF     		movw	%bx,	%di
 664 040c 803F00   		cmpb	$0,	(%bx)
 665 040f 741F     		je	.L200
 666              	.L201:
 667 0411 8CC3     		movw	%es,	%bx
 668 0413 8B5F06   		movw	6(%bx),	%bx
 669 0416 8D4701   		leaw	1(%bx),	%ax
 670 0419 8CC6     		movw	%es,	%si
 671 041b 894406   		movw	%ax,	6(%si)
 672 041e FF46FE   		incw	-2(%bp)
 673 0421 8A05     		movb	(%di),	%al
 674 0423 8B34     		movw	(%si),	%si
 675 0425 8800     		movb	%al,	(%bx,%si)
 676 0427 47       		incw	%di
 677 0428 8B5EFE   		movw	-2(%bp),	%bx
 678 042b 803F00   		cmpb	$0,	(%bx)
 679 042e 75E1     		jne	.L201
 680              	.L200:
 681 0430 8CC3     		movw	%es,	%bx
 682 0432 8B3F     		movw	(%bx),	%di
 683 0434 8B5F06   		movw	6(%bx),	%bx
 684 0437 C60100   		movb	$0,	(%bx,%di)
 685 043a 89EC     		movw	%bp,	%sp
 686 043c 5D       		popw	%bp
 687 043d 07       		popw	%es
 688 043e 5F       		popw	%di
 689 043f 5E       		popw	%si
 690 0440 C3       		ret
 691              	.L207:
 692 0441 8B76FE   		movw	-2(%bp),	%si
 693 0444 8846FE   		movb	%al,	-2(%bp)
 694              	.L188:
 695 0447 8A04     		movb	(%si),	%al
 696 0449 84C0     		testb	%al,	%al
 697 044b 74B6     		je	.L186
 698 044d 8CC3     		movw	%es,	%bx
 699 044f 8A5702   		movb	2(%bx),	%dl
 700 0452 84D2     		testb	%dl,	%dl
 701 0454 750A     		jne	.L189
 702 0456 50       		pushw	%ax
 703 0457 E8FEFF   		call	systemSerialPutc
 704 045a 83C402   		addw	$2,	%sp
 705 045d 46       		incw	%si
 706 045e EBE7     		jmp	.L188
 707              	.L189:
 708 0460 52       		pushw	%dx
 709 0461 FF76FE   		pushw	-2(%bp)
 710 0464 50       		pushw	%ax
 711 0465 E8FEFF   		call	putCharWithAttr
 712 0468 83C406   		addw	$6,	%sp
 713 046b 46       		incw	%si
 714 046c EBD9     		jmp	.L188
 716              		.global	scan_hex
 718              	scan_hex:
 719 046e 56       		pushw	%si
 720 046f 55       		pushw	%bp
 721 0470 89E5     		movw	%sp,	%bp
 722 0472 83EC02   		subw	$2,	%sp
 723 0475 8B5E06   		movw	6(%bp),	%bx
 724 0478 8A0F     		movb	(%bx),	%cl
 725 047a 88C8     		movb	%cl,	%al
 726 047c 04F7     		addb	$-9,	%al
 727 047e 3C02     		cmpb	$1+1,	%al
 728 0480 18C0     		sbbb	%al,	%al
 729 0482 F6D8     		negb	%al
 730 0484 80F920   		cmpb	$32,	%cl
 731 0487 9F       		lahf
 732 0488 D0E4     		shlb	%ah
 733 048a 99       		cwtd
 734 048b F6DA     		negb	%dl
 735 048d 08D0     		orb	%dl,	%al
 736 048f 741A     		je	.L210
 737              	.L231:
 738 0491 43       		incw	%bx
 739 0492 8A0F     		movb	(%bx),	%cl
 740 0494 88C8     		movb	%cl,	%al
 741 0496 04F7     		addb	$-9,	%al
 742 0498 3C02     		cmpb	$1+1,	%al
 743 049a 18C0     		sbbb	%al,	%al
 744 049c F6D8     		negb	%al
 745 049e 80F920   		cmpb	$32,	%cl
 746 04a1 9F       		lahf
 747 04a2 D0E4     		shlb	%ah
 748 04a4 99       		cwtd
 749 04a5 F6DA     		negb	%dl
 750 04a7 08D0     		orb	%dl,	%al
 751 04a9 75E6     		jne	.L231
 752              	.L210:
 753 04ab 31D2     		xorw	%dx,	%dx
 754 04ad 88CD     		movb	%cl,	%ch
 755 04af 80C5D0   		addb	$-48,	%ch
 756 04b2 88C8     		movb	%cl,	%al
 757 04b4 049F     		addb	$-97,	%al
 758 04b6 8846FF   		movb	%al,	-1(%bp)
 759 04b9 80FD0A   		cmpb	$9+1,	%ch
 760 04bc 18E4     		sbbb	%ah,	%ah
 761 04be F6DC     		negb	%ah
 762 04c0 3C06     		cmpb	$5+1,	%al
 763 04c2 18C0     		sbbb	%al,	%al
 764 04c4 F6D8     		negb	%al
 765 04c6 08C4     		orb	%al,	%ah
 766 04c8 7538     		jne	.L218
 767              	.L232:
 768 04ca 88C8     		movb	%cl,	%al
 769 04cc 04BF     		addb	$-65,	%al
 770 04ce 3C05     		cmpb	$5,	%al
 771 04d0 776B     		ja	.L225
 772 04d2 D1E2     		shlw	$1,	%dx
 773 04d4 D1E2     		shlw	$1,	%dx
 774 04d6 D1E2     		shlw	$1,	%dx
 775 04d8 D1E2     		shlw	$1,	%dx
 776 04da 88C8     		movb	%cl,	%al
 777 04dc 98       		cbtw
 778              	.L220:
 779 04dd 83C0C9   		addw	$-55,	%ax
 780 04e0 01C2     		addw	%ax,	%dx
 781 04e2 43       		incw	%bx
 782 04e3 8A0F     		movb	(%bx),	%cl
 783              	.L234:
 784 04e5 88CD     		movb	%cl,	%ch
 785 04e7 80C5D0   		addb	$-48,	%ch
 786 04ea 88C8     		movb	%cl,	%al
 787 04ec 049F     		addb	$-97,	%al
 788 04ee 8846FF   		movb	%al,	-1(%bp)
 789 04f1 80FD0A   		cmpb	$9+1,	%ch
 790 04f4 18E4     		sbbb	%ah,	%ah
 791 04f6 F6DC     		negb	%ah
 792 04f8 3C06     		cmpb	$5+1,	%al
 793 04fa 18C0     		sbbb	%al,	%al
 794 04fc F6D8     		negb	%al
 795 04fe 08C4     		orb	%al,	%ah
 796 0500 74C8     		je	.L232
 797              	.L218:
 798 0502 D1E2     		shlw	$1,	%dx
 799 0504 D1E2     		shlw	$1,	%dx
 800 0506 D1E2     		shlw	$1,	%dx
 801 0508 D1E2     		shlw	$1,	%dx
 802 050a 88C8     		movb	%cl,	%al
 803 050c 98       		cbtw
 804 050d 80FD09   		cmpb	$9,	%ch
 805 0510 771A     		ja	.L233
 806 0512 89C6     		movw	%ax,	%si
 807 0514 83C6D0   		addw	$-48,	%si
 808 0517 01F2     		addw	%si,	%dx
 809 0519 80C1BF   		addb	$-65,	%cl
 810 051c 807EFF05 		cmpb	$5,	-1(%bp)
 811 0520 760D     		jbe	.L214
 812 0522 80F905   		cmpb	$5,	%cl
 813 0525 76B6     		jbe	.L220
 814              	.L230:
 815 0527 43       		incw	%bx
 816 0528 8A0F     		movb	(%bx),	%cl
 817 052a EBB9     		jmp	.L234
 818              	.L233:
 819 052c 80C1BF   		addb	$-65,	%cl
 820              	.L214:
 821 052f 89C6     		movw	%ax,	%si
 822 0531 83C6A9   		addw	$-87,	%si
 823 0534 01F2     		addw	%si,	%dx
 824 0536 80F905   		cmpb	$5,	%cl
 825 0539 77EC     		ja	.L230
 826 053b EBA0     		jmp	.L220
 827              	.L225:
 828 053d 89D0     		movw	%dx,	%ax
 829 053f 89EC     		movw	%bp,	%sp
 830 0541 5D       		popw	%bp
 831 0542 5E       		popw	%si
 832 0543 C3       		ret
 834              		.global	scan_num
 836              	scan_num:
 837 0544 56       		pushw	%si
 838 0545 89E3     		movw	%sp,	%bx
 839 0547 8B7704   		movw	4(%bx),	%si
 840 054a 8A1C     		movb	(%si),	%bl
 841 054c 88D8     		movb	%bl,	%al
 842 054e 04F7     		addb	$-9,	%al
 843 0550 3C02     		cmpb	$1+1,	%al
 844 0552 18C0     		sbbb	%al,	%al
 845 0554 F6D8     		negb	%al
 846 0556 80FB20   		cmpb	$32,	%bl
 847 0559 9F       		lahf
 848 055a D0E4     		shlb	%ah
 849 055c 99       		cwtd
 850 055d F6DA     		negb	%dl
 851 055f 08D0     		orb	%dl,	%al
 852 0561 741A     		je	.L236
 853              	.L250:
 854 0563 46       		incw	%si
 855 0564 8A1C     		movb	(%si),	%bl
 856 0566 88D8     		movb	%bl,	%al
 857 0568 04F7     		addb	$-9,	%al
 858 056a 3C02     		cmpb	$1+1,	%al
 859 056c 18C0     		sbbb	%al,	%al
 860 056e F6D8     		negb	%al
 861 0570 80FB20   		cmpb	$32,	%bl
 862 0573 9F       		lahf
 863 0574 D0E4     		shlb	%ah
 864 0576 99       		cwtd
 865 0577 F6DA     		negb	%dl
 866 0579 08D0     		orb	%dl,	%al
 867 057b 75E6     		jne	.L250
 868              	.L236:
 869 057d 88D8     		movb	%bl,	%al
 870 057f 04D0     		addb	$-48,	%al
 871 0581 3C09     		cmpb	$9,	%al
 872 0583 B80000   		movw	$0,	%ax
 873 0586 7721     		ja	.L235
 874              	.L239:
 875 0588 89C1     		movw	%ax,	%cx
 876 058a D1E1     		shlw	$1,	%cx
 877 058c D1E1     		shlw	$1,	%cx
 878 058e 89CA     		movw	%cx,	%dx
 879 0590 01C2     		addw	%ax,	%dx
 880 0592 D1E2     		shlw	$1,	%dx
 881 0594 88D8     		movb	%bl,	%al
 882 0596 98       		cbtw
 883 0597 83C0D0   		addw	$-48,	%ax
 884 059a 01D0     		addw	%dx,	%ax
 885 059c 46       		incw	%si
 886 059d 8A1C     		movb	(%si),	%bl
 887 059f 88DA     		movb	%bl,	%dl
 888 05a1 80C2D0   		addb	$-48,	%dl
 889 05a4 80FA09   		cmpb	$9,	%dl
 890 05a7 76DF     		jbe	.L239
 891              	.L235:
 892 05a9 5E       		popw	%si
 893 05aa C3       		ret
 895              		.global	print_num_fill
 897              	print_num_fill:
 898 05ab 56       		pushw	%si
 899 05ac 57       		pushw	%di
 900 05ad 06       		pushw	%es
 901 05ae 55       		pushw	%bp
 902 05af 89E5     		movw	%sp,	%bp
 903 05b1 83EC0C   		subw	$12,	%sp
 904 05b4 8E460C   		movw	12(%bp),	%es
 905 05b7 8B560E   		movw	14(%bp),	%dx
 906 05ba 8956FE   		movw	%dx,	-2(%bp)
 907 05bd 8CC0     		movw	%es,	%ax
 908 05bf 09D0     		orw	%dx,	%ax
 909 05c1 7503E92A 		je	.L265
 909      01
 910 05c6 31F6     		xorw	%si,	%si
 911 05c8 B90A00   		movw	$10,	%cx
 912 05cb 56       		pushw	%si
 913 05cc 51       		pushw	%cx
 914 05cd 894EFA   		movw	%cx,	-6(%bp)
 915 05d0 52       		pushw	%dx
 916 05d1 06       		pushw	%es
 917 05d2 E8FEFF   		call	__divsi3
 918 05d5 83C408   		addw	$8,	%sp
 919 05d8 8946FC   		movw	%ax,	-4(%bp)
 920 05db C746F401 		movw	$1,	-12(%bp)
 920      00
 921 05e0 09D0     		orw	%dx,	%ax
 922 05e2 7503E962 		je	.L266
 922      01
 923 05e7 89F0     		movw	%si,	%ax
 924 05e9 8976F6   		movw	%si,	-10(%bp)
 925 05ec BE0100   		movw	$1,	%si
 926 05ef 89C7     		movw	%ax,	%di
 927 05f1 8B4EFA   		movw	-6(%bp),	%cx
 928 05f4 894EF8   		movw	%cx,	-8(%bp)
 929              	.L256:
 930 05f7 89F0     		movw	%si,	%ax
 931 05f9 89F9     		movw	%di,	%cx
 932 05fb D1E0     		shlw	%ax
 933 05fd D1D1     		rclw	%cx
 934 05ff D1E0     		shlw	%ax
 935 0601 D1D1     		rclw	%cx
 936 0603 894EFA   		movw	%cx,	-6(%bp)
 937 0606 8B4EFA   		movw	-6(%bp),	%cx
 938 0609 01F0     		addw	%si,	%ax
 939 060b 11F9     		adcw	%di,	%cx
 940 060d D1E0     		shlw	%ax
 941 060f 89C6     		movw	%ax,	%si
 942 0611 D1D1     		rclw	%cx
 943 0613 89CF     		movw	%cx,	%di
 944 0615 8346F401 		addw	$1,	-12(%bp)
 945 0619 8356F600 		adcw	$0,	-10(%bp)
 946 061d 31C0     		xorw	%ax,	%ax
 947 061f 50       		pushw	%ax
 948 0620 FF76F8   		pushw	-8(%bp)
 949 0623 52       		pushw	%dx
 950 0624 FF76FC   		pushw	-4(%bp)
 951 0627 E8FEFF   		call	__divsi3
 952 062a 83C408   		addw	$8,	%sp
 953 062d 8946FC   		movw	%ax,	-4(%bp)
 954 0630 09D0     		orw	%dx,	%ax
 955 0632 75C3     		jne	.L256
 956              	.L254:
 957 0634 837EFE00 		cmpw	$0,	-2(%bp)
 958 0638 7D0C     		jge	.L252
 959 063a B02D     		movb	$45,	%al
 960 063c 50       		pushw	%ax
 961 063d FF760A   		pushw	10(%bp)
 962 0640 E8FEFF   		call	output_putc
 963 0643 83C404   		addw	$4,	%sp
 964              	.L252:
 965 0646 31C0     		xorw	%ax,	%ax
 966 0648 3B46F6   		cmpw	-10(%bp),	%ax
 967 064b 7F03E9DA 		jle	.L274
 967      00
 968              	.L258:
 969 0650 C646F820 		movb	$32,	-8(%bp)
 970 0654 837E1200 		cmpw	$0,	18(%bp)
 971 0658 7403E9AA 		jne	.L275
 971      00
 972              	.L262:
 973 065d 8B46F4   		movw	-12(%bp),	%ax
 974 0660 83C001   		addw	$1,	%ax
 975 0663 8B56F6   		movw	-10(%bp),	%dx
 976 0666 83D200   		adcw	$0,	%dx
 977 0669 8B5E10   		movw	16(%bp),	%bx
 978 066c 31C9     		xorw	%cx,	%cx
 979 066e 83C301   		addw	$1,	%bx
 980 0671 895EF6   		movw	%bx,	-10(%bp)
 981 0674 11C9     		adcw	%cx,	%cx
 982 0676 894EF4   		movw	%cx,	-12(%bp)
 983              	.L269:
 984 0679 8956FA   		movw	%dx,	-6(%bp)
 985 067c 8946FC   		movw	%ax,	-4(%bp)
 986 067f FF76F8   		pushw	-8(%bp)
 987 0682 FF760A   		pushw	10(%bp)
 988 0685 E8FEFF   		call	output_putc
 989 0688 8B46FC   		movw	-4(%bp),	%ax
 990 068b 83C001   		addw	$1,	%ax
 991 068e 8B56FA   		movw	-6(%bp),	%dx
 992 0691 83D200   		adcw	$0,	%dx
 993 0694 83C404   		addw	$4,	%sp
 994 0697 3946F6   		cmpw	%ax,	-10(%bp)
 995 069a 75DD     		jne	.L269
 996 069c 3956F4   		cmpw	%dx,	-12(%bp)
 997 069f 75D8     		jne	.L269
 998              	.L260:
 999 06a1 57       		pushw	%di
 1000 06a2 56       		pushw	%si
 1001 06a3 FF76FE   		pushw	-2(%bp)
 1002 06a6 06       		pushw	%es
 1003 06a7 E8FEFF   		call	__divsi3
 1004 06aa 83C408   		addw	$8,	%sp
 1005 06ad 89C1     		movw	%ax,	%cx
 1006 06af 89D0     		movw	%dx,	%ax
 1007 06b1 99       		cwtd
 1008 06b2 89C8     		movw	%cx,	%ax
 1009 06b4 31D0     		xorw	%dx,	%ax
 1010 06b6 29D0     		subw	%dx,	%ax
 1011 06b8 0430     		addb	$48,	%al
 1012 06ba 50       		pushw	%ax
 1013 06bb FF760A   		pushw	10(%bp)
 1014 06be E8FEFF   		call	output_putc
 1015 06c1 57       		pushw	%di
 1016 06c2 56       		pushw	%si
 1017 06c3 FF76FE   		pushw	-2(%bp)
 1018 06c6 06       		pushw	%es
 1019 06c7 E8FEFF   		call	__modsi3
 1020 06ca 83C408   		addw	$8,	%sp
 1021 06cd 8EC0     		movw	%ax,	%es
 1022 06cf 8956FE   		movw	%dx,	-2(%bp)
 1023 06d2 31C0     		xorw	%ax,	%ax
 1024 06d4 50       		pushw	%ax
 1025 06d5 B80A00   		movw	$10,	%ax
 1026 06d8 50       		pushw	%ax
 1027 06d9 57       		pushw	%di
 1028 06da 56       		pushw	%si
 1029 06db E8FEFF   		call	__divsi3
 1030 06de 89C6     		movw	%ax,	%si
 1031 06e0 89D7     		movw	%dx,	%di
 1032 06e2 83C40C   		addw	$12,	%sp
 1033 06e5 09D0     		orw	%dx,	%ax
 1034 06e7 75B8     		jne	.L260
 1035 06e9 89EC     		movw	%bp,	%sp
 1036 06eb 5D       		popw	%bp
 1037 06ec 07       		popw	%es
 1038 06ed 5F       		popw	%di
 1039 06ee 5E       		popw	%si
 1040 06ef C3       		ret
 1041              	.L265:
 1042 06f0 BE0100   		movw	$1,	%si
 1043 06f3 89C7     		movw	%ax,	%di
 1044 06f5 8976F4   		movw	%si,	-12(%bp)
 1045 06f8 8946F6   		movw	%ax,	-10(%bp)
 1046 06fb 31C0     		xorw	%ax,	%ax
 1047 06fd 3B46F6   		cmpw	-10(%bp),	%ax
 1048 0700 7E03E94B 		jg	.L258
 1048      FF
 1049 0705 EB23     		jmp	.L274
 1050              	.L275:
 1051 0707 C646F830 		movb	$48,	-8(%bp)
 1052 070b 8B46F4   		movw	-12(%bp),	%ax
 1053 070e 83C001   		addw	$1,	%ax
 1054 0711 8B56F6   		movw	-10(%bp),	%dx
 1055 0714 83D200   		adcw	$0,	%dx
 1056 0717 8B5E10   		movw	16(%bp),	%bx
 1057 071a 31C9     		xorw	%cx,	%cx
 1058 071c 83C301   		addw	$1,	%bx
 1059 071f 895EF6   		movw	%bx,	-10(%bp)
 1060 0722 11C9     		adcw	%cx,	%cx
 1061 0724 894EF4   		movw	%cx,	-12(%bp)
 1062 0727 E94FFF   		jmp	.L269
 1063              	.L274:
 1064 072a 7403E972 		jne	.L260
 1064      FF
 1065 072f 8B46F4   		movw	-12(%bp),	%ax
 1066 0732 394610   		cmpw	%ax,	16(%bp)
 1067 0735 7703E967 		jbe	.L260
 1067      FF
 1068 073a C646F820 		movb	$32,	-8(%bp)
 1069 073e 837E1200 		cmpw	$0,	18(%bp)
 1070 0742 7503E916 		je	.L262
 1070      FF
 1071 0747 EBBE     		jmp	.L275
 1072              	.L266:
 1073 0749 8946F6   		movw	%ax,	-10(%bp)
 1074 074c BE0100   		movw	$1,	%si
 1075 074f 89C7     		movw	%ax,	%di
 1076 0751 E9E0FE   		jmp	.L254
 1078              		.global	print_unum_fill
 1080              	print_unum_fill:
 1081 0754 56       		pushw	%si
 1082 0755 57       		pushw	%di
 1083 0756 06       		pushw	%es
 1084 0757 55       		pushw	%bp
 1085 0758 89E5     		movw	%sp,	%bp
 1086 075a 83EC12   		subw	$18,	%sp
 1087 075d 8B460A   		movw	10(%bp),	%ax
 1088 0760 8946FC   		movw	%ax,	-4(%bp)
 1089 0763 C4460C   		lesw	12(%bp),	%ax
 1090 0766 8946FE   		movw	%ax,	-2(%bp)
 1091 0769 8B5610   		movw	16(%bp),	%dx
 1092 076c 8956F0   		movw	%dx,	-16(%bp)
 1093 076f 8B5612   		movw	18(%bp),	%dx
 1094 0772 8956EE   		movw	%dx,	-18(%bp)
 1095 0775 8CC2     		movw	%es,	%dx
 1096 0777 09C2     		orw	%ax,	%dx
 1097 0779 7503E904 		je	.L278
 1097      01
 1098 077e 31F6     		xorw	%si,	%si
 1099 0780 B90A00   		movw	$10,	%cx
 1100 0783 56       		pushw	%si
 1101 0784 51       		pushw	%cx
 1102 0785 894EF6   		movw	%cx,	-10(%bp)
 1103 0788 06       		pushw	%es
 1104 0789 FF76FE   		pushw	-2(%bp)
 1105 078c E8FEFF   		call	__udivsi3
 1106 078f 83C408   		addw	$8,	%sp
 1107 0792 8946FA   		movw	%ax,	-6(%bp)
 1108 0795 09D0     		orw	%dx,	%ax
 1109 0797 7503E9E6 		je	.L278
 1109      00
 1110 079c C746F801 		movw	$1,	-8(%bp)
 1110      00
 1111 07a1 89F0     		movw	%si,	%ax
 1112 07a3 8976F2   		movw	%si,	-14(%bp)
 1113 07a6 BE0100   		movw	$1,	%si
 1114 07a9 89C7     		movw	%ax,	%di
 1115 07ab 8B4EF6   		movw	-10(%bp),	%cx
 1116 07ae 894EF4   		movw	%cx,	-12(%bp)
 1117              	.L283:
 1118 07b1 89F0     		movw	%si,	%ax
 1119 07b3 89F9     		movw	%di,	%cx
 1120 07b5 D1E0     		shlw	%ax
 1121 07b7 D1D1     		rclw	%cx
 1122 07b9 D1E0     		shlw	%ax
 1123 07bb D1D1     		rclw	%cx
 1124 07bd 894EF6   		movw	%cx,	-10(%bp)
 1125 07c0 8B4EF6   		movw	-10(%bp),	%cx
 1126 07c3 01F0     		addw	%si,	%ax
 1127 07c5 11F9     		adcw	%di,	%cx
 1128 07c7 D1E0     		shlw	%ax
 1129 07c9 89C6     		movw	%ax,	%si
 1130 07cb D1D1     		rclw	%cx
 1131 07cd 89CF     		movw	%cx,	%di
 1132 07cf 8346F801 		addw	$1,	-8(%bp)
 1133 07d3 8356F200 		adcw	$0,	-14(%bp)
 1134 07d7 31C0     		xorw	%ax,	%ax
 1135 07d9 50       		pushw	%ax
 1136 07da FF76F4   		pushw	-12(%bp)
 1137 07dd 52       		pushw	%dx
 1138 07de FF76FA   		pushw	-6(%bp)
 1139 07e1 E8FEFF   		call	__udivsi3
 1140 07e4 83C408   		addw	$8,	%sp
 1141 07e7 8946FA   		movw	%ax,	-6(%bp)
 1142 07ea 09D0     		orw	%dx,	%ax
 1143 07ec 75C3     		jne	.L283
 1144 07ee 8946F4   		movw	%ax,	-12(%bp)
 1145 07f1 3B46F2   		cmpw	-14(%bp),	%ax
 1146 07f4 7542     		jne	.L281
 1147 07f6 8B46F0   		movw	-16(%bp),	%ax
 1148 07f9 3B46F8   		cmpw	-8(%bp),	%ax
 1149 07fc 763A     		jbe	.L281
 1150 07fe C646F620 		movb	$32,	-10(%bp)
 1151 0802 837EEE00 		cmpw	$0,	-18(%bp)
 1152 0806 7503E99E 		je	.L304
 1152      00
 1153              	.L311:
 1154 080b C646F630 		movb	$48,	-10(%bp)
 1155 080f 8B46F2   		movw	-14(%bp),	%ax
 1156              	.L287:
 1157 0812 8946FA   		movw	%ax,	-6(%bp)
 1158 0815 FF76F6   		pushw	-10(%bp)
 1159 0818 FF76FC   		pushw	-4(%bp)
 1160 081b E8FEFF   		call	output_putc
 1161 081e 8346F801 		addw	$1,	-8(%bp)
 1162 0822 8B46FA   		movw	-6(%bp),	%ax
 1163 0825 83D000   		adcw	$0,	%ax
 1164 0828 83C404   		addw	$4,	%sp
 1165 082b 3946F4   		cmpw	%ax,	-12(%bp)
 1166 082e 7508     		jne	.L281
 1167 0830 8B56F0   		movw	-16(%bp),	%dx
 1168 0833 3B56F8   		cmpw	-8(%bp),	%dx
 1169 0836 77DA     		ja	.L287
 1170              	.L281:
 1171 0838 89F0     		movw	%si,	%ax
 1172 083a 09F8     		orw	%di,	%ax
 1173 083c 743D     		je	.L276
 1174              	.L297:
 1175 083e 57       		pushw	%di
 1176 083f 56       		pushw	%si
 1177 0840 06       		pushw	%es
 1178 0841 FF76FE   		pushw	-2(%bp)
 1179 0844 E8FEFF   		call	__udivsi3
 1180 0847 83C408   		addw	$8,	%sp
 1181 084a 0430     		addb	$48,	%al
 1182 084c 50       		pushw	%ax
 1183 084d FF76FC   		pushw	-4(%bp)
 1184 0850 E8FEFF   		call	output_putc
 1185 0853 57       		pushw	%di
 1186 0854 56       		pushw	%si
 1187 0855 06       		pushw	%es
 1188 0856 FF76FE   		pushw	-2(%bp)
 1189 0859 E8FEFF   		call	__umodsi3
 1190 085c 83C408   		addw	$8,	%sp
 1191 085f 8946FE   		movw	%ax,	-2(%bp)
 1192 0862 8EC2     		movw	%dx,	%es
 1193 0864 31C0     		xorw	%ax,	%ax
 1194 0866 50       		pushw	%ax
 1195 0867 B80A00   		movw	$10,	%ax
 1196 086a 50       		pushw	%ax
 1197 086b 57       		pushw	%di
 1198 086c 56       		pushw	%si
 1199 086d E8FEFF   		call	__udivsi3
 1200 0870 89C6     		movw	%ax,	%si
 1201 0872 89D7     		movw	%dx,	%di
 1202 0874 83C40C   		addw	$12,	%sp
 1203 0877 09D0     		orw	%dx,	%ax
 1204 0879 75C3     		jne	.L297
 1205              	.L276:
 1206 087b 89EC     		movw	%bp,	%sp
 1207 087d 5D       		popw	%bp
 1208 087e 07       		popw	%es
 1209 087f 5F       		popw	%di
 1210 0880 5E       		popw	%si
 1211 0881 C3       		ret
 1212              	.L278:
 1213 0882 C746F400 		movw	$0,	-12(%bp)
 1213      00
 1214 0887 837EF001 		cmpw	$1,	-16(%bp)
 1215 088b 7622     		jbe	.L310
 1216 088d C746F801 		movw	$1,	-8(%bp)
 1216      00
 1217 0892 31C0     		xorw	%ax,	%ax
 1218 0894 8946F2   		movw	%ax,	-14(%bp)
 1219 0897 BE0100   		movw	$1,	%si
 1220 089a 89C7     		movw	%ax,	%di
 1221 089c C646F620 		movb	$32,	-10(%bp)
 1222 08a0 837EEE00 		cmpw	$0,	-18(%bp)
 1223 08a4 7403E962 		jne	.L311
 1223      FF
 1224              	.L304:
 1225 08a9 8B46F2   		movw	-14(%bp),	%ax
 1226 08ac E963FF   		jmp	.L287
 1227              	.L310:
 1228 08af 8A46FE   		movb	-2(%bp),	%al
 1229 08b2 0430     		addb	$48,	%al
 1230 08b4 88460C   		movb	%al,	12(%bp)
 1231 08b7 8B46FC   		movw	-4(%bp),	%ax
 1232 08ba 89460A   		movw	%ax,	10(%bp)
 1233 08bd 89EC     		movw	%bp,	%sp
 1234 08bf 5D       		popw	%bp
 1235 08c0 07       		popw	%es
 1236 08c1 5F       		popw	%di
 1237 08c2 5E       		popw	%si
 1238 08c3 E931FA   		jmp	output_putc
 1240              		.section	.rodata.str1.1,"aMS",@progbits,1
 1241              	.LC0:
 1242 0000 30313233 		.string	"0123456789abcdef"
 1242      34353637 
 1242      38396162 
 1242      63646566 
 1242      00
 1243              		.text
 1244              		.global	print_hex_fill
 1246              	print_hex_fill:
 1247 08c6 56       		pushw	%si
 1248 08c7 57       		pushw	%di
 1249 08c8 06       		pushw	%es
 1250 08c9 55       		pushw	%bp
 1251 08ca 89E5     		movw	%sp,	%bp
 1252 08cc 83EC0E   		subw	$14,	%sp
 1253 08cf C4460A   		lesw	10(%bp),	%ax
 1254 08d2 8946FA   		movw	%ax,	-6(%bp)
 1255 08d5 8B560E   		movw	14(%bp),	%dx
 1256 08d8 8956FE   		movw	%dx,	-2(%bp)
 1257 08db C54610   		ldsw	16(%bp),	%ax
 1258 08de 8946F2   		movw	%ax,	-14(%bp)
 1259 08e1 8CC0     		movw	%es,	%ax
 1260 08e3 09D0     		orw	%dx,	%ax
 1261 08e5 7503E90A 		je	.L314
 1261      01
 1262 08ea B50C     		movb	$12,	%ch
 1263 08ec 8B5EFE   		movw	-2(%bp),	%bx
 1264 08ef 89DA     		movw	%bx,	%dx
 1265 08f1 88E9     		movb	%ch,	%cl
 1266 08f3 D3E2     		shlw	%cl,	%dx
 1267 08f5 B104     		movb	$4,	%cl
 1268 08f7 8CC0     		movw	%es,	%ax
 1269 08f9 D3E8     		shrw	%cl,	%ax
 1270 08fb 8946FC   		movw	%ax,	-4(%bp)
 1271 08fe 0956FC   		orw	%dx,	-4(%bp)
 1272 0901 D3EB     		shrw	%cl,	%bx
 1273 0903 8B46FC   		movw	-4(%bp),	%ax
 1274 0906 09D8     		orw	%bx,	%ax
 1275 0908 7503E9E7 		je	.L314
 1275      00
 1276 090d C746F801 		movw	$1,	-8(%bp)
 1276      00
 1277 0912 31C0     		xorw	%ax,	%ax
 1278 0914 BF0100   		movw	$1,	%di
 1279 0917 89C6     		movw	%ax,	%si
 1280 0919 886EF7   		movb	%ch,	-9(%bp)
 1281 091c 88CD     		movb	%cl,	%ch
 1282              	.L319:
 1283 091e 89FA     		movw	%di,	%dx
 1284 0920 8A4EF7   		movb	-9(%bp),	%cl
 1285 0923 D3EA     		shrw	%cl,	%dx
 1286 0925 88E9     		movb	%ch,	%cl
 1287 0927 D3E6     		shlw	%cl,	%si
 1288 0929 D3E7     		shlw	%cl,	%di
 1289 092b 09D6     		orw	%dx,	%si
 1290 092d 8346F801 		addw	$1,	-8(%bp)
 1291 0931 83D000   		adcw	$0,	%ax
 1292 0934 89DA     		movw	%bx,	%dx
 1293 0936 8A4EF7   		movb	-9(%bp),	%cl
 1294 0939 D3E2     		shlw	%cl,	%dx
 1295 093b 8956F4   		movw	%dx,	-12(%bp)
 1296 093e 8B56FC   		movw	-4(%bp),	%dx
 1297 0941 88E9     		movb	%ch,	%cl
 1298 0943 D3EA     		shrw	%cl,	%dx
 1299 0945 0B56F4   		orw	-12(%bp),	%dx
 1300 0948 8956FC   		movw	%dx,	-4(%bp)
 1301 094b D3EB     		shrw	%cl,	%bx
 1302 094d 09DA     		orw	%bx,	%dx
 1303 094f 75CD     		jne	.L319
 1304 0951 8956F4   		movw	%dx,	-12(%bp)
 1305 0954 39C2     		cmpw	%ax,	%dx
 1306 0956 753E     		jne	.L317
 1307 0958 8B56F2   		movw	-14(%bp),	%dx
 1308 095b 3B56F8   		cmpw	-8(%bp),	%dx
 1309 095e 7636     		jbe	.L317
 1310              	.L315:
 1311 0960 C646F720 		movb	$32,	-9(%bp)
 1312 0964 8CDA     		movw	%ds,	%dx
 1313 0966 85D2     		testw	%dx,	%dx
 1314 0968 7404     		je	.L323
 1315 096a C646F730 		movb	$48,	-9(%bp)
 1316              	.L323:
 1317 096e 8946FC   		movw	%ax,	-4(%bp)
 1318 0971 FF76F7   		pushw	-9(%bp)
 1319 0974 FF76FA   		pushw	-6(%bp)
 1320 0977 16       		pushw	%ss
 1321 0978 1F       		popw	%ds
 1322 0979 E8FEFF   		call	output_putc
 1323 097c 8346F801 		addw	$1,	-8(%bp)
 1324 0980 8B46FC   		movw	-4(%bp),	%ax
 1325 0983 83D000   		adcw	$0,	%ax
 1326 0986 83C404   		addw	$4,	%sp
 1327 0989 3946F4   		cmpw	%ax,	-12(%bp)
 1328 098c 7508     		jne	.L317
 1329 098e 8B56F2   		movw	-14(%bp),	%dx
 1330 0991 3B56F8   		cmpw	-8(%bp),	%dx
 1331 0994 77D8     		ja	.L323
 1332              	.L317:
 1333 0996 89F8     		movw	%di,	%ax
 1334 0998 09F0     		orw	%si,	%ax
 1335 099a 744F     		je	.L312
 1336 099c 897EFC   		movw	%di,	-4(%bp)
 1337              	.L333:
 1338 099f 56       		pushw	%si
 1339 09a0 FF76FC   		pushw	-4(%bp)
 1340 09a3 FF76FE   		pushw	-2(%bp)
 1341 09a6 06       		pushw	%es
 1342 09a7 16       		pushw	%ss
 1343 09a8 1F       		popw	%ds
 1344 09a9 E8FEFF   		call	__udivsi3
 1345 09ac 83C408   		addw	$8,	%sp
 1346 09af 83E00F   		andw	$15,	%ax
 1347 09b2 89C3     		movw	%ax,	%bx
 1348 09b4 BF0000   		movw	$.LC0,	%di
 1349 09b7 36FF31   		pushw	%ss:(%bx,%di)
 1350 09ba FF76FA   		pushw	-6(%bp)
 1351 09bd E8FEFF   		call	output_putc
 1352 09c0 56       		pushw	%si
 1353 09c1 8B7EFC   		movw	-4(%bp),	%di
 1354 09c4 57       		pushw	%di
 1355 09c5 FF76FE   		pushw	-2(%bp)
 1356 09c8 06       		pushw	%es
 1357 09c9 E8FEFF   		call	__umodsi3
 1358 09cc 8EC0     		movw	%ax,	%es
 1359 09ce 8956FE   		movw	%dx,	-2(%bp)
 1360 09d1 89F0     		movw	%si,	%ax
 1361 09d3 B10C     		movb	$12,	%cl
 1362 09d5 D3E0     		shlw	%cl,	%ax
 1363 09d7 B104     		movb	$4,	%cl
 1364 09d9 D3EF     		shrw	%cl,	%di
 1365 09db 09C7     		orw	%ax,	%di
 1366 09dd 897EFC   		movw	%di,	-4(%bp)
 1367 09e0 D3EE     		shrw	%cl,	%si
 1368 09e2 83C40C   		addw	$12,	%sp
 1369 09e5 89F8     		movw	%di,	%ax
 1370 09e7 09F0     		orw	%si,	%ax
 1371 09e9 75B4     		jne	.L333
 1372              	.L312:
 1373 09eb 89EC     		movw	%bp,	%sp
 1374 09ed 5D       		popw	%bp
 1375 09ee 07       		popw	%es
 1376 09ef 5F       		popw	%di
 1377 09f0 5E       		popw	%si
 1378 09f1 16       		pushw	%ss
 1379 09f2 1F       		popw	%ds
 1380 09f3 C3       		ret
 1381              	.L314:
 1382 09f4 C746F400 		movw	$0,	-12(%bp)
 1382      00
 1383 09f9 837EF201 		cmpw	$1,	-14(%bp)
 1384 09fd 760F     		jbe	.L346
 1385 09ff C746F801 		movw	$1,	-8(%bp)
 1385      00
 1386 0a04 31F6     		xorw	%si,	%si
 1387 0a06 89F0     		movw	%si,	%ax
 1388 0a08 BF0100   		movw	$1,	%di
 1389 0a0b E952FF   		jmp	.L315
 1390              	.L346:
 1391 0a0e 8CC3     		movw	%es,	%bx
 1392 0a10 83E30F   		andw	$15,	%bx
 1393 0a13 368A8700 		movb	%ss:.LC0(%bx),	%al
 1393      00
 1394 0a18 88460C   		movb	%al,	12(%bp)
 1395 0a1b 8B46FA   		movw	-6(%bp),	%ax
 1396 0a1e 89460A   		movw	%ax,	10(%bp)
 1397 0a21 16       		pushw	%ss
 1398 0a22 1F       		popw	%ds
 1399 0a23 89EC     		movw	%bp,	%sp
 1400 0a25 5D       		popw	%bp
 1401 0a26 07       		popw	%es
 1402 0a27 5F       		popw	%di
 1403 0a28 5E       		popw	%si
 1404 0a29 E9CBF8   		jmp	output_putc
 1406              		.section	.rodata.str1.1
 1407              	.LC1:
 1408 0011 0D0A00   		.string	"\r\n"
 1409              		.section	.rodata.cst2,"aM",@progbits,2
 1410              		.p2align	1
 1411              	.LC2:
 1412 0000 0000     		.hword	0
 1413              		.text
 1415              	out_vprint:
 1416 0a2c 56       		pushw	%si
 1417 0a2d 57       		pushw	%di
 1418 0a2e 06       		pushw	%es
 1419 0a2f 55       		pushw	%bp
 1420 0a30 89E5     		movw	%sp,	%bp
 1421 0a32 83EC0A   		subw	$10,	%sp
 1422 0a35 8E460A   		movw	10(%bp),	%es
 1423 0a38 8B760C   		movw	12(%bp),	%si
 1424 0a3b 8B7E0E   		movw	14(%bp),	%di
 1425 0a3e 8A04     		movb	(%si),	%al
 1426 0a40 84C0     		testb	%al,	%al
 1427 0a42 741F     		je	.L347
 1428              	.L378:
 1429 0a44 3C25     		cmpb	$37,	%al
 1430 0a46 7422     		je	.L389
 1431 0a48 3C0A     		cmpb	$10,	%al
 1432 0a4a 7503E907 		je	.L390
 1432      01
 1433 0a4f 50       		pushw	%ax
 1434 0a50 06       		pushw	%es
 1435 0a51 E8FEFF   		call	output_putc
 1436 0a54 83C404   		addw	$4,	%sp
 1437 0a57 89F3     		movw	%si,	%bx
 1438              	.L355:
 1439 0a59 8D7701   		leaw	1(%bx),	%si
 1440 0a5c 8A4701   		movb	1(%bx),	%al
 1441 0a5f 84C0     		testb	%al,	%al
 1442 0a61 75E1     		jne	.L378
 1443              	.L347:
 1444 0a63 89EC     		movw	%bp,	%sp
 1445 0a65 5D       		popw	%bp
 1446 0a66 07       		popw	%es
 1447 0a67 5F       		popw	%di
 1448 0a68 5E       		popw	%si
 1449 0a69 C3       		ret
 1450              	.L389:
 1451 0a6a 8A5401   		movb	1(%si),	%dl
 1452 0a6d 80FA30   		cmpb	$48,	%dl
 1453 0a70 7503E9FE 		je	.L350
 1453      00
 1454 0a75 8D5C01   		leaw	1(%si),	%bx
 1455 0a78 31C9     		xorw	%cx,	%cx
 1456 0a7a 88D6     		movb	%dl,	%dh
 1457 0a7c 80C6D0   		addb	$-48,	%dh
 1458 0a7f 31C0     		xorw	%ax,	%ax
 1459 0a81 80FE09   		cmpb	$9,	%dh
 1460 0a84 771F     		ja	.L352
 1461              	.L353:
 1462 0a86 89C6     		movw	%ax,	%si
 1463 0a88 D1E6     		shlw	$1,	%si
 1464 0a8a D1E6     		shlw	$1,	%si
 1465 0a8c 01C6     		addw	%ax,	%si
 1466 0a8e D1E6     		shlw	$1,	%si
 1467 0a90 88D0     		movb	%dl,	%al
 1468 0a92 98       		cbtw
 1469 0a93 01F0     		addw	%si,	%ax
 1470 0a95 83C0D0   		addw	$-48,	%ax
 1471 0a98 43       		incw	%bx
 1472 0a99 8A17     		movb	(%bx),	%dl
 1473 0a9b 88D6     		movb	%dl,	%dh
 1474 0a9d 80C6D0   		addb	$-48,	%dh
 1475 0aa0 80FE09   		cmpb	$9,	%dh
 1476 0aa3 76E1     		jbe	.L353
 1477              	.L352:
 1478 0aa5 80FA6C   		cmpb	$108,	%dl
 1479 0aa8 7503E9E1 		je	.L391
 1479      00
 1480 0aad 80FA64   		cmpb	$100,	%dl
 1481 0ab0 7503E9D7 		je	.L359
 1481      01
 1482 0ab5 7F03E904 		jle	.L392
 1482      01
 1483 0aba 80FA75   		cmpb	$117,	%dl
 1484 0abd 7503E9A0 		je	.L363
 1484      01
 1485 0ac2 80FA78   		cmpb	$120,	%dl
 1486 0ac5 7503E925 		je	.L364
 1486      01
 1487 0aca 80FA73   		cmpb	$115,	%dl
 1488 0acd 758A     		jne	.L355
 1489 0acf 89FA     		movw	%di,	%dx
 1490 0ad1 83C202   		addw	$2,	%dx
 1491 0ad4 8956FA   		movw	%dx,	-6(%bp)
 1492 0ad7 8B3D     		movw	(%di),	%di
 1493 0ad9 897EFC   		movw	%di,	-4(%bp)
 1494 0adc 803D00   		cmpb	$0,	(%di)
 1495 0adf 7503E94D 		je	.L377
 1495      02
 1496 0ae4 31F6     		xorw	%si,	%si
 1497 0ae6 895EFE   		movw	%bx,	-2(%bp)
 1498              	.L367:
 1499 0ae9 46       		incw	%si
 1500 0aea 89F3     		movw	%si,	%bx
 1501 0aec 803900   		cmpb	$0,	(%bx,%di)
 1502 0aef 75F8     		jne	.L367
 1503 0af1 8B5EFE   		movw	-2(%bp),	%bx
 1504 0af4 31FF     		xorw	%di,	%di
 1505 0af6 393E0000 		cmpw	%di,	.LC2
 1506 0afa 7F03E90C 		jle	.L393
 1506      02
 1507              	.L368:
 1508 0aff 83C601   		addw	$1,	%si
 1509 0b02 83D700   		adcw	$0,	%di
 1510 0b05 83C001   		addw	$1,	%ax
 1511 0b08 8946FE   		movw	%ax,	-2(%bp)
 1512 0b0b B80000   		movw	$0,	%ax
 1513 0b0e 11C0     		adcw	%ax,	%ax
 1514 0b10 8946F8   		movw	%ax,	-8(%bp)
 1515 0b13 895EF6   		movw	%bx,	-10(%bp)
 1516              	.L382:
 1517 0b16 B020     		movb	$32,	%al
 1518 0b18 50       		pushw	%ax
 1519 0b19 06       		pushw	%es
 1520 0b1a E8FEFF   		call	output_putc
 1521 0b1d 83C601   		addw	$1,	%si
 1522 0b20 83D700   		adcw	$0,	%di
 1523 0b23 83C404   		addw	$4,	%sp
 1524 0b26 3976FE   		cmpw	%si,	-2(%bp)
 1525 0b29 75EB     		jne	.L382
 1526 0b2b 397EF8   		cmpw	%di,	-8(%bp)
 1527 0b2e 75E6     		jne	.L382
 1528 0b30 8B5EF6   		movw	-10(%bp),	%bx
 1529              	.L371:
 1530 0b33 895EFE   		movw	%bx,	-2(%bp)
 1531 0b36 FF76FC   		pushw	-4(%bp)
 1532 0b39 06       		pushw	%es
 1533 0b3a E8FEFF   		call	output_string
 1534 0b3d 83C404   		addw	$4,	%sp
 1535 0b40 8B7EFA   		movw	-6(%bp),	%di
 1536 0b43 8B5EFE   		movw	-2(%bp),	%bx
 1537 0b46 8D7701   		leaw	1(%bx),	%si
 1538 0b49 8A4701   		movb	1(%bx),	%al
 1539 0b4c 84C0     		testb	%al,	%al
 1540 0b4e 7403E9F1 		jne	.L378
 1540      FE
 1541 0b53 E90DFF   		jmp	.L347
 1542              	.L390:
 1543 0b56 B81100   		movw	$.LC1,	%ax
 1544 0b59 50       		pushw	%ax
 1545 0b5a 06       		pushw	%es
 1546 0b5b E8FEFF   		call	output_string
 1547 0b5e 83C404   		addw	$4,	%sp
 1548 0b61 89F3     		movw	%si,	%bx
 1549 0b63 8D7701   		leaw	1(%bx),	%si
 1550 0b66 8A4701   		movb	1(%bx),	%al
 1551 0b69 84C0     		testb	%al,	%al
 1552 0b6b 7403E9D4 		jne	.L378
 1552      FE
 1553 0b70 E9F0FE   		jmp	.L347
 1554              	.L350:
 1555 0b73 8D5C02   		leaw	2(%si),	%bx
 1556 0b76 8A5402   		movb	2(%si),	%dl
 1557 0b79 B90100   		movw	$1,	%cx
 1558 0b7c 88D6     		movb	%dl,	%dh
 1559 0b7e 80C6D0   		addb	$-48,	%dh
 1560 0b81 31C0     		xorw	%ax,	%ax
 1561 0b83 80FE09   		cmpb	$9,	%dh
 1562 0b86 7703E9FB 		jbe	.L353
 1562      FE
 1563 0b8b E917FF   		jmp	.L352
 1564              	.L391:
 1565 0b8e 8D7701   		leaw	1(%bx),	%si
 1566 0b91 8A5F01   		movb	1(%bx),	%bl
 1567 0b94 80FB75   		cmpb	$117,	%bl
 1568 0b97 7503E919 		je	.L356
 1568      01
 1569 0b9c 80FB78   		cmpb	$120,	%bl
 1570 0b9f 7503E993 		je	.L357
 1570      00
 1571 0ba4 80FB64   		cmpb	$100,	%bl
 1572 0ba7 7503E934 		je	.L394
 1572      01
 1573 0bac 89F3     		movw	%si,	%bx
 1574 0bae 8D7701   		leaw	1(%bx),	%si
 1575 0bb1 8A4701   		movb	1(%bx),	%al
 1576 0bb4 84C0     		testb	%al,	%al
 1577 0bb6 7403E989 		jne	.L378
 1577      FE
 1578 0bbb E9A5FE   		jmp	.L347
 1579              	.L392:
 1580 0bbe 80FA25   		cmpb	$37,	%dl
 1581 0bc1 7456     		je	.L361
 1582 0bc3 80FA63   		cmpb	$99,	%dl
 1583 0bc6 7403E98E 		jne	.L355
 1583      FE
 1584 0bcb 895EFE   		movw	%bx,	-2(%bp)
 1585 0bce 8D7502   		leaw	2(%di),	%si
 1586 0bd1 FF35     		pushw	(%di)
 1587 0bd3 06       		pushw	%es
 1588 0bd4 E8FEFF   		call	output_putc
 1589 0bd7 83C404   		addw	$4,	%sp
 1590 0bda 89F7     		movw	%si,	%di
 1591 0bdc 8B5EFE   		movw	-2(%bp),	%bx
 1592 0bdf 8D7701   		leaw	1(%bx),	%si
 1593 0be2 8A4701   		movb	1(%bx),	%al
 1594 0be5 84C0     		testb	%al,	%al
 1595 0be7 7403E958 		jne	.L378
 1595      FE
 1596 0bec E974FE   		jmp	.L347
 1597              	.L364:
 1598 0bef 895EFE   		movw	%bx,	-2(%bp)
 1599 0bf2 8D7502   		leaw	2(%di),	%si
 1600 0bf5 51       		pushw	%cx
 1601 0bf6 50       		pushw	%ax
 1602 0bf7 8B05     		movw	(%di),	%ax
 1603 0bf9 31D2     		xorw	%dx,	%dx
 1604 0bfb 52       		pushw	%dx
 1605 0bfc 50       		pushw	%ax
 1606 0bfd 06       		pushw	%es
 1607 0bfe E8FEFF   		call	print_hex_fill
 1608 0c01 83C40A   		addw	$10,	%sp
 1609 0c04 89F7     		movw	%si,	%di
 1610 0c06 8B5EFE   		movw	-2(%bp),	%bx
 1611 0c09 8D7701   		leaw	1(%bx),	%si
 1612 0c0c 8A4701   		movb	1(%bx),	%al
 1613 0c0f 84C0     		testb	%al,	%al
 1614 0c11 7403E92E 		jne	.L378
 1614      FE
 1615 0c16 E94AFE   		jmp	.L347
 1616              	.L361:
 1617 0c19 895EFE   		movw	%bx,	-2(%bp)
 1618 0c1c 52       		pushw	%dx
 1619 0c1d 06       		pushw	%es
 1620 0c1e E8FEFF   		call	output_putc
 1621 0c21 83C404   		addw	$4,	%sp
 1622 0c24 8B5EFE   		movw	-2(%bp),	%bx
 1623 0c27 8D7701   		leaw	1(%bx),	%si
 1624 0c2a 8A4701   		movb	1(%bx),	%al
 1625 0c2d 84C0     		testb	%al,	%al
 1626 0c2f 7403E910 		jne	.L378
 1626      FE
 1627 0c34 E92CFE   		jmp	.L347
 1628              	.L357:
 1629 0c37 89FA     		movw	%di,	%dx
 1630 0c39 83C204   		addw	$4,	%dx
 1631 0c3c 8956FE   		movw	%dx,	-2(%bp)
 1632 0c3f 51       		pushw	%cx
 1633 0c40 50       		pushw	%ax
 1634 0c41 FF7502   		pushw	2(%di)
 1635 0c44 FF35     		pushw	(%di)
 1636 0c46 06       		pushw	%es
 1637 0c47 E8FEFF   		call	print_hex_fill
 1638 0c4a 83C40A   		addw	$10,	%sp
 1639 0c4d 8B7EFE   		movw	-2(%bp),	%di
 1640 0c50 89F3     		movw	%si,	%bx
 1641 0c52 8D7701   		leaw	1(%bx),	%si
 1642 0c55 8A4701   		movb	1(%bx),	%al
 1643 0c58 84C0     		testb	%al,	%al
 1644 0c5a 7403E9E5 		jne	.L378
 1644      FD
 1645 0c5f E901FE   		jmp	.L347
 1646              	.L363:
 1647 0c62 895EFE   		movw	%bx,	-2(%bp)
 1648 0c65 8D7502   		leaw	2(%di),	%si
 1649 0c68 51       		pushw	%cx
 1650 0c69 50       		pushw	%ax
 1651 0c6a 8B05     		movw	(%di),	%ax
 1652 0c6c 31D2     		xorw	%dx,	%dx
 1653 0c6e 52       		pushw	%dx
 1654 0c6f 50       		pushw	%ax
 1655 0c70 06       		pushw	%es
 1656 0c71 E8FEFF   		call	print_unum_fill
 1657 0c74 83C40A   		addw	$10,	%sp
 1658 0c77 89F7     		movw	%si,	%di
 1659 0c79 8B5EFE   		movw	-2(%bp),	%bx
 1660 0c7c 8D7701   		leaw	1(%bx),	%si
 1661 0c7f 8A4701   		movb	1(%bx),	%al
 1662 0c82 84C0     		testb	%al,	%al
 1663 0c84 7403E9BB 		jne	.L378
 1663      FD
 1664 0c89 E9D7FD   		jmp	.L347
 1665              	.L359:
 1666 0c8c 895EFE   		movw	%bx,	-2(%bp)
 1667 0c8f 8D7502   		leaw	2(%di),	%si
 1668 0c92 51       		pushw	%cx
 1669 0c93 50       		pushw	%ax
 1670 0c94 8B05     		movw	(%di),	%ax
 1671 0c96 99       		cwtd
 1672 0c97 52       		pushw	%dx
 1673 0c98 50       		pushw	%ax
 1674 0c99 06       		pushw	%es
 1675 0c9a E8FEFF   		call	print_num_fill
 1676 0c9d 83C40A   		addw	$10,	%sp
 1677 0ca0 89F7     		movw	%si,	%di
 1678 0ca2 8B5EFE   		movw	-2(%bp),	%bx
 1679 0ca5 8D7701   		leaw	1(%bx),	%si
 1680 0ca8 8A4701   		movb	1(%bx),	%al
 1681 0cab 84C0     		testb	%al,	%al
 1682 0cad 7403E992 		jne	.L378
 1682      FD
 1683 0cb2 E9AEFD   		jmp	.L347
 1684              	.L356:
 1685 0cb5 89FA     		movw	%di,	%dx
 1686 0cb7 83C204   		addw	$4,	%dx
 1687 0cba 8956FE   		movw	%dx,	-2(%bp)
 1688 0cbd 51       		pushw	%cx
 1689 0cbe 50       		pushw	%ax
 1690 0cbf FF7502   		pushw	2(%di)
 1691 0cc2 FF35     		pushw	(%di)
 1692 0cc4 06       		pushw	%es
 1693 0cc5 E8FEFF   		call	print_unum_fill
 1694 0cc8 83C40A   		addw	$10,	%sp
 1695 0ccb 8B7EFE   		movw	-2(%bp),	%di
 1696 0cce 89F3     		movw	%si,	%bx
 1697 0cd0 8D7701   		leaw	1(%bx),	%si
 1698 0cd3 8A4701   		movb	1(%bx),	%al
 1699 0cd6 84C0     		testb	%al,	%al
 1700 0cd8 7403E967 		jne	.L378
 1700      FD
 1701 0cdd E983FD   		jmp	.L347
 1702              	.L394:
 1703 0ce0 89FA     		movw	%di,	%dx
 1704 0ce2 83C204   		addw	$4,	%dx
 1705 0ce5 8956FE   		movw	%dx,	-2(%bp)
 1706 0ce8 51       		pushw	%cx
 1707 0ce9 50       		pushw	%ax
 1708 0cea FF7502   		pushw	2(%di)
 1709 0ced FF35     		pushw	(%di)
 1710 0cef 06       		pushw	%es
 1711 0cf0 E8FEFF   		call	print_num_fill
 1712 0cf3 83C40A   		addw	$10,	%sp
 1713 0cf6 8B7EFE   		movw	-2(%bp),	%di
 1714 0cf9 89F3     		movw	%si,	%bx
 1715 0cfb 8D7701   		leaw	1(%bx),	%si
 1716 0cfe 8A4701   		movb	1(%bx),	%al
 1717 0d01 84C0     		testb	%al,	%al
 1718 0d03 7403E93C 		jne	.L378
 1718      FD
 1719 0d08 E958FD   		jmp	.L347
 1720              	.L393:
 1721 0d0b 7403E923 		jne	.L371
 1721      FE
 1722 0d10 39F0     		cmpw	%si,	%ax
 1723 0d12 7703E91C 		jbe	.L371
 1723      FE
 1724 0d17 83C601   		addw	$1,	%si
 1725 0d1a 83D700   		adcw	$0,	%di
 1726 0d1d 83C001   		addw	$1,	%ax
 1727 0d20 8946FE   		movw	%ax,	-2(%bp)
 1728 0d23 B80000   		movw	$0,	%ax
 1729 0d26 11C0     		adcw	%ax,	%ax
 1730 0d28 8946F8   		movw	%ax,	-8(%bp)
 1731 0d2b 895EF6   		movw	%bx,	-10(%bp)
 1732 0d2e E9E5FD   		jmp	.L382
 1733              	.L377:
 1734 0d31 31F6     		xorw	%si,	%si
 1735 0d33 89F7     		movw	%si,	%di
 1736 0d35 393E0000 		cmpw	%di,	.LC2
 1737 0d39 7E03E9C1 		jg	.L368
 1737      FD
 1738 0d3e EBCB     		jmp	.L393
 1740              		.global	disp_printf
 1742              	disp_printf:
 1743 0d40 55       		pushw	%bp
 1744 0d41 89E5     		movw	%sp,	%bp
 1745 0d43 83EC0A   		subw	$10,	%sp
 1746 0d46 C746F800 		movw	$0,	-8(%bp)
 1746      00
 1747 0d4b 8A4604   		movb	4(%bp),	%al
 1748 0d4e 8846FA   		movb	%al,	-6(%bp)
 1749 0d51 C746FE00 		movw	$0,	-2(%bp)
 1749      00
 1750 0d56 C746FCFF 		movw	$-1,	-4(%bp)
 1750      FF
 1751 0d5b 8D4608   		leaw	8(%bp),	%ax
 1752 0d5e 8946F6   		movw	%ax,	-10(%bp)
 1753 0d61 FF76F6   		pushw	-10(%bp)
 1754 0d64 FF7606   		pushw	6(%bp)
 1755 0d67 8D46F8   		leaw	-8(%bp),	%ax
 1756 0d6a 50       		pushw	%ax
 1757 0d6b E8BEFC   		call	out_vprint
 1758 0d6e 89EC     		movw	%bp,	%sp
 1759 0d70 5D       		popw	%bp
 1760 0d71 C3       		ret
 1762              		.global	s_printf
 1764              	s_printf:
 1765 0d72 55       		pushw	%bp
 1766 0d73 89E5     		movw	%sp,	%bp
 1767 0d75 83EC0A   		subw	$10,	%sp
 1768 0d78 C746F800 		movw	$0,	-8(%bp)
 1768      00
 1769 0d7d C646FA00 		movb	$0,	-6(%bp)
 1770 0d81 C746FE00 		movw	$0,	-2(%bp)
 1770      00
 1771 0d86 C746FCFF 		movw	$-1,	-4(%bp)
 1771      FF
 1772 0d8b 8D4606   		leaw	6(%bp),	%ax
 1773 0d8e 8946F6   		movw	%ax,	-10(%bp)
 1774 0d91 FF76F6   		pushw	-10(%bp)
 1775 0d94 FF7604   		pushw	4(%bp)
 1776 0d97 8D46F8   		leaw	-8(%bp),	%ax
 1777 0d9a 50       		pushw	%ax
 1778 0d9b E88EFC   		call	out_vprint
 1779 0d9e 89EC     		movw	%bp,	%sp
 1780 0da0 5D       		popw	%bp
 1781 0da1 C3       		ret
 1783              		.global	s_sprintf
 1785              	s_sprintf:
 1786 0da2 55       		pushw	%bp
 1787 0da3 89E5     		movw	%sp,	%bp
 1788 0da5 83EC0A   		subw	$10,	%sp
 1789 0da8 8B4604   		movw	4(%bp),	%ax
 1790 0dab 8946F8   		movw	%ax,	-8(%bp)
 1791 0dae C646FA00 		movb	$0,	-6(%bp)
 1792 0db2 C746FE00 		movw	$0,	-2(%bp)
 1792      00
 1793 0db7 C746FCFF 		movw	$-1,	-4(%bp)
 1793      FF
 1794 0dbc 8D4608   		leaw	8(%bp),	%ax
 1795 0dbf 8946F6   		movw	%ax,	-10(%bp)
 1796 0dc2 FF76F6   		pushw	-10(%bp)
 1797 0dc5 FF7606   		pushw	6(%bp)
 1798 0dc8 8D46F8   		leaw	-8(%bp),	%ax
 1799 0dcb 50       		pushw	%ax
 1800 0dcc E85DFC   		call	out_vprint
 1801 0dcf 89EC     		movw	%bp,	%sp
 1802 0dd1 5D       		popw	%bp
 1803 0dd2 C3       		ret
 1805              		.global	s_snprintf
 1807              	s_snprintf:
 1808 0dd3 55       		pushw	%bp
 1809 0dd4 89E5     		movw	%sp,	%bp
 1810 0dd6 83EC0A   		subw	$10,	%sp
 1811 0dd9 8B4604   		movw	4(%bp),	%ax
 1812 0ddc 8946F8   		movw	%ax,	-8(%bp)
 1813 0ddf C646FA00 		movb	$0,	-6(%bp)
 1814 0de3 C746FE00 		movw	$0,	-2(%bp)
 1814      00
 1815 0de8 8B4606   		movw	6(%bp),	%ax
 1816 0deb 8946FC   		movw	%ax,	-4(%bp)
 1817 0dee 8D460A   		leaw	10(%bp),	%ax
 1818 0df1 8946F6   		movw	%ax,	-10(%bp)
 1819 0df4 FF76F6   		pushw	-10(%bp)
 1820 0df7 FF7608   		pushw	8(%bp)
 1821 0dfa 8D46F8   		leaw	-8(%bp),	%ax
 1822 0dfd 50       		pushw	%ax
 1823 0dfe E82BFC   		call	out_vprint
 1824 0e01 89EC     		movw	%bp,	%sp
 1825 0e03 5D       		popw	%bp
 1826 0e04 C3       		ret
 1828              		.ident	"GCC: (GNU) 6.3.0"
   1              		.arch i8086,jumps
   2              		.code16
   3              		.att_syntax prefix
   4              	#NO_APP
   5              		.section	.rodata.str1.1,"aMS",@progbits,1
   6              	.LC0:
   7 0000 1B5B3338 		.string	"\033[38;2;%d;%d;%dm"
   7      3B323B25 
   7      643B2564 
   7      3B25646D 
   7      00
   8              	.LC1:
   9 0011 1B5B2564 		.string	"\033[%dm"
   9      6D00
  10              		.text
  11              		.global	termSetCharColor
  13              	termSetCharColor:
  14 0000 55       		pushw	%bp
  15 0001 89E5     		movw	%sp,	%bp
  16 0003 8B4604   		movw	4(%bp),	%ax
  17 0006 85C0     		testw	%ax,	%ax
  18 0008 7C0F     		jl	.L7
  19 000a 50       		pushw	%ax
  20 000b B81100   		movw	$.LC1,	%ax
  21 000e 50       		pushw	%ax
  22 000f E8FEFF   		call	s_printf
  23 0012 83C404   		addw	$4,	%sp
  24 0015 89EC     		movw	%bp,	%sp
  25 0017 5D       		popw	%bp
  26 0018 C3       		ret
  27              	.L7:
  28 0019 89C2     		movw	%ax,	%dx
  29 001b D1E2     		shlw	$1,	%dx
  30 001d D1E2     		shlw	$1,	%dx
  31 001f D1E2     		shlw	$1,	%dx
  32 0021 D1E2     		shlw	$1,	%dx
  33 0023 30F6     		xorb	%dh,	%dh
  34 0025 52       		pushw	%dx
  35 0026 89C2     		movw	%ax,	%dx
  36 0028 81E2F000 		andw	$240,	%dx
  37 002c 52       		pushw	%dx
  38 002d B104     		movb	$4,	%cl
  39 002f D3F8     		sarw	%cl,	%ax
  40 0031 25F000   		andw	$240,	%ax
  41 0034 50       		pushw	%ax
  42 0035 B80000   		movw	$.LC0,	%ax
  43 0038 50       		pushw	%ax
  44 0039 E8FEFF   		call	s_printf
  45 003c 83C408   		addw	$8,	%sp
  46 003f 89EC     		movw	%bp,	%sp
  47 0041 5D       		popw	%bp
  48 0042 C3       		ret
  50              		.section	.rodata.str1.1
  51              	.LC2:
  52 0017 1B5B3438 		.string	"\033[48;2;%d;%d;%dm"
  52      3B323B25 
  52      643B2564 
  52      3B25646D 
  52      00
  53              		.text
  54              		.global	termSetBGColor
  56              	termSetBGColor:
  57 0043 55       		pushw	%bp
  58 0044 89E5     		movw	%sp,	%bp
  59 0046 8B4604   		movw	4(%bp),	%ax
  60 0049 85C0     		testw	%ax,	%ax
  61 004b 7C0F     		jl	.L14
  62 004d 50       		pushw	%ax
  63 004e B81100   		movw	$.LC1,	%ax
  64 0051 50       		pushw	%ax
  65 0052 E8FEFF   		call	s_printf
  66 0055 83C404   		addw	$4,	%sp
  67 0058 89EC     		movw	%bp,	%sp
  68 005a 5D       		popw	%bp
  69 005b C3       		ret
  70              	.L14:
  71 005c 89C2     		movw	%ax,	%dx
  72 005e D1E2     		shlw	$1,	%dx
  73 0060 D1E2     		shlw	$1,	%dx
  74 0062 D1E2     		shlw	$1,	%dx
  75 0064 D1E2     		shlw	$1,	%dx
  76 0066 30F6     		xorb	%dh,	%dh
  77 0068 52       		pushw	%dx
  78 0069 89C2     		movw	%ax,	%dx
  79 006b 81E2F000 		andw	$240,	%dx
  80 006f 52       		pushw	%dx
  81 0070 B104     		movb	$4,	%cl
  82 0072 D3F8     		sarw	%cl,	%ax
  83 0074 25F000   		andw	$240,	%ax
  84 0077 50       		pushw	%ax
  85 0078 B81700   		movw	$.LC2,	%ax
  86 007b 50       		pushw	%ax
  87 007c E8FEFF   		call	s_printf
  88 007f 83C408   		addw	$8,	%sp
  89 0082 89EC     		movw	%bp,	%sp
  90 0084 5D       		popw	%bp
  91 0085 C3       		ret
  93              		.section	.rodata.str1.1
  94              	.LC3:
  95 0028 1B5B3339 		.string	"\033[39m"
  95      6D00
  96              	.LC4:
  97 002e 1B5B3439 		.string	"\033[49m"
  97      6D00
  98              		.text
  99              		.global	termResetColor
 101              	termResetColor:
 102 0086 B82800   		movw	$.LC3,	%ax
 103 0089 50       		pushw	%ax
 104 008a E8FEFF   		call	s_printf
 105 008d B82E00   		movw	$.LC4,	%ax
 106 0090 50       		pushw	%ax
 107 0091 E8FEFF   		call	s_printf
 108 0094 83C404   		addw	$4,	%sp
 109 0097 C3       		ret
 111              		.section	.rodata.str1.1
 112              	.LC5:
 113 0034 1B5B3F32 		.string	"\033[?25l"
 113      356C00
 114              		.text
 115              		.global	termSetBlinkOff
 117              	termSetBlinkOff:
 118 0098 B83400   		movw	$.LC5,	%ax
 119 009b 50       		pushw	%ax
 120 009c E8FEFF   		call	s_printf
 121 009f 83C402   		addw	$2,	%sp
 122 00a2 C3       		ret
 124              		.section	.rodata.str1.1
 125              	.LC6:
 126 003b 1B5B3F32 		.string	"\033[?25h"
 126      356800
 127              		.text
 128              		.global	termResetBlink
 130              	termResetBlink:
 131 00a3 B83B00   		movw	$.LC6,	%ax
 132 00a6 50       		pushw	%ax
 133 00a7 E8FEFF   		call	s_printf
 134 00aa 83C402   		addw	$2,	%sp
 135 00ad C3       		ret
 137              		.section	.rodata.str1.1
 138              	.LC7:
 139 0042 1B5B2564 		.string	"\033[%d;%dH"
 139      3B256448 
 139      00
 140              		.text
 141              		.global	termGoTo
 143              	termGoTo:
 144 00ae 55       		pushw	%bp
 145 00af 89E5     		movw	%sp,	%bp
 146 00b1 8B4604   		movw	4(%bp),	%ax
 147 00b4 85C0     		testw	%ax,	%ax
 148 00b6 7E23     		jle	.L24
 149 00b8 50       		pushw	%ax
 150 00b9 8B4606   		movw	6(%bp),	%ax
 151 00bc 85C0     		testw	%ax,	%ax
 152 00be 7E0C     		jle	.L25
 153              	.L20:
 154 00c0 50       		pushw	%ax
 155 00c1 B84200   		movw	$.LC7,	%ax
 156 00c4 50       		pushw	%ax
 157 00c5 E8FEFF   		call	s_printf
 158 00c8 89EC     		movw	%bp,	%sp
 159 00ca 5D       		popw	%bp
 160 00cb C3       		ret
 161              	.L25:
 162 00cc B80100   		movw	$1,	%ax
 163 00cf 50       		pushw	%ax
 164 00d0 B84200   		movw	$.LC7,	%ax
 165 00d3 50       		pushw	%ax
 166 00d4 E8FEFF   		call	s_printf
 167 00d7 89EC     		movw	%bp,	%sp
 168 00d9 5D       		popw	%bp
 169 00da C3       		ret
 170              	.L24:
 171 00db B80100   		movw	$1,	%ax
 172 00de 50       		pushw	%ax
 173 00df 8B4606   		movw	6(%bp),	%ax
 174 00e2 85C0     		testw	%ax,	%ax
 175 00e4 7FDA     		jg	.L20
 176 00e6 EBE4     		jmp	.L25
 178              		.ident	"GCC: (GNU) 6.3.0"
   1              		.arch i8086,jumps
   2              		.code16
   3              		.att_syntax prefix
   4              	#NO_APP
   5              	#APP
   6              		   .global int_timer_handler_asm    
   7              	int_timer_handler_asm:              
   8 0000 1E       		push %ds                         
   9 0001 06       		push %es                         
  10 0002 2E8C1600 	mov %ss, %cs:int_timer_reg_ss2
  10      00
  11 0007 50       	push %ax
  12 0008 51       	push %cx
  13 0009 52       	push %dx
  14 000a 53       	push %bx
  15 000b 2EFF3600 	push %cs:int_timer_reg_ss2
  15      00
  16 0010 55       	push %bp
  17 0011 56       	push %si
  18 0012 57       	push %di
  19              	                                    
  20 0013 2E892600 	   mov %sp, %cs:int_timer_reg_sp    
  20      00
  21 0018 2E8C1600 	   mov %ss, %cs:int_timer_reg_ss    
  21      00
  22              	                                    
  23 001d 8CC8     		mov	%cs, %ax                     
  24 001f 8ED0     		mov	%ax, %ss                     
  25 0021 8ED8     		mov	%ax, %ds                     
  26 0023 BCE0FF   		mov	$0xffe0, %sp                 
  27              	                                    
  28 0026 E8FEFF   		call int_timer_default_handler   
  29              	                                    
  30 0029 2E8B2600 	   mov %cs:int_timer_reg_sp, %sp    
  30      00
  31 002e 2E8E1600 	   mov %cs:int_timer_reg_ss, %ss    
  31      00
  32              	                                    
  33 0033 5F       	pop %di
  34 0034 5E       	pop %si
  35 0035 5D       	pop %bp
  36 0036 5B       	pop %bx
  37 0037 5B       	pop %bx
  38 0038 5A       	pop %dx
  39 0039 59       	pop %cx
  40 003a 58       	pop %ax
  41 003b 07       		pop %es                          
  42 003c 1F       		pop %ds                          
  43 003d CF       		iret                             
  44              	
  45              	#NO_APP
  46              		.text
  47              		.global	initTimer
  49              	initTimer:
  50 003e 56       		pushw	%si
  51 003f 57       		pushw	%di
  52 0040 55       		pushw	%bp
  53 0041 89E5     		movw	%sp,	%bp
  54 0043 83EC02   		subw	$2,	%sp
  55 0046 BE4300   		movw	$67,	%si
  56 0049 56       		pushw	%si
  57 004a B034     		movb	$52,	%al
  58 004c 50       		pushw	%ax
  59 004d E8FEFF   		call	systemOutByte
  60 0050 BF4000   		movw	$64,	%di
  61 0053 57       		pushw	%di
  62 0054 B210     		movb	$16,	%dl
  63 0056 52       		pushw	%dx
  64 0057 8856FF   		movb	%dl,	-1(%bp)
  65 005a E8FEFF   		call	systemOutByte
  66 005d 57       		pushw	%di
  67 005e B027     		movb	$39,	%al
  68 0060 50       		pushw	%ax
  69 0061 8846FE   		movb	%al,	-2(%bp)
  70 0064 E8FEFF   		call	systemOutByte
  71 0067 56       		pushw	%si
  72 0068 B1B4     		movb	$-76,	%cl
  73 006a 51       		pushw	%cx
  74 006b E8FEFF   		call	systemOutByte
  75 006e 8D74FF   		leaw	-1(%si),	%si
  76 0071 56       		pushw	%si
  77 0072 8A56FF   		movb	-1(%bp),	%dl
  78 0075 52       		pushw	%dx
  79 0076 E8FEFF   		call	systemOutByte
  80 0079 56       		pushw	%si
  81 007a 8A46FE   		movb	-2(%bp),	%al
  82 007d 50       		pushw	%ax
  83 007e E8FEFF   		call	systemOutByte
  84 0081 89EC     		movw	%bp,	%sp
  85 0083 5D       		popw	%bp
  86 0084 5F       		popw	%di
  87 0085 5E       		popw	%si
  88 0086 C3       		ret
  90              		.global	startTimer
  92              	startTimer:
  93 0087 56       		pushw	%si
  94 0088 55       		pushw	%bp
  95 0089 89E5     		movw	%sp,	%bp
  96 008b 83EC02   		subw	$2,	%sp
  97 008e C7060400 		movw	$0,	pc_timer_raw100
  97      0000
  98 0094 C7060600 		movw	$0,	pc_timer_raw100+2
  98      0000
  99              	#APP
 100              	;# 86 "src/timer.c" 1
   1              	#include <stdio.h>
   2              	
   3              	#include "system.h"
   4              	#include "timer.h"
   5              	#include "basicio.h"
   6              	#include "asmfuncs.h"
   7              	#include "int10h.h"
   8              	#include "int16h.h"
   9              	
  10              	unsigned int int_timer_reg_sp;
  11              	unsigned int int_timer_reg_ss;
  12              	unsigned int int_timer_reg_ss2;
  13              	
  14              	#define PUSHA \
  15              	"mov %ss, %cs:int_timer_reg_ss2\n" \
  16              	"push %ax\n" \
  17              	"push %cx\n" \
  18              	"push %dx\n" \
  19              	"push %bx\n" \
  20              	"push %cs:int_timer_reg_ss2\n" \
  21              	"push %bp\n" \
  22              	"push %si\n" \
  23              	"push %di\n"
  24              	
  25              	#define POPA \
  26              	"pop %di\n" \
  27              	"pop %si\n" \
  28              	"pop %bp\n" \
  29              	"pop %bx\n"  /* skip next 2 bytes of stack */ \
  30              	"pop %bx\n" \
  31              	"pop %dx\n" \
  32              	"pop %cx\n" \
  33              	"pop %ax\n" 
  34              	
  35              	
  36              	__asm__ (
  37              	"   .global int_timer_handler_asm    \n"
  38              	"int_timer_handler_asm:              \n"
  39              	"	push %ds                         \n"
  40              	"	push %es                         \n"
  41              	PUSHA /*"	pusha                            \n"*/
  42              	"                                    \n"
  43              	"   mov %sp, %cs:int_timer_reg_sp    \n"
  44              	"   mov %ss, %cs:int_timer_reg_ss    \n"
  45              	"                                    \n"
  46              	"	mov	%cs, %ax                     \n"
  47              	"	mov	%ax, %ss                     \n"
  48              	"	mov	%ax, %ds                     \n"
  49              	"	mov	$0xffe0, %sp                 \n"
  50              	"                                    \n"
  51              	"	call int_timer_default_handler   \n"
  52              	"                                    \n"
  53              	"   mov %cs:int_timer_reg_sp, %sp    \n"
  54              	"   mov %cs:int_timer_reg_ss, %ss    \n"
  55              	"                                    \n"
  56              	POPA /*"	popa                             \n"*/
  57              	"	pop %es                          \n"
  58              	"	pop %ds                          \n"
  59              	"	iret                             \n");
  60              	
  61              	
  62              	
  63              	static unsigned long pc_timer_raw100 = 0;
  64              	static long TickOffset = 0;
  65              	
  66              	void initTimer(void){
  67              		// PSCLOCK -> 1MHz
  68              		//systemOutByte(CLOCK_FREQUENCY_MHZ-2, IOADDR_CLKPRS);
  69              	
  70              		// Timer Setting (ch0)
  71              		systemOutByte(0x34      , IOADDR_TCU_BASE+3); // write TMD (timer 0, l->h, mode 2, bin)
  72              		unsigned int count = 1000*10;
  73              		systemOutByte(count&0xff, IOADDR_TCU_BASE+0); // counter value (low)
  74              		systemOutByte(count>>8  , IOADDR_TCU_BASE+0); // counter value (high)
  75              	
  76              		// Timer Setting (ch2)
  77              		systemOutByte(0xb4      , IOADDR_TCU_BASE+3); // write TMD (timer 2, l->h, mode 2, bin)
  78              		systemOutByte(count&0xff, IOADDR_TCU_BASE+2); // counter value (low)
  79              		systemOutByte(count>>8  , IOADDR_TCU_BASE+2); // counter value (high)
  80              	}
  81              	
  82              	void startTimer(void){
  83              		// interval : 10ms
  84              		pc_timer_raw100 = 0;
  85              	
  86 009a FA       	    asm volatile("cli" :  : );
  87              	
 101              		cli
 102              	;# 0 "" 2
 103              	#NO_APP
 104 009b B8A000   		movw	$160,	%ax
 105 009e 50       		pushw	%ax
 106 009f B011     		movb	$17,	%al
 107 00a1 50       		pushw	%ax
 108 00a2 8846FF   		movb	%al,	-1(%bp)
 109 00a5 E8FEFF   		call	systemOutByte
 110 00a8 BEA100   		movw	$161,	%si
 111 00ab 56       		pushw	%si
 112 00ac B2F0     		movb	$-16,	%dl
 113 00ae 52       		pushw	%dx
 114 00af E8FEFF   		call	systemOutByte
 115 00b2 56       		pushw	%si
 116 00b3 B202     		movb	$2,	%dl
 117 00b5 52       		pushw	%dx
 118 00b6 E8FEFF   		call	systemOutByte
 119 00b9 56       		pushw	%si
 120 00ba B201     		movb	$1,	%dl
 121 00bc 52       		pushw	%dx
 122 00bd E8FEFF   		call	systemOutByte
 123 00c0 56       		pushw	%si
 124 00c1 B2FF     		movb	$-1,	%dl
 125 00c3 52       		pushw	%dx
 126 00c4 E8FEFF   		call	systemOutByte
 127 00c7 BA2000   		movw	$32,	%dx
 128 00ca 52       		pushw	%dx
 129 00cb 8A46FF   		movb	-1(%bp),	%al
 130 00ce 50       		pushw	%ax
 131 00cf E8FEFF   		call	systemOutByte
 132 00d2 8D7480   		leaw	-128(%si),	%si
 133 00d5 56       		pushw	%si
 134 00d6 B008     		movb	$8,	%al
 135 00d8 50       		pushw	%ax
 136 00d9 E8FEFF   		call	systemOutByte
 137 00dc 56       		pushw	%si
 138 00dd 30C0     		xorb	%al,	%al
 139 00df 50       		pushw	%ax
 140 00e0 E8FEFF   		call	systemOutByte
 141 00e3 83C420   		addw	$32,	%sp
 142 00e6 56       		pushw	%si
 143 00e7 B003     		movb	$3,	%al
 144 00e9 50       		pushw	%ax
 145 00ea E8FEFF   		call	systemOutByte
 146 00ed 56       		pushw	%si
 147 00ee B0FE     		movb	$-2,	%al
 148 00f0 50       		pushw	%ax
 149 00f1 E8FEFF   		call	systemOutByte
 150 00f4 89EC     		movw	%bp,	%sp
 151 00f6 5D       		popw	%bp
 152 00f7 5E       		popw	%si
 153 00f8 C3       		ret
 155              		.global	updateCounter
 157              	updateCounter:
 158 00f9 56       		pushw	%si
 159 00fa 57       		pushw	%di
 160 00fb 06       		pushw	%es
 161 00fc 55       		pushw	%bp
 162 00fd 89E5     		movw	%sp,	%bp
 163 00ff 83EC04   		subw	$4,	%sp
 164 0102 8B360400 		movw	pc_timer_raw100,	%si
 165 0106 8B3E0600 		movw	pc_timer_raw100+2,	%di
 166 010a 81FF8300 		cmpw	$131,	%di
 167 010e 777E     		ja	.L12
 168 0110 7476     		je	.L17
 169              	.L6:
 170 0112 89F0     		movw	%si,	%ax
 171 0114 89FA     		movw	%di,	%dx
 172 0116 D1E0     		shlw	%ax
 173 0118 89C1     		movw	%ax,	%cx
 174 011a D1D2     		rclw	%dx
 175 011c D1E1     		shlw	%cx
 176 011e D1D2     		rclw	%dx
 177 0120 D1E1     		shlw	%cx
 178 0122 D1D2     		rclw	%dx
 179 0124 89C8     		movw	%cx,	%ax
 180 0126 01F0     		addw	%si,	%ax
 181 0128 11FA     		adcw	%di,	%dx
 182 012a 31C9     		xorw	%cx,	%cx
 183 012c 8EC1     		movw	%cx,	%es
 184 012e 51       		pushw	%cx
 185 012f B93200   		movw	$50,	%cx
 186 0132 51       		pushw	%cx
 187 0133 52       		pushw	%dx
 188 0134 50       		pushw	%ax
 189 0135 E8FEFF   		call	__udivsi3
 190 0138 83C408   		addw	$8,	%sp
 191 013b 8946FC   		movw	%ax,	-4(%bp)
 192 013e 8956FE   		movw	%dx,	-2(%bp)
 193 0141 06       		pushw	%es
 194 0142 B8F401   		movw	$500,	%ax
 195 0145 50       		pushw	%ax
 196 0146 57       		pushw	%di
 197 0147 56       		pushw	%si
 198 0148 E8FEFF   		call	__udivsi3
 199 014b 83C408   		addw	$8,	%sp
 200 014e 89C1     		movw	%ax,	%cx
 201 0150 89D3     		movw	%dx,	%bx
 202 0152 034EFC   		addw	-4(%bp),	%cx
 203 0155 8B56FE   		movw	-2(%bp),	%dx
 204 0158 11DA     		adcw	%bx,	%dx
 205 015a A10000   		movw	TickOffset,	%ax
 206 015d 8B1E0200 		movw	TickOffset+2,	%bx
 207 0161 01C8     		addw	%cx,	%ax
 208 0163 11DA     		adcw	%bx,	%dx
 209 0165 85D2     		testw	%dx,	%dx
 210 0167 7D0D     		jge	.L8
 211 0169 05A800   		addw	$168,	%ax
 212 016c 83D218   		adcw	$24,	%dx
 213              	.L10:
 214 016f 89EC     		movw	%bp,	%sp
 215 0171 5D       		popw	%bp
 216 0172 07       		popw	%es
 217 0173 5F       		popw	%di
 218 0174 5E       		popw	%si
 219 0175 C3       		ret
 220              	.L8:
 221 0176 83FA18   		cmpw	$24,	%dx
 222 0179 7E26     		jle	.L18
 223 017b 0558FF   		addw	$-168,	%ax
 224 017e 83D2E7   		adcw	$-25,	%dx
 225              	.L19:
 226 0181 89EC     		movw	%bp,	%sp
 227 0183 5D       		popw	%bp
 228 0184 07       		popw	%es
 229 0185 5F       		popw	%di
 230 0186 5E       		popw	%si
 231 0187 C3       		ret
 232              	.L17:
 233 0188 81FEFFD5 		cmpw	$-10753,	%si
 234 018c 7684     		jbe	.L6
 235              	.L12:
 236 018e 81C6002A 		addw	$10752,	%si
 237 0192 81D77CFF 		adcw	$-132,	%di
 238 0196 89360400 		movw	%si,	pc_timer_raw100
 239 019a 893E0600 		movw	%di,	pc_timer_raw100+2
 240 019e E971FF   		jmp	.L6
 241              	.L18:
 242 01a1 75CC     		jne	.L10
 243 01a3 3DA700   		cmpw	$167,	%ax
 244 01a6 76C7     		jbe	.L10
 245 01a8 0558FF   		addw	$-168,	%ax
 246 01ab 83D2E7   		adcw	$-25,	%dx
 247 01ae EBD1     		jmp	.L19
 249              		.global	updateTickOffset
 251              	updateTickOffset:
 252 01b0 56       		pushw	%si
 253 01b1 57       		pushw	%di
 254 01b2 89E3     		movw	%sp,	%bx
 255 01b4 8B7706   		movw	6(%bx),	%si
 256 01b7 8B7F08   		movw	8(%bx),	%di
 257 01ba C7060000 		movw	$0,	TickOffset
 257      0000
 258 01c0 C7060200 		movw	$0,	TickOffset+2
 258      0000
 259 01c6 E8FEFF   		call	updateCounter
 260 01c9 29C6     		subw	%ax,	%si
 261 01cb 19D7     		sbbw	%dx,	%di
 262 01cd 89360000 		movw	%si,	TickOffset
 263 01d1 893E0200 		movw	%di,	TickOffset+2
 264 01d5 5F       		popw	%di
 265 01d6 5E       		popw	%si
 266 01d7 E91FFF   		jmp	updateCounter
 268              		.global	int_timer_default_handler
 270              	int_timer_default_handler:
 271 01da A10400   		movw	pc_timer_raw100,	%ax
 272 01dd 8B160600 		movw	pc_timer_raw100+2,	%dx
 273 01e1 83C001   		addw	$1,	%ax
 274 01e4 83D200   		adcw	$0,	%dx
 275 01e7 A30400   		movw	%ax,	pc_timer_raw100
 276 01ea 89160600 		movw	%dx,	pc_timer_raw100+2
 277 01ee E8FEFF   		call	updateCounter
 278 01f1 B94000   		movw	$64,	%cx
 279 01f4 8ED9     		movw	%cx,	%ds
 280 01f6 39166E00 		cmpw	%dx,	110
 281 01fa 761B     		jbe	.L28
 282 01fc B94000   		movw	$64,	%cx
 283 01ff 8ED9     		movw	%cx,	%ds
 284 0201 C6067000 		movb	$1,	112
 284      01
 285              	.L23:
 286 0206 B94000   		movw	$64,	%cx
 287 0209 8ED9     		movw	%cx,	%ds
 288 020b A36C00   		movw	%ax,	108
 289 020e 89166E00 		movw	%dx,	110
 290 0212 16       		pushw	%ss
 291 0213 1F       		popw	%ds
 292 0214 E9FEFF   		jmp	updateKeyInput
 293              	.L28:
 294 0217 75ED     		jne	.L23
 295 0219 39066C00 		cmpw	%ax,	108
 296 021d 76E7     		jbe	.L23
 297 021f B94000   		movw	$64,	%cx
 298 0222 8ED9     		movw	%cx,	%ds
 299 0224 C6067000 		movb	$1,	112
 299      01
 300 0229 EBDB     		jmp	.L23
 302              		.global	getTimer
 304              	getTimer:
 305 022b A10400   		movw	pc_timer_raw100,	%ax
 306 022e 8B160600 		movw	pc_timer_raw100+2,	%dx
 307 0232 C3       		ret
 309              		.global	setTimer
 311              	setTimer:
 312 0233 89E3     		movw	%sp,	%bx
 313 0235 8B4702   		movw	2(%bx),	%ax
 314 0238 8B5704   		movw	4(%bx),	%dx
 315 023b A30400   		movw	%ax,	pc_timer_raw100
 316 023e 89160600 		movw	%dx,	pc_timer_raw100+2
 317 0242 C3       		ret
 319              		.global	stopTimer
 321              	stopTimer:
 322 0243 B82100   		movw	$33,	%ax
 323 0246 50       		pushw	%ax
 324 0247 B0FF     		movb	$-1,	%al
 325 0249 50       		pushw	%ax
 326 024a E8FEFF   		call	systemOutByte
 327              	#APP
 328              	;# 164 "src/timer.c" 1
  88              		// interval : 10ms
  89              		// interrupt vector : 0x08
  90              	
  91              		// Initialize the Interrupt Control Unit
  92              		// Set up slave controller
  93              		systemOutByte(0x11 + (0<<3)          , IOADDR_ICUSLV_BASE+0); // ICW1: Edge trigger(0)
  94              		systemOutByte(0xf0                   , IOADDR_ICUSLV_BASE+1); // ICW2: Higher 5 bits of interrupt 
  95              		systemOutByte(0x02                   , IOADDR_ICUSLV_BASE+1); // ICW3: no slave is attached and th
  96              	//	systemOutByte(0x00                   , IOADDR_ICUSLV_BASE+1); // ICW3: no slave is attached and 
  97              		systemOutByte(0x01                   , IOADDR_ICUSLV_BASE+1); // ICW4: Normal Nesting(0), Self fin
  98              		systemOutByte(0xff                   , IOADDR_ICUSLV_BASE+1); // OCW1: interrupt request mask (INT
  99              	
 100              		// Set up master controller
 101              		systemOutByte(0x11 + (0<<3)          , IOADDR_ICUMST_BASE+0); // ICW1: Edge trigger(0)
 102              		systemOutByte(0x08                   , IOADDR_ICUMST_BASE+1); // ICW2: Higher 5 bits of interrupt 
 103              		systemOutByte(0x00                   , IOADDR_ICUMST_BASE+1); // ICW3: no slave is attached and th
 104              		systemOutByte(0x01 + (0<<4) + (1<<1) , IOADDR_ICUMST_BASE+1); // ICW4: Normal Nesting(0), Self fin
 105              		systemOutByte(0xfe                   , IOADDR_ICUMST_BASE+1); // OCW1: interrupt request mask (INT
 106              	
 107              		//asm volatile("sti" :  : );
 108              	}
 109              	
 110              	unsigned long updateTickOffset(long newTick){
 111              		TickOffset = 0;
 112              		long tick = updateCounter();
 113              		TickOffset = newTick - tick;
 114              		tick = updateCounter();
 115              		return tick;
 116              	}
 117              	
 118              	
 119              	unsigned long updateCounter(void){
 120              		long tick;
 121              	
 122              		if( pc_timer_raw100 >= 24*3600L*100L ){
 123              			pc_timer_raw100 -= 24*3600L*100L;
 124              		}
 125              	
 126              		// 18.2 per 1s 
 127              		// time100/100 * (18.2) = time100 * 182 / 1000 = time100 * 91 / 500
 128              		tick  = pc_timer_raw100 * 9 /  50;
 129              		tick += pc_timer_raw100     / 500;
 130              	
 131              		tick = tick + TickOffset;
 132              		if(tick <                 0) tick += TICK_PER_HOUR*24;
 133              		if(tick >= TICK_PER_HOUR*24) tick -= TICK_PER_HOUR*24;
 134              	
 135              		return tick;
 136              	}	
 137              	
 138              	void int_timer_default_handler(void){
 139              		pc_timer_raw100++;
 140              		unsigned long tick = updateCounter();
 141              	
 142              		unsigned long __far * pTick     = _MK_FP(0x40, 0x6c);
 143              		unsigned char __far * pRollOver = _MK_FP(0x40, 0x70);
 144              	
 145              		if( tick < *pTick ){
 146              			*pRollOver = 1;
 147              		}
 148              		*pTick = tick;
 149              	
 150              		updateKeyInput();
 151              	}
 152              	
 153              	
 154              	unsigned long getTimer(void){
 155              		return pc_timer_raw100;
 156              	}
 157              	unsigned long setTimer(unsigned long val){
 158              		pc_timer_raw100 = val;
 159              		return pc_timer_raw100;
 160              	}
 161              	void stopTimer(void){
 162              		systemOutByte(0xff, IOADDR_ICUMST_BASE+1); // IIKW: interrupt request mask (All INT are masked)
 163              	
 164 024d FA       	    asm volatile("cli" :  : );
 165              	}
 329              		cli
 330              	;# 0 "" 2
 331              	#NO_APP
 332 024e 83C404   		addw	$4,	%sp
 333 0251 C3       		ret
 335              		.global	restartTimer
 337              	restartTimer:
 338 0252 B82100   		movw	$33,	%ax
 339 0255 50       		pushw	%ax
 340 0256 B0FE     		movb	$-2,	%al
 341 0258 50       		pushw	%ax
 342 0259 E8FEFF   		call	systemOutByte
 343              	#APP
 344              	;# 170 "src/timer.c" 1
 166              	
 167              	void restartTimer(void){
 168              		systemOutByte(0xfe, IOADDR_ICUMST_BASE+1); // IIKW: interrupt request mask (INT0 is not masked)
 169              	
 170 025c FB       	    asm volatile("sti" :  : );
 171              	}
 345              		sti
 346              	;# 0 "" 2
 347              	#NO_APP
 348 025d 83C404   		addw	$4,	%sp
 349 0260 C3       		ret
 351              		.local	TickOffset
 352              		.comm	TickOffset,4,2
 353              		.local	pc_timer_raw100
 354              		.comm	pc_timer_raw100,4,2
 355              		.comm	int_timer_reg_ss2,2,2
 356              		.comm	int_timer_reg_ss,2,2
 357              		.comm	int_timer_reg_sp,2,2
 358              		.ident	"GCC: (GNU) 6.3.0"
   1              		.arch i8086,jumps
   2              		.code16
   3              		.att_syntax prefix
   4              	#NO_APP
   5              		.text
   6              		.global	systemOutByte
   8              	systemOutByte:
   9 0000 89E3     		movw	%sp,	%bx
  10 0002 8B5704   		movw	4(%bx),	%dx
  11 0005 8A4702   		movb	2(%bx),	%al
  12              	#APP
  13              	;# 5 "src/system.c" 1
   1              	#include "system.h"
   2              	
   3              	
   4              	void systemOutByte(unsigned char value, unsigned int port) {
   5 0008 EE       	    asm volatile("outb %b0, %w1" : : "a"(value), "Nd"(port));
   6              	}
  14              		outb %al, %dx
  15              	;# 0 "" 2
  16              	#NO_APP
  17 0009 C3       		ret
  19              		.global	systemInByte
  21              	systemInByte:
  22 000a 89E3     		movw	%sp,	%bx
  23 000c 8B5702   		movw	2(%bx),	%dx
  24              	#APP
  25              	;# 10 "src/system.c" 1
   7              	
   8              	unsigned char systemInByte(unsigned int port) {
   9              	    unsigned char value;
  10 000f EC       	    asm volatile("inb  %w1, %b0" : "=a"(value) : "d"(port));
  11              	    return value;
  26              		inb  %dx, %al
  27              	;# 0 "" 2
  28              	#NO_APP
  29 0010 C3       		ret
  31              		.global	systemOutWord
  33              	systemOutWord:
  34 0011 89E3     		movw	%sp,	%bx
  35 0013 8B5704   		movw	4(%bx),	%dx
  36 0016 8B4702   		movw	2(%bx),	%ax
  37              	#APP
  38              	;# 15 "src/system.c" 1
  12              	}
  13              	
  14              	void systemOutWord(unsigned short value, unsigned int port) {
  15 0019 EF       	    asm volatile("outw %w0, %w1" : : "a"(value), "Nd"(port));
  16              	}
  39              		outw %ax, %dx
  40              	;# 0 "" 2
  41              	#NO_APP
  42 001a C3       		ret
  44              		.global	systemInWord
  46              	systemInWord:
  47 001b 89E3     		movw	%sp,	%bx
  48 001d 8B5702   		movw	2(%bx),	%dx
  49              	#APP
  50              	;# 20 "src/system.c" 1
  17              	
  18              	unsigned short systemInWord(unsigned int port) {
  19              	    unsigned short value;
  20 0020 ED       	    asm volatile("inw  %w1, %w0" : "=a"(value) : "d"(port));
  21              	    return value;
  51              		inw  %dx, %ax
  52              	;# 0 "" 2
  53              	#NO_APP
  54 0021 C3       		ret
  56              		.global	systemReset
  58              	systemReset:
  59 0022 B80100   		movw	$1,	%ax
  60              	#APP
  61              	;# 25 "src/system.c" 1
  22              	}
  23              	
  24              	void systemReset(void){
  25 0025 E796     		asm volatile("out %0, $0x96" : : "a"(0x01));
  26              	}
  62              		out %ax, $0x96
  63              	;# 0 "" 2
  64              	#NO_APP
  65 0027 C3       		ret
  67              		.global	systemSerialPutc
  69              	systemSerialPutc:
  70 0028 55       		pushw	%bp
  71 0029 89E5     		movw	%sp,	%bp
  72 002b 83EC02   		subw	$2,	%sp
  73 002e BAFD02   		movw	$765,	%dx
  74              	.L11:
  75              	#APP
  76              	;# 10 "src/system.c" 1
  77              		inb  %dx, %al
  78              	;# 0 "" 2
  79              	#NO_APP
  80 0032 8846FE   		movb	%al,	-2(%bp)
  81 0035 F646FE20 		testb	$32,	-2(%bp)
  82 0039 74F6     		je	.L11
  83 003b BAF802   		movw	$760,	%dx
  84 003e 8A4604   		movb	4(%bp),	%al
  85              	#APP
  86              	;# 5 "src/system.c" 1
  87              		outb %al, %dx
  88              	;# 0 "" 2
  89              	#NO_APP
  90 0042 89EC     		movw	%bp,	%sp
  91 0044 5D       		popw	%bp
  92 0045 C3       		ret
  94              		.global	systemSerialGetc
  96              	systemSerialGetc:
  97 0046 55       		pushw	%bp
  98 0047 89E5     		movw	%sp,	%bp
  99 0049 83EC02   		subw	$2,	%sp
 100 004c BAFD02   		movw	$765,	%dx
 101              	.L18:
 102              	#APP
 103              	;# 10 "src/system.c" 1
 104              		inb  %dx, %al
 105              	;# 0 "" 2
 106              	#NO_APP
 107 0050 8846FE   		movb	%al,	-2(%bp)
 108 0053 F646FE01 		testb	$1,	-2(%bp)
 109 0057 74F6     		je	.L18
 110 0059 BAF802   		movw	$760,	%dx
 111              	#APP
 112              	;# 10 "src/system.c" 1
 113              		inb  %dx, %al
 114              	;# 0 "" 2
 115              	#NO_APP
 116 005d 89EC     		movw	%bp,	%sp
 117 005f 5D       		popw	%bp
 118 0060 C3       		ret
 120              		.global	systemIsUSARTDataAvailable
 122              	systemIsUSARTDataAvailable:
 123 0061 B8FD02   		movw	$765,	%ax
 124 0064 89C2     		movw	%ax,	%dx
 125              	#APP
 126              	;# 10 "src/system.c" 1
 127              		inb  %dx, %al
 128              	;# 0 "" 2
 129              	#NO_APP
 130 0067 2401     		andb	$1,	%al
 131 0069 30E4     		xorb	%ah,	%ah
 132 006b C3       		ret
 134              		.ident	"GCC: (GNU) 6.3.0"
   1              		.arch i8086,jumps
   2              		.code16
   3              		.att_syntax prefix
   4              	#NO_APP
   5              		.section	.rodata.str1.1,"aMS",@progbits,1
   6              	.LC0:
   7 0000 494E5420 		.string	"INT 0x%02x\n"
   7      30782530 
   7      32780A00 
   8              	.LC1:
   9 000c 41583A20 		.string	"AX: %04x BX: %04x CX: %04x DX: %04x SS: %04x SP: %04x\n"
   9      25303478 
   9      2042583A 
   9      20253034 
   9      78204358 
  10              		.text
  11              		.global	intr_print_default_msg
  13              	intr_print_default_msg:
  14 0000 56       		pushw	%si
  15 0001 57       		pushw	%di
  16 0002 06       		pushw	%es
  17 0003 55       		pushw	%bp
  18 0004 89E5     		movw	%sp,	%bp
  19 0006 83C480   		addw	$-128,	%sp
  20 0009 FF360000 		pushw	intr_num
  21 000d B80000   		movw	$.LC0,	%ax
  22 0010 50       		pushw	%ax
  23 0011 BF8000   		movw	$128,	%di
  24 0014 57       		pushw	%di
  25 0015 8D7680   		leaw	-128(%bp),	%si
  26 0018 56       		pushw	%si
  27 0019 E8FEFF   		call	s_snprintf
  28 001c 56       		pushw	%si
  29              	#APP
  30              	;# 13 "src/intr.c" 1
   1              	#include <stdio.h>
   2              	
   3              	#include "basicio.h"
   4              	#include "system.h"
   5              	#include "emu_interface.h"
   6              	
   7              	unsigned short intr_num;
   8              	
   9              	void intr_print_default_msg(unsigned short sp, unsigned short ss, unsigned short ax, unsigned short
  10              	    char buf[128];
  11              		unsigned int reg_ss;
  12              	
  13 001d 8CD0     	    asm volatile("mov  %%ss, %w0" : "=a"(reg_ss) : );
  14              	
  31              		mov  %ss, %ax
  32              	;# 0 "" 2
  33              	#NO_APP
  34 001f 8EC0     		movw	%ax,	%es
  35 0021 50       		pushw	%ax
  36 0022 E8FEFF   		call	emuLogMessage
  37 0025 FF760A   		pushw	10(%bp)
  38 0028 FF760C   		pushw	12(%bp)
  39 002b FF7614   		pushw	20(%bp)
  40 002e FF7612   		pushw	18(%bp)
  41 0031 FF7610   		pushw	16(%bp)
  42 0034 FF760E   		pushw	14(%bp)
  43 0037 B80C00   		movw	$.LC1,	%ax
  44 003a 50       		pushw	%ax
  45 003b 57       		pushw	%di
  46 003c 56       		pushw	%si
  47 003d E8FEFF   		call	s_snprintf
  48 0040 56       		pushw	%si
  49 0041 06       		pushw	%es
  50 0042 E8FEFF   		call	emuLogMessage
  51 0045 89EC     		movw	%bp,	%sp
  52 0047 5D       		popw	%bp
  53 0048 07       		popw	%es
  54 0049 5F       		popw	%di
  55 004a 5E       		popw	%si
  56 004b C3       		ret
  58              		.comm	intr_num,2,2
  59              		.ident	"GCC: (GNU) 6.3.0"
   1              		.arch i8086,jumps
   2              		.code16
   3              		.att_syntax prefix
   4              	#NO_APP
   5              	#APP
   6              		   .global int10_handler_asm        
   7              	int10_handler_asm:                  
   8 0000 1E       		push %ds                         
   9 0001 06       		push %es                         
  10 0002 2E8C1600 	mov %ss, %cs:int10_reg_ss2
  10      00
  11 0007 50       	push %ax
  12 0008 51       	push %cx
  13 0009 52       	push %dx
  14 000a 53       	push %bx
  15 000b 2EFF3600 	push %cs:int10_reg_ss2
  15      00
  16 0010 55       	push %bp
  17 0011 56       	push %si
  18 0012 57       	push %di
  19              	                                    
  20 0013 2EA30000 	   mov %ax, %cs:int10_reg_ax        
  21 0017 2E891E00 	   mov %bx, %cs:int10_reg_bx        
  21      00
  22 001c 2E890E00 	   mov %cx, %cs:int10_reg_cx        
  22      00
  23 0021 2E891600 	   mov %dx, %cs:int10_reg_dx        
  23      00
  24 0026 2E893E00 	   mov %di, %cs:int10_reg_di        
  24      00
  25 002b 2E8C0600 	   mov %es, %cs:int10_reg_es        
  25      00
  26 0030 2E892600 	   mov %sp, %cs:int10_reg_sp        
  26      00
  27 0035 2E8C1600 	   mov %ss, %cs:int10_reg_ss        
  27      00
  28              	                                    
  29 003a 8CC8     		mov	%cs, %ax                     
  30 003c 8ED0     		mov	%ax, %ss                     
  31 003e 8ED8     		mov	%ax, %ds                     
  32 0040 B8FFFF   		mov	$0xffff, %ax                 
  33 0043 89C4     		mov	%ax, %sp                     
  34              	                                    
  35 0045 A10000   	   mov int10_reg_ax, %ax            
  36 0048 80FC00   		cmp	$0x00, %ah                   
  37 004b 7503E9A2 		je	int10_handler_asm_ah00       
  37      00
  38 0050 80FC01   		cmp	$0x01, %ah                   
  39 0053 7503E9B2 		je	int10_handler_asm_ah01       
  39      00
  40 0058 80FC02   		cmp	$0x02, %ah                   
  41 005b 7503E9C2 		je	int10_handler_asm_ah02       
  41      00
  42 0060 80FC03   		cmp	$0x03, %ah                   
  43 0063 7503E9D2 		je	int10_handler_asm_ah03       
  43      00
  44 0068 80FC05   		cmp	$0x05, %ah                   
  45 006b 7503E9EC 		je	int10_handler_asm_ah05       
  45      00
  46 0070 80FC06   		cmp	$0x06, %ah                   
  47 0073 7503E9FC 		je	int10_handler_asm_ah06       
  47      00
  48 0078 80FC07   		cmp	$0x07, %ah                   
  49 007b 7503E90C 		je	int10_handler_asm_ah07       
  49      01
  50 0080 80FC08   		cmp	$0x08, %ah                   
  51 0083 7503E91C 		je	int10_handler_asm_ah08       
  51      01
  52 0088 80FC09   		cmp	$0x09, %ah                   
  53 008b 7503E930 		je	int10_handler_asm_ah09       
  53      01
  54 0090 80FC0A   		cmp	$0x0a, %ah                   
  55 0093 7503E940 		je	int10_handler_asm_ah0a       
  55      01
  56 0098 80FC0E   		cmp	$0x0e, %ah                   
  57 009b 7503E950 		je	int10_handler_asm_ah0e       
  57      01
  58 00a0 80FC0F   		cmp	$0x0f, %ah                   
  59 00a3 7503E960 		je	int10_handler_asm_ah0f       
  59      01
  60 00a8 80FC10   		cmp	$0x10, %ah                   
  61 00ab 7503E97A 		je	int10_handler_asm_ah10       
  61      01
  62 00b0 80FC11   		cmp	$0x11, %ah                   
  63 00b3 7503E98A 		je	int10_handler_asm_ah11       
  63      01
  64 00b8 80FC12   		cmp	$0x12, %ah                   
  65 00bb 7503E99A 		je	int10_handler_asm_ah12       
  65      01
  66 00c0 80FC1A   		cmp	$0x1a, %ah                   
  67 00c3 7503E9B8 		je	int10_handler_asm_ah1a       
  67      01
  68 00c8 80FCFE   		cmp	$0xfe, %ah                   
  69 00cb 7503E9CD 		je	int10_handler_asm_ahfe       
  69      01
  70 00d0 80FCFF   		cmp	$0xff, %ah                   
  71 00d3 7503E9E5 		je	int10_handler_asm_ahff       
  71      01
  72              	                                    
  73 00d8 E8FEFF   		call int10_default_handler       
  74              	                                    
  75 00db 2EA10000 	   mov %cs:int10_reg_sp, %ax        
  76 00df 89C4     	   mov %ax, %sp                     
  77 00e1 2EA10000 	   mov %cs:int10_reg_ss, %ax        
  78 00e5 8ED0     	   mov %ax, %ss                     
  79              	                                    
  80 00e7 5F       	pop %di
  81 00e8 5E       	pop %si
  82 00e9 5D       	pop %bp
  83 00ea 5B       	pop %bx
  84 00eb 5B       	pop %bx
  85 00ec 5A       	pop %dx
  86 00ed 59       	pop %cx
  87 00ee 58       	pop %ax
  88 00ef 07       		pop %es                          
  89 00f0 1F       		pop %ds                          
  90 00f1 CF       		iret                             
  91              	
  92              		int10_handler_asm_ah00:             
  93 00f2 E8FEFF   		call int10_handler_ah00                    
  94              	                                    
  95 00f5 2E8B2600 	   mov %cs:int10_reg_sp, %sp        
  95      00
  96 00fa 2E8E1600 	   mov %cs:int10_reg_ss, %ss        
  96      00
  97              	                                    
  98 00ff 5F       	pop %di
  99 0100 5E       	pop %si
 100 0101 5D       	pop %bp
 101 0102 5B       	pop %bx
 102 0103 5B       	pop %bx
 103 0104 5A       	pop %dx
 104 0105 59       	pop %cx
 105 0106 58       	pop %ax
 106 0107 07       		pop %es                          
 107 0108 1F       		pop %ds                          
 108 0109 CF       		iret                             
 109              	
 110              		int10_handler_asm_ah01:             
 111 010a E8FEFF   		call int10_handler_ah01                    
 112              	                                    
 113 010d 2E8B2600 	   mov %cs:int10_reg_sp, %sp        
 113      00
 114 0112 2E8E1600 	   mov %cs:int10_reg_ss, %ss        
 114      00
 115              	                                    
 116 0117 5F       	pop %di
 117 0118 5E       	pop %si
 118 0119 5D       	pop %bp
 119 011a 5B       	pop %bx
 120 011b 5B       	pop %bx
 121 011c 5A       	pop %dx
 122 011d 59       	pop %cx
 123 011e 58       	pop %ax
 124 011f 07       		pop %es                          
 125 0120 1F       		pop %ds                          
 126 0121 CF       		iret                             
 127              	
 128              		int10_handler_asm_ah02:             
 129 0122 E8FEFF   		call int10_handler_ah02                    
 130              	                                    
 131 0125 2E8B2600 	   mov %cs:int10_reg_sp, %sp        
 131      00
 132 012a 2E8E1600 	   mov %cs:int10_reg_ss, %ss        
 132      00
 133              	                                    
 134 012f 5F       	pop %di
 135 0130 5E       	pop %si
 136 0131 5D       	pop %bp
 137 0132 5B       	pop %bx
 138 0133 5B       	pop %bx
 139 0134 5A       	pop %dx
 140 0135 59       	pop %cx
 141 0136 58       	pop %ax
 142 0137 07       		pop %es                          
 143 0138 1F       		pop %ds                          
 144 0139 CF       		iret                             
 145              	
 146              		int10_handler_asm_ah03:             
 147 013a E8FEFF   		call int10_handler_ah03                    
 148              	                                    
 149 013d 2E8B2600 	   mov %cs:int10_reg_sp, %sp        
 149      00
 150 0142 2E8E1600 	   mov %cs:int10_reg_ss, %ss        
 150      00
 151              	                                    
 152 0147 5F       	pop %di
 153 0148 5E       	pop %si
 154 0149 5D       	pop %bp
 155 014a 5B       	pop %bx
 156 014b 5B       	pop %bx
 157 014c 5A       	pop %dx
 158 014d 59       	pop %cx
 159 014e 58       	pop %ax
 160 014f 07       		pop %es                          
 161 0150 1F       		pop %ds                          
 162 0151 2E8B0E00 	   mov %cs:int10_reg_cx, %cx        
 162      00
 163 0156 2E8B1600 	   mov %cs:int10_reg_dx, %dx        
 163      00
 164 015b CF       		iret                             
 165              	
 166              		int10_handler_asm_ah05:             
 167 015c E8FEFF   		call int10_handler_ah05                    
 168              	                                    
 169 015f 2E8B2600 	   mov %cs:int10_reg_sp, %sp        
 169      00
 170 0164 2E8E1600 	   mov %cs:int10_reg_ss, %ss        
 170      00
 171              	                                    
 172 0169 5F       	pop %di
 173 016a 5E       	pop %si
 174 016b 5D       	pop %bp
 175 016c 5B       	pop %bx
 176 016d 5B       	pop %bx
 177 016e 5A       	pop %dx
 178 016f 59       	pop %cx
 179 0170 58       	pop %ax
 180 0171 07       		pop %es                          
 181 0172 1F       		pop %ds                          
 182 0173 CF       		iret                             
 183              	
 184              		int10_handler_asm_ah06:             
 185 0174 E8FEFF   		call int10_handler_ah06                    
 186              	                                    
 187 0177 2E8B2600 	   mov %cs:int10_reg_sp, %sp        
 187      00
 188 017c 2E8E1600 	   mov %cs:int10_reg_ss, %ss        
 188      00
 189              	                                    
 190 0181 5F       	pop %di
 191 0182 5E       	pop %si
 192 0183 5D       	pop %bp
 193 0184 5B       	pop %bx
 194 0185 5B       	pop %bx
 195 0186 5A       	pop %dx
 196 0187 59       	pop %cx
 197 0188 58       	pop %ax
 198 0189 07       		pop %es                          
 199 018a 1F       		pop %ds                          
 200 018b CF       		iret                             
 201              	
 202              		int10_handler_asm_ah07:             
 203 018c E8FEFF   		call int10_handler_ah07                    
 204              	                                    
 205 018f 2E8B2600 	   mov %cs:int10_reg_sp, %sp        
 205      00
 206 0194 2E8E1600 	   mov %cs:int10_reg_ss, %ss        
 206      00
 207              	                                    
 208 0199 5F       	pop %di
 209 019a 5E       	pop %si
 210 019b 5D       	pop %bp
 211 019c 5B       	pop %bx
 212 019d 5B       	pop %bx
 213 019e 5A       	pop %dx
 214 019f 59       	pop %cx
 215 01a0 58       	pop %ax
 216 01a1 07       		pop %es                          
 217 01a2 1F       		pop %ds                          
 218 01a3 CF       		iret                             
 219              	
 220              		int10_handler_asm_ah08:             
 221 01a4 E8FEFF   		call int10_handler_ah08                    
 222              	                                    
 223 01a7 2E8B2600 	   mov %cs:int10_reg_sp, %sp        
 223      00
 224 01ac 2E8E1600 	   mov %cs:int10_reg_ss, %ss        
 224      00
 225              	                                    
 226 01b1 5F       	pop %di
 227 01b2 5E       	pop %si
 228 01b3 5D       	pop %bp
 229 01b4 5B       	pop %bx
 230 01b5 5B       	pop %bx
 231 01b6 5A       	pop %dx
 232 01b7 59       	pop %cx
 233 01b8 58       	pop %ax
 234 01b9 07       		pop %es                          
 235 01ba 1F       		pop %ds                          
 236 01bb 2EA10000 	   mov %cs:int10_reg_ax, %ax        
 237 01bf CF       		iret                             
 238              	
 239              		int10_handler_asm_ah09:             
 240 01c0 E8FEFF   		call int10_handler_ah09                    
 241              	                                    
 242 01c3 2E8B2600 	   mov %cs:int10_reg_sp, %sp        
 242      00
 243 01c8 2E8E1600 	   mov %cs:int10_reg_ss, %ss        
 243      00
 244              	                                    
 245 01cd 5F       	pop %di
 246 01ce 5E       	pop %si
 247 01cf 5D       	pop %bp
 248 01d0 5B       	pop %bx
 249 01d1 5B       	pop %bx
 250 01d2 5A       	pop %dx
 251 01d3 59       	pop %cx
 252 01d4 58       	pop %ax
 253 01d5 07       		pop %es                          
 254 01d6 1F       		pop %ds                          
 255 01d7 CF       		iret                             
 256              	
 257              		int10_handler_asm_ah0a:             
 258 01d8 E8FEFF   		call int10_handler_ah0a                    
 259              	                                    
 260 01db 2E8B2600 	   mov %cs:int10_reg_sp, %sp        
 260      00
 261 01e0 2E8E1600 	   mov %cs:int10_reg_ss, %ss        
 261      00
 262              	                                    
 263 01e5 5F       	pop %di
 264 01e6 5E       	pop %si
 265 01e7 5D       	pop %bp
 266 01e8 5B       	pop %bx
 267 01e9 5B       	pop %bx
 268 01ea 5A       	pop %dx
 269 01eb 59       	pop %cx
 270 01ec 58       	pop %ax
 271 01ed 07       		pop %es                          
 272 01ee 1F       		pop %ds                          
 273 01ef CF       		iret                             
 274              	
 275              		int10_handler_asm_ah0e:             
 276 01f0 E8FEFF   		call int10_handler_ah0e                    
 277              	                                    
 278 01f3 2E8B2600 	   mov %cs:int10_reg_sp, %sp        
 278      00
 279 01f8 2E8E1600 	   mov %cs:int10_reg_ss, %ss        
 279      00
 280              	                                    
 281 01fd 5F       	pop %di
 282 01fe 5E       	pop %si
 283 01ff 5D       	pop %bp
 284 0200 5B       	pop %bx
 285 0201 5B       	pop %bx
 286 0202 5A       	pop %dx
 287 0203 59       	pop %cx
 288 0204 58       	pop %ax
 289 0205 07       		pop %es                          
 290 0206 1F       		pop %ds                          
 291 0207 CF       		iret                             
 292              	
 293              		int10_handler_asm_ah0f:             
 294 0208 E8FEFF   		call int10_handler_ah0f                    
 295              	                                    
 296 020b 2E8B2600 	   mov %cs:int10_reg_sp, %sp        
 296      00
 297 0210 2E8E1600 	   mov %cs:int10_reg_ss, %ss        
 297      00
 298              	                                    
 299 0215 5F       	pop %di
 300 0216 5E       	pop %si
 301 0217 5D       	pop %bp
 302 0218 5B       	pop %bx
 303 0219 5B       	pop %bx
 304 021a 5A       	pop %dx
 305 021b 59       	pop %cx
 306 021c 58       	pop %ax
 307 021d 07       		pop %es                          
 308 021e 1F       		pop %ds                          
 309 021f 2EA10000 	   mov %cs:int10_reg_bx, %ax        
 310 0223 88E7     	   mov %ah, %bh                     
 311 0225 2EA10000 	   mov %cs:int10_reg_ax, %ax        
 312 0229 CF       		iret                             
 313              	
 314              		int10_handler_asm_ah10:             
 315 022a E8FEFF   		call int10_handler_ah10                    
 316              	                                    
 317 022d 2E8B2600 	   mov %cs:int10_reg_sp, %sp        
 317      00
 318 0232 2E8E1600 	   mov %cs:int10_reg_ss, %ss        
 318      00
 319              	                                    
 320 0237 5F       	pop %di
 321 0238 5E       	pop %si
 322 0239 5D       	pop %bp
 323 023a 5B       	pop %bx
 324 023b 5B       	pop %bx
 325 023c 5A       	pop %dx
 326 023d 59       	pop %cx
 327 023e 58       	pop %ax
 328 023f 07       		pop %es                          
 329 0240 1F       		pop %ds                          
 330 0241 CF       		iret                             
 331              	
 332              		int10_handler_asm_ah11:             
 333 0242 E8FEFF   		call int10_handler_ah11                    
 334              	                                    
 335 0245 2E8B2600 	   mov %cs:int10_reg_sp, %sp        
 335      00
 336 024a 2E8E1600 	   mov %cs:int10_reg_ss, %ss        
 336      00
 337              	                                    
 338 024f 5F       	pop %di
 339 0250 5E       	pop %si
 340 0251 5D       	pop %bp
 341 0252 5B       	pop %bx
 342 0253 5B       	pop %bx
 343 0254 5A       	pop %dx
 344 0255 59       	pop %cx
 345 0256 58       	pop %ax
 346 0257 07       		pop %es                          
 347 0258 1F       		pop %ds                          
 348 0259 CF       		iret                             
 349              	
 350              		int10_handler_asm_ah12:             
 351 025a E8FEFF   		call int10_handler_ah12                    
 352              	                                    
 353 025d 2E8B2600 	   mov %cs:int10_reg_sp, %sp        
 353      00
 354 0262 2E8E1600 	   mov %cs:int10_reg_ss, %ss        
 354      00
 355              	                                    
 356 0267 5F       	pop %di
 357 0268 5E       	pop %si
 358 0269 5D       	pop %bp
 359 026a 5B       	pop %bx
 360 026b 5B       	pop %bx
 361 026c 5A       	pop %dx
 362 026d 59       	pop %cx
 363 026e 58       	pop %ax
 364 026f 07       		pop %es                          
 365 0270 1F       		pop %ds                          
 366 0271 2EA10000 	   mov %cs:int10_reg_ax, %ax        
 367 0275 2E8B1E00 	   mov %cs:int10_reg_bx, %bx        
 367      00
 368 027a 2E8B0E00 	   mov %cs:int10_reg_cx, %cx        
 368      00
 369 027f CF       		iret                             
 370              	
 371              		int10_handler_asm_ah1a:             
 372 0280 E8FEFF   		call int10_handler_ah1a                    
 373              	                                    
 374 0283 2E8B2600 	   mov %cs:int10_reg_sp, %sp        
 374      00
 375 0288 2E8E1600 	   mov %cs:int10_reg_ss, %ss        
 375      00
 376              	                                    
 377 028d 5F       	pop %di
 378 028e 5E       	pop %si
 379 028f 5D       	pop %bp
 380 0290 5B       	pop %bx
 381 0291 5B       	pop %bx
 382 0292 5A       	pop %dx
 383 0293 59       	pop %cx
 384 0294 58       	pop %ax
 385 0295 07       		pop %es                          
 386 0296 1F       		pop %ds                          
 387 0297 2E8B1E00 	   mov %cs:int10_reg_bx, %bx        
 387      00
 388 029c CF       		iret                             
 389              	
 390              		int10_handler_asm_ahfe:             
 391 029d E8FEFF   		call int10_handler_ahfe                    
 392              	                                    
 393 02a0 2E8B2600 	   mov %cs:int10_reg_sp, %sp        
 393      00
 394 02a5 2E8E1600 	   mov %cs:int10_reg_ss, %ss        
 394      00
 395              	                                    
 396 02aa 5F       	pop %di
 397 02ab 5E       	pop %si
 398 02ac 5D       	pop %bp
 399 02ad 5B       	pop %bx
 400 02ae 5B       	pop %bx
 401 02af 5A       	pop %dx
 402 02b0 59       	pop %cx
 403 02b1 58       	pop %ax
 404 02b2 07       		pop %es                          
 405 02b3 1F       		pop %ds                          
 406 02b4 2E8E0600 	   mov %cs:int10_reg_es, %es        
 406      00
 407 02b9 BF0000   	   mov $0, %di                      
 408 02bc CF       		iret                             
 409              	
 410              		int10_handler_asm_ahff:             
 411 02bd E8FEFF   		call int10_handler_ahff                    
 412              	                                    
 413 02c0 2E8B2600 	   mov %cs:int10_reg_sp, %sp        
 413      00
 414 02c5 2E8E1600 	   mov %cs:int10_reg_ss, %ss        
 414      00
 415              	                                    
 416 02ca 5F       	pop %di
 417 02cb 5E       	pop %si
 418 02cc 5D       	pop %bp
 419 02cd 5B       	pop %bx
 420 02ce 5B       	pop %bx
 421 02cf 5A       	pop %dx
 422 02d0 59       	pop %cx
 423 02d1 58       	pop %ax
 424 02d2 07       		pop %es                          
 425 02d3 1F       		pop %ds                          
 426 02d4 CF       		iret                             
 427              	
 428              		.section	.rodata.str1.1,"aMS",@progbits,1
 429              	.LC0:
 430 0000 0A494E54 		.string	"\nINT 0x10\n"
 430      20307831 
 430      300A00
 431              	.LC1:
 432 000b 41583A20 		.string	"AX: %04x BX: %04x CX: %04x DX: %04x ES: %04x \n"
 432      25303478 
 432      2042583A 
 432      20253034 
 432      78204358 
 433              	#NO_APP
 434              		.text
 435              		.global	int10_default_handler
 437              	int10_default_handler:
 438 02d5 56       		pushw	%si
 439 02d6 57       		pushw	%di
 440 02d7 06       		pushw	%es
 441 02d8 55       		pushw	%bp
 442 02d9 89E5     		movw	%sp,	%bp
 443 02db 83C480   		addw	$-128,	%sp
 444 02de B80000   		movw	$.LC0,	%ax
 445 02e1 50       		pushw	%ax
 446 02e2 BF8000   		movw	$128,	%di
 447 02e5 57       		pushw	%di
 448 02e6 8D7680   		leaw	-128(%bp),	%si
 449 02e9 56       		pushw	%si
 450 02ea E8FEFF   		call	s_snprintf
 451 02ed 56       		pushw	%si
 452              	#APP
 453              	;# 246 "src/int10h.c" 1
   1              	/*
   2              	Implimentation of INT10h service routines.
   3              	
   4              	This implementation is a bit sloppy. A part of the reason is that this code considers a terminal 
   5              	as a output device and it is hard to emulate video related functionalities.
   6              	But it works for many applications.
   7              	*/
   8              	
   9              	#include <stdio.h>
  10              	#include "basicio.h"
  11              	
  12              	#include "terminal.h"
  13              	#include "system.h"
  14              	#include "asmfuncs.h"
  15              	#include "emu_interface.h"
  16              	#include "int10h.h"
  17              	#include "int16h.h"
  18              	
  19              	
  20              	unsigned int int10_reg_ax;
  21              	unsigned int int10_reg_bx;
  22              	unsigned int int10_reg_cx;
  23              	unsigned int int10_reg_dx;
  24              	unsigned int int10_reg_di;
  25              	unsigned int int10_reg_es;
  26              	
  27              	unsigned int int10_reg_sp;
  28              	unsigned int int10_reg_ss;
  29              	
  30              	unsigned int int10_reg_ss2;
  31              	
  32              	#define PUSHA \
  33              	"mov %ss, %cs:int10_reg_ss2\n" \
  34              	"push %ax\n" \
  35              	"push %cx\n" \
  36              	"push %dx\n" \
  37              	"push %bx\n" \
  38              	"push %cs:int10_reg_ss2\n" \
  39              	"push %bp\n" \
  40              	"push %si\n" \
  41              	"push %di\n"
  42              	
  43              	#define POPA \
  44              	"pop %di\n" \
  45              	"pop %si\n" \
  46              	"pop %bp\n" \
  47              	"pop %bx\n"  /* skip next 2 bytes of stack */ \
  48              	"pop %bx\n" \
  49              	"pop %dx\n" \
  50              	"pop %cx\n" \
  51              	"pop %ax\n" 
  52              	
  53              	
  54              	__asm__ (
  55              	"   .global int10_handler_asm        \n"
  56              	"int10_handler_asm:                  \n"
  57              	"	push %ds                         \n"
  58              	"	push %es                         \n"
  59              	PUSHA //"	pusha                            \n"
  60              	"                                    \n"
  61              	"   mov %ax, %cs:int10_reg_ax        \n"
  62              	"   mov %bx, %cs:int10_reg_bx        \n"
  63              	"   mov %cx, %cs:int10_reg_cx        \n"
  64              	"   mov %dx, %cs:int10_reg_dx        \n"
  65              	"   mov %di, %cs:int10_reg_di        \n"
  66              	"   mov %es, %cs:int10_reg_es        \n"
  67              	"   mov %sp, %cs:int10_reg_sp        \n"
  68              	"   mov %ss, %cs:int10_reg_ss        \n"
  69              	"                                    \n"
  70              	"	mov	%cs, %ax                     \n"
  71              	"	mov	%ax, %ss                     \n"
  72              	"	mov	%ax, %ds                     \n"
  73              	"	mov	$0xffff, %ax                 \n"
  74              	"	mov	%ax, %sp                     \n"
  75              	"                                    \n"
  76              	"   mov int10_reg_ax, %ax            \n"
  77              	"	cmp	$0x00, %ah                   \n"
  78              	"	je	int10_handler_asm_ah00       \n"
  79              	"	cmp	$0x01, %ah                   \n"
  80              	"	je	int10_handler_asm_ah01       \n"
  81              	"	cmp	$0x02, %ah                   \n"
  82              	"	je	int10_handler_asm_ah02       \n"
  83              	"	cmp	$0x03, %ah                   \n"
  84              	"	je	int10_handler_asm_ah03       \n"
  85              	"	cmp	$0x05, %ah                   \n"
  86              	"	je	int10_handler_asm_ah05       \n"
  87              	"	cmp	$0x06, %ah                   \n"
  88              	"	je	int10_handler_asm_ah06       \n"
  89              	"	cmp	$0x07, %ah                   \n"
  90              	"	je	int10_handler_asm_ah07       \n"
  91              	"	cmp	$0x08, %ah                   \n"
  92              	"	je	int10_handler_asm_ah08       \n"
  93              	"	cmp	$0x09, %ah                   \n"
  94              	"	je	int10_handler_asm_ah09       \n"
  95              	"	cmp	$0x0a, %ah                   \n"
  96              	"	je	int10_handler_asm_ah0a       \n"
  97              	"	cmp	$0x0e, %ah                   \n"
  98              	"	je	int10_handler_asm_ah0e       \n"
  99              	"	cmp	$0x0f, %ah                   \n"
 100              	"	je	int10_handler_asm_ah0f       \n"
 101              	"	cmp	$0x10, %ah                   \n"
 102              	"	je	int10_handler_asm_ah10       \n"
 103              	"	cmp	$0x11, %ah                   \n"
 104              	"	je	int10_handler_asm_ah11       \n"
 105              	"	cmp	$0x12, %ah                   \n"
 106              	"	je	int10_handler_asm_ah12       \n"
 107              	"	cmp	$0x1a, %ah                   \n"
 108              	"	je	int10_handler_asm_ah1a       \n"
 109              	"	cmp	$0xfe, %ah                   \n"
 110              	"	je	int10_handler_asm_ahfe       \n"
 111              	"	cmp	$0xff, %ah                   \n"
 112              	"	je	int10_handler_asm_ahff       \n"
 113              	"                                    \n"
 114              	"	call int10_default_handler       \n"
 115              	"                                    \n"
 116              	"   mov %cs:int10_reg_sp, %ax        \n"
 117              	"   mov %ax, %sp                     \n"
 118              	"   mov %cs:int10_reg_ss, %ax        \n"
 119              	"   mov %ax, %ss                     \n"
 120              	"                                    \n"
 121              	POPA /*"	popa                             \n"*/
 122              	"	pop %es                          \n"
 123              	"	pop %ds                          \n"
 124              	"	iret                             \n");
 125              	
 126              	#define HEAD_OF_ASM_HANDLER(func)  \
 127              	"	call " func "                    \n" \
 128              	"                                    \n" \
 129              	"   mov %cs:int10_reg_sp, %sp        \n" \
 130              	"   mov %cs:int10_reg_ss, %ss        \n" \
 131              	"                                    \n" \
 132              	POPA/* "	popa                             \n"*/ \
 133              	"	pop %es                          \n" \
 134              	"	pop %ds                          \n" 
 135              	
 136              	
 137              	__asm__ (
 138              	"int10_handler_asm_ah00:             \n"
 139              	HEAD_OF_ASM_HANDLER("int10_handler_ah00")
 140              	"	iret                             \n");
 141              	
 142              	__asm__ (
 143              	"int10_handler_asm_ah01:             \n"
 144              	HEAD_OF_ASM_HANDLER("int10_handler_ah01")
 145              	"	iret                             \n");
 146              	
 147              	__asm__ (
 148              	"int10_handler_asm_ah02:             \n"
 149              	HEAD_OF_ASM_HANDLER("int10_handler_ah02")
 150              	"	iret                             \n");
 151              	
 152              	__asm__ (
 153              	"int10_handler_asm_ah03:             \n"
 154              	HEAD_OF_ASM_HANDLER("int10_handler_ah03")
 155              	"   mov %cs:int10_reg_cx, %cx        \n"
 156              	"   mov %cs:int10_reg_dx, %dx        \n"
 157              	"	iret                             \n");
 158              	
 159              	__asm__ (
 160              	"int10_handler_asm_ah05:             \n"
 161              	HEAD_OF_ASM_HANDLER("int10_handler_ah05")
 162              	"	iret                             \n");
 163              	
 164              	__asm__ (
 165              	"int10_handler_asm_ah06:             \n"
 166              	HEAD_OF_ASM_HANDLER("int10_handler_ah06")
 167              	"	iret                             \n");
 168              	
 169              	__asm__ (
 170              	"int10_handler_asm_ah07:             \n"
 171              	HEAD_OF_ASM_HANDLER("int10_handler_ah07")
 172              	"	iret                             \n");
 173              	
 174              	__asm__ (
 175              	"int10_handler_asm_ah08:             \n"
 176              	HEAD_OF_ASM_HANDLER("int10_handler_ah08")
 177              	"   mov %cs:int10_reg_ax, %ax        \n"
 178              	"	iret                             \n");
 179              	
 180              	__asm__ (
 181              	"int10_handler_asm_ah09:             \n"
 182              	HEAD_OF_ASM_HANDLER("int10_handler_ah09")
 183              	"	iret                             \n");
 184              	
 185              	__asm__ (
 186              	"int10_handler_asm_ah0a:             \n"
 187              	HEAD_OF_ASM_HANDLER("int10_handler_ah0a")
 188              	"	iret                             \n");
 189              	
 190              	__asm__ (
 191              	"int10_handler_asm_ah0e:             \n"
 192              	HEAD_OF_ASM_HANDLER("int10_handler_ah0e")
 193              	"	iret                             \n");
 194              	
 195              	__asm__ (
 196              	"int10_handler_asm_ah0f:             \n"
 197              	HEAD_OF_ASM_HANDLER("int10_handler_ah0f")
 198              	"   mov %cs:int10_reg_bx, %ax        \n"
 199              	"   mov %ah, %bh                     \n"
 200              	"   mov %cs:int10_reg_ax, %ax        \n"
 201              	"	iret                             \n");
 202              	
 203              	__asm__ (
 204              	"int10_handler_asm_ah10:             \n"
 205              	HEAD_OF_ASM_HANDLER("int10_handler_ah10")
 206              	"	iret                             \n");
 207              	
 208              	__asm__ (
 209              	"int10_handler_asm_ah11:             \n"
 210              	HEAD_OF_ASM_HANDLER("int10_handler_ah11")
 211              	"	iret                             \n");
 212              	
 213              	__asm__ (
 214              	"int10_handler_asm_ah12:             \n"
 215              	HEAD_OF_ASM_HANDLER("int10_handler_ah12")
 216              	"   mov %cs:int10_reg_ax, %ax        \n"
 217              	"   mov %cs:int10_reg_bx, %bx        \n"
 218              	"   mov %cs:int10_reg_cx, %cx        \n"
 219              	"	iret                             \n");
 220              	
 221              	
 222              	__asm__ (
 223              	"int10_handler_asm_ah1a:             \n"
 224              	HEAD_OF_ASM_HANDLER("int10_handler_ah1a")
 225              	"   mov %cs:int10_reg_bx, %bx        \n"
 226              	"	iret                             \n");
 227              	
 228              	
 229              	__asm__ (
 230              	"int10_handler_asm_ahfe:             \n"
 231              	HEAD_OF_ASM_HANDLER("int10_handler_ahfe")
 232              	"   mov %cs:int10_reg_es, %es        \n"
 233              	"   mov $0, %di                      \n"
 234              	"	iret                             \n");
 235              	
 236              	__asm__ (
 237              	"int10_handler_asm_ahff:             \n"
 238              	HEAD_OF_ASM_HANDLER("int10_handler_ahff")
 239              	"	iret                             \n");
 240              	
 241              	
 242              	void int10_default_handler(void){
 243              	    char buf[128];
 244              		unsigned int reg_ss;
 245              	
 246 02ee 8CD0     	    asm volatile("mov  %%ss, %w0" : "=a"(reg_ss) : );
 247              	
 454              		mov  %ss, %ax
 455              	;# 0 "" 2
 456              	#NO_APP
 457 02f0 8EC0     		movw	%ax,	%es
 458 02f2 50       		pushw	%ax
 459 02f3 E8FEFF   		call	emuLogMessage
 460 02f6 FF360000 		pushw	int10_reg_es
 461 02fa FF360000 		pushw	int10_reg_dx
 462 02fe FF360000 		pushw	int10_reg_cx
 463 0302 FF360000 		pushw	int10_reg_bx
 464 0306 FF360000 		pushw	int10_reg_ax
 465 030a B80B00   		movw	$.LC1,	%ax
 466 030d 50       		pushw	%ax
 467 030e 57       		pushw	%di
 468 030f 56       		pushw	%si
 469 0310 E8FEFF   		call	s_snprintf
 470 0313 56       		pushw	%si
 471 0314 06       		pushw	%es
 472 0315 E8FEFF   		call	emuLogMessage
 473 0318 89EC     		movw	%bp,	%sp
 474 031a 5D       		popw	%bp
 475 031b 07       		popw	%es
 476 031c 5F       		popw	%di
 477 031d 5E       		popw	%si
 478 031e C3       		ret
 480              		.global	set_cursorPosition
 482              	set_cursorPosition:
 483 031f 56       		pushw	%si
 484 0320 57       		pushw	%di
 485 0321 06       		pushw	%es
 486 0322 55       		pushw	%bp
 487 0323 89E5     		movw	%sp,	%bp
 488 0325 8A4E0C   		movb	12(%bp),	%cl
 489 0328 807E0A07 		cmpb	$7,	10(%bp)
 490 032c 773E     		ja	.L3
 491 032e 8A5E0A   		movb	10(%bp),	%bl
 492 0331 30FF     		xorb	%bh,	%bh
 493 0333 888F0000 		movb	%cl,	posx(%bx)
 494 0337 B80000   		movw	$posy,	%ax
 495 033a 8EC0     		movw	%ax,	%es
 496 033c 8A460E   		movb	14(%bp),	%al
 497 033f 8CC7     		movw	%es,	%di
 498 0341 8801     		movb	%al,	(%bx,%di)
 499 0343 89D8     		movw	%bx,	%ax
 500 0345 D1E0     		shlw	$1,	%ax
 501 0347 83C050   		addw	$80,	%ax
 502 034a 89C6     		movw	%ax,	%si
 503 034c 99       		cwtd
 504 034d F8       		clc
 505 034e 83D240   		adcw	$64,	%dx
 506 0351 8EDA     		movw	%dx,	%ds
 507 0353 89C7     		movw	%ax,	%di
 508 0355 880D     		movb	%cl,	(%di)
 509 0357 8CC7     		movw	%es,	%di
 510 0359 368A21   		movb	%ss:(%bx,%di),	%ah
 511 035c 8D5401   		leaw	1(%si),	%dx
 512 035f 31C9     		xorw	%cx,	%cx
 513 0361 01CA     		addw	%cx,	%dx
 514 0363 83D140   		adcw	$64,	%cx
 515 0366 8ED9     		movw	%cx,	%ds
 516 0368 89D3     		movw	%dx,	%bx
 517 036a 8827     		movb	%ah,	(%bx)
 518              	.L3:
 519 036c 5D       		popw	%bp
 520 036d 07       		popw	%es
 521 036e 5F       		popw	%di
 522 036f 5E       		popw	%si
 523 0370 16       		pushw	%ss
 524 0371 1F       		popw	%ds
 525 0372 C3       		ret
 527              		.global	int10_handler_ah00
 529              	int10_handler_ah00:
 530 0373 F6060000 		testb	$-128,	int10_reg_ax
 530      80
 531 0378 7403E9A3 		jne	.L15
 531      00
 532 037d 56       		pushw	%si
 533 037e 57       		pushw	%di
 534 037f 06       		pushw	%es
 535 0380 55       		pushw	%bp
 536 0381 89E5     		movw	%sp,	%bp
 537 0383 81ECA000 		subw	$160,	%sp
 538 0387 A00000   		movb	disp_page,	%al
 539 038a B108     		movb	$8,	%cl
 540 038c D3E0     		shlw	%cl,	%ax
 541 038e 80C4D0   		addb	$-48,	%ah
 542 0391 8EC0     		movw	%ax,	%es
 543 0393 8DB660FF 		leaw	-160(%bp),	%si
 544 0397 8D5C01   		leaw	1(%si),	%bx
 545 039a 8D4601   		leaw	1(%bp),	%ax
 546              	.L10:
 547 039d C60707   		movb	$7,	(%bx)
 548 03a0 C60420   		movb	$32,	(%si)
 549 03a3 83C602   		addw	$2,	%si
 550 03a6 83C302   		addw	$2,	%bx
 551 03a9 39C3     		cmpw	%ax,	%bx
 552 03ab 75F0     		jne	.L10
 553 03ad 31FF     		xorw	%di,	%di
 554              	.L11:
 555 03af B85000   		movw	$80,	%ax
 556 03b2 50       		pushw	%ax
 557 03b3 57       		pushw	%di
 558 03b4 06       		pushw	%es
 559 03b5 8DB660FF 		leaw	-160(%bp),	%si
 560 03b9 56       		pushw	%si
 561 03ba E8FEFF   		call	copy_data_word
 562 03bd B85000   		movw	$80,	%ax
 563 03c0 50       		pushw	%ax
 564 03c1 57       		pushw	%di
 565 03c2 B900B8   		movw	$-18432,	%cx
 566 03c5 51       		pushw	%cx
 567 03c6 56       		pushw	%si
 568 03c7 E8FEFF   		call	copy_data_word
 569 03ca 81C7A000 		addw	$160,	%di
 570 03ce 83C410   		addw	$16,	%sp
 571 03d1 81FFA00F 		cmpw	$4000,	%di
 572 03d5 75D8     		jne	.L11
 573 03d7 8A1E0000 		movb	disp_page,	%bl
 574 03db 30FF     		xorb	%bh,	%bh
 575 03dd C6870000 		movb	$0,	posy(%bx)
 575      00
 576 03e2 C6870000 		movb	$0,	posx(%bx)
 576      00
 577 03e7 89D9     		movw	%bx,	%cx
 578 03e9 D1E1     		shlw	$1,	%cx
 579 03eb 83C150   		addw	$80,	%cx
 580 03ee 89C8     		movw	%cx,	%ax
 581 03f0 99       		cwtd
 582 03f1 F8       		clc
 583 03f2 83D240   		adcw	$64,	%dx
 584 03f5 8EC2     		movw	%dx,	%es
 585 03f7 89C7     		movw	%ax,	%di
 586 03f9 26C60500 		movb	$0,	%es:(%di)
 587 03fd 8AA70000 		movb	posy(%bx),	%ah
 588 0401 89CA     		movw	%cx,	%dx
 589 0403 42       		incw	%dx
 590 0404 31DB     		xorw	%bx,	%bx
 591 0406 01DA     		addw	%bx,	%dx
 592 0408 89D9     		movw	%bx,	%cx
 593 040a 83D140   		adcw	$64,	%cx
 594 040d 8EC1     		movw	%cx,	%es
 595 040f 89D7     		movw	%dx,	%di
 596 0411 268825   		movb	%ah,	%es:(%di)
 597 0414 53       		pushw	%bx
 598 0415 53       		pushw	%bx
 599 0416 E8FEFF   		call	termGoTo
 600 0419 89EC     		movw	%bp,	%sp
 601 041b 5D       		popw	%bp
 602 041c 07       		popw	%es
 603 041d 5F       		popw	%di
 604 041e 5E       		popw	%si
 605 041f C3       		ret
 606              	.L15:
 607 0420 C3       		ret
 609              		.global	int10_handler_ah01
 611              	int10_handler_ah01:
 612 0421 C3       		ret
 614              		.global	int10_handler_ah02
 616              	int10_handler_ah02:
 617 0422 56       		pushw	%si
 618 0423 57       		pushw	%di
 619 0424 06       		pushw	%es
 620 0425 55       		pushw	%bp
 621 0426 89E5     		movw	%sp,	%bp
 622 0428 83EC02   		subw	$2,	%sp
 623 042b 8B1E0000 		movw	int10_reg_bx,	%bx
 624 042f B108     		movb	$8,	%cl
 625 0431 D3EB     		shrw	%cl,	%bx
 626 0433 83FB07   		cmpw	$7,	%bx
 627 0436 7603     		jbe	.L22
 628 0438 BB0700   		movw	$7,	%bx
 629              	.L22:
 630 043b A10000   		movw	int10_reg_dx,	%ax
 631 043e 89C2     		movw	%ax,	%dx
 632 0440 B108     		movb	$8,	%cl
 633 0442 D3EA     		shrw	%cl,	%dx
 634 0444 B90000   		movw	$posy,	%cx
 635 0447 8EC1     		movw	%cx,	%es
 636 0449 89CF     		movw	%cx,	%di
 637 044b 8811     		movb	%dl,	(%bx,%di)
 638 044d 88C1     		movb	%al,	%cl
 639 044f 3C4F     		cmpb	$79,	%al
 640 0451 7749     		ja	.L23
 641 0453 88870000 		movb	%al,	posx(%bx)
 642              	.L24:
 643 0457 83FA18   		cmpw	$24,	%dx
 644 045a 7605     		jbe	.L25
 645 045c C6870000 		movb	$24,	posy(%bx)
 645      18
 646              	.L25:
 647 0461 A00000   		movb	disp_page,	%al
 648 0464 30E4     		xorb	%ah,	%ah
 649 0466 39C3     		cmpw	%ax,	%bx
 650 0468 743B     		je	.L30
 651 046a 89D8     		movw	%bx,	%ax
 652 046c D1E0     		shlw	$1,	%ax
 653 046e 83C050   		addw	$80,	%ax
 654 0471 89C6     		movw	%ax,	%si
 655 0473 99       		cwtd
 656 0474 F8       		clc
 657 0475 83D240   		adcw	$64,	%dx
 658 0478 8EDA     		movw	%dx,	%ds
 659 047a 89C7     		movw	%ax,	%di
 660 047c 880D     		movb	%cl,	(%di)
 661 047e 8CC7     		movw	%es,	%di
 662 0480 368A21   		movb	%ss:(%bx,%di),	%ah
 663 0483 8D5401   		leaw	1(%si),	%dx
 664 0486 31C9     		xorw	%cx,	%cx
 665 0488 01CA     		addw	%cx,	%dx
 666 048a 83D140   		adcw	$64,	%cx
 667 048d 8ED9     		movw	%cx,	%ds
 668 048f 89D3     		movw	%dx,	%bx
 669 0491 8827     		movb	%ah,	(%bx)
 670 0493 89EC     		movw	%bp,	%sp
 671 0495 5D       		popw	%bp
 672 0496 07       		popw	%es
 673 0497 5F       		popw	%di
 674 0498 5E       		popw	%si
 675 0499 16       		pushw	%ss
 676 049a 1F       		popw	%ds
 677 049b C3       		ret
 678              	.L23:
 679 049c C6870000 		movb	$79,	posx(%bx)
 679      4F
 680 04a1 B14F     		movb	$79,	%cl
 681 04a3 EBB2     		jmp	.L24
 682              	.L30:
 683 04a5 8CC7     		movw	%es,	%di
 684 04a7 8A01     		movb	(%bx,%di),	%al
 685 04a9 895EFE   		movw	%bx,	-2(%bp)
 686 04ac 30E4     		xorb	%ah,	%ah
 687 04ae 40       		incw	%ax
 688 04af 50       		pushw	%ax
 689 04b0 88C8     		movb	%cl,	%al
 690 04b2 30E4     		xorb	%ah,	%ah
 691 04b4 40       		incw	%ax
 692 04b5 50       		pushw	%ax
 693 04b6 E8FEFF   		call	termGoTo
 694 04b9 8B5EFE   		movw	-2(%bp),	%bx
 695 04bc 8A8F0000 		movb	posx(%bx),	%cl
 696 04c0 83C404   		addw	$4,	%sp
 697 04c3 89D8     		movw	%bx,	%ax
 698 04c5 D1E0     		shlw	$1,	%ax
 699 04c7 83C050   		addw	$80,	%ax
 700 04ca 89C6     		movw	%ax,	%si
 701 04cc 99       		cwtd
 702 04cd F8       		clc
 703 04ce 83D240   		adcw	$64,	%dx
 704 04d1 8EDA     		movw	%dx,	%ds
 705 04d3 89C7     		movw	%ax,	%di
 706 04d5 880D     		movb	%cl,	(%di)
 707 04d7 8CC7     		movw	%es,	%di
 708 04d9 368A21   		movb	%ss:(%bx,%di),	%ah
 709 04dc 8D5401   		leaw	1(%si),	%dx
 710 04df 31C9     		xorw	%cx,	%cx
 711 04e1 01CA     		addw	%cx,	%dx
 712 04e3 83D140   		adcw	$64,	%cx
 713 04e6 8ED9     		movw	%cx,	%ds
 714 04e8 89D3     		movw	%dx,	%bx
 715 04ea 8827     		movb	%ah,	(%bx)
 716 04ec 89EC     		movw	%bp,	%sp
 717 04ee 5D       		popw	%bp
 718 04ef 07       		popw	%es
 719 04f0 5F       		popw	%di
 720 04f1 5E       		popw	%si
 721 04f2 16       		pushw	%ss
 722 04f3 1F       		popw	%ds
 723 04f4 C3       		ret
 725              		.global	int10_handler_ah03
 727              	int10_handler_ah03:
 728 04f5 8B1E0000 		movw	int10_reg_bx,	%bx
 729 04f9 B108     		movb	$8,	%cl
 730 04fb D3EB     		shrw	%cl,	%bx
 731 04fd 83FB07   		cmpw	$7,	%bx
 732 0500 7E03     		jle	.L32
 733 0502 BB0700   		movw	$7,	%bx
 734              	.L32:
 735 0505 C7060000 		movw	$1543,	int10_reg_cx
 735      0706
 736 050b 8A870000 		movb	posy(%bx),	%al
 737 050f B108     		movb	$8,	%cl
 738 0511 D3E0     		shlw	%cl,	%ax
 739 0513 8A970000 		movb	posx(%bx),	%dl
 740 0517 30F6     		xorb	%dh,	%dh
 741 0519 01D0     		addw	%dx,	%ax
 742 051b A30000   		movw	%ax,	int10_reg_dx
 743 051e C3       		ret
 745              		.global	int10_handler_ah05
 747              	int10_handler_ah05:
 748 051f 8B1E0000 		movw	int10_reg_ax,	%bx
 749 0523 B700     		movb	$0,	%bh
 750 0525 83FB07   		cmpw	$7,	%bx
 751 0528 7E03     		jle	.L36
 752 052a BB0700   		movw	$7,	%bx
 753              	.L36:
 754 052d 881E0000 		movb	%bl,	disp_page
 755 0531 8A870000 		movb	posy(%bx),	%al
 756 0535 30E4     		xorb	%ah,	%ah
 757 0537 40       		incw	%ax
 758 0538 50       		pushw	%ax
 759 0539 8A870000 		movb	posx(%bx),	%al
 760 053d 30E4     		xorb	%ah,	%ah
 761 053f 40       		incw	%ax
 762 0540 50       		pushw	%ax
 763 0541 E8FEFF   		call	termGoTo
 764 0544 83C404   		addw	$4,	%sp
 765 0547 C3       		ret
 767              		.global	int10_handler_ah06
 769              	int10_handler_ah06:
 770 0548 56       		pushw	%si
 771 0549 57       		pushw	%di
 772 054a 06       		pushw	%es
 773 054b 55       		pushw	%bp
 774 054c 89E5     		movw	%sp,	%bp
 775 054e 81ECB400 		subw	$180,	%sp
 776 0552 8B360000 		movw	int10_reg_cx,	%si
 777 0556 89F0     		movw	%si,	%ax
 778 0558 B108     		movb	$8,	%cl
 779 055a D3E8     		shrw	%cl,	%ax
 780 055c 898650FF 		movw	%ax,	-176(%bp)
 781 0560 81E6FF00 		andw	$255,	%si
 782 0564 89B64EFF 		movw	%si,	-178(%bp)
 783 0568 A10000   		movw	int10_reg_dx,	%ax
 784 056b 89C2     		movw	%ax,	%dx
 785 056d 30F6     		xorb	%dh,	%dh
 786 056f D3E8     		shrw	%cl,	%ax
 787 0571 89865AFF 		movw	%ax,	-166(%bp)
 788 0575 83F818   		cmpw	$24,	%ax
 789 0578 7606     		jbe	.L40
 790 057a C7865AFF 		movw	$24,	-166(%bp)
 790      1800
 791              	.L40:
 792 0580 899652FF 		movw	%dx,	-174(%bp)
 793 0584 83FA4F   		cmpw	$79,	%dx
 794 0587 7E06     		jle	.L41
 795 0589 C78652FF 		movw	$79,	-174(%bp)
 795      4F00
 796              	.L41:
 797 058f B401     		movb	$1,	%ah
 798 0591 8B964EFF 		movw	-178(%bp),	%dx
 799 0595 3B9652FF 		cmpw	-174(%bp),	%dx
 800 0599 7F02     		jg	.L43
 801 059b 30E4     		xorb	%ah,	%ah
 802              	.L43:
 803 059d B001     		movb	$1,	%al
 804 059f 8B965AFF 		movw	-166(%bp),	%dx
 805 05a3 3B9650FF 		cmpw	-176(%bp),	%dx
 806 05a7 7C02     		jl	.L44
 807 05a9 30C0     		xorb	%al,	%al
 808              	.L44:
 809 05ab 08C4     		orb	%al,	%ah
 810 05ad 7403E97F 		jne	.L39
 810      01
 811 05b2 A10000   		movw	int10_reg_ax,	%ax
 812 05b5 25FF00   		andw	$255,	%ax
 813 05b8 7503     		jne	.L45
 814 05ba B81900   		movw	$25,	%ax
 815              	.L45:
 816 05bd B601     		movb	$1,	%dh
 817 05bf 8B8E4EFF 		movw	-178(%bp),	%cx
 818 05c3 3B8E52FF 		cmpw	-174(%bp),	%cx
 819 05c7 7E03E977 		jg	.L66
 819      01
 820 05cc B201     		movb	$1,	%dl
 821 05ce 8B8E5AFF 		movw	-166(%bp),	%cx
 822 05d2 3B8E50FF 		cmpw	-176(%bp),	%cx
 823 05d6 7D03E95D 		jl	.L67
 823      01
 824              	.L47:
 825 05db 84D6     		testb	%dl,	%dh
 826 05dd 7503E94F 		je	.L39
 826      01
 827              	.L69:
 828 05e2 8B160000 		movw	int10_reg_bx,	%dx
 829 05e6 89964CFF 		movw	%dx,	-180(%bp)
 830 05ea 8A160000 		movb	disp_page,	%dl
 831 05ee B108     		movb	$8,	%cl
 832 05f0 D3E2     		shlw	%cl,	%dx
 833 05f2 80C6D0   		addb	$-48,	%dh
 834 05f5 89965CFF 		movw	%dx,	-164(%bp)
 835 05f9 8B965AFF 		movw	-166(%bp),	%dx
 836 05fd 29C2     		subw	%ax,	%dx
 837 05ff 899656FF 		movw	%dx,	-170(%bp)
 838 0603 399650FF 		cmpw	%dx,	-176(%bp)
 839 0607 7E03E98D 		jg	.L51
 839      00
 840 060c 8B9652FF 		movw	-174(%bp),	%dx
 841 0610 8B9E4EFF 		movw	-178(%bp),	%bx
 842 0614 29DA     		subw	%bx,	%dx
 843 0616 42       		incw	%dx
 844 0617 8EC2     		movw	%dx,	%es
 845 0619 8B8E50FF 		movw	-176(%bp),	%cx
 846 061d 89CF     		movw	%cx,	%di
 847 061f D1E7     		shlw	$1,	%di
 848 0621 D1E7     		shlw	$1,	%di
 849 0623 01CF     		addw	%cx,	%di
 850 0625 D1E7     		shlw	$1,	%di
 851 0627 D1E7     		shlw	$1,	%di
 852 0629 D1E7     		shlw	$1,	%di
 853 062b D1E7     		shlw	$1,	%di
 854 062d 01DF     		addw	%bx,	%di
 855 062f D1E7     		shlw	$1,	%di
 856 0631 89C2     		movw	%ax,	%dx
 857 0633 D1E2     		shlw	$1,	%dx
 858 0635 D1E2     		shlw	$1,	%dx
 859 0637 01D0     		addw	%dx,	%ax
 860 0639 D1E0     		shlw	$1,	%ax
 861 063b D1E0     		shlw	$1,	%ax
 862 063d D1E0     		shlw	$1,	%ax
 863 063f D1E0     		shlw	$1,	%ax
 864 0641 D1E0     		shlw	$1,	%ax
 865 0643 898654FF 		movw	%ax,	-172(%bp)
 866 0647 89C8     		movw	%cx,	%ax
 867              	.L50:
 868 0649 898658FF 		movw	%ax,	-168(%bp)
 869 064d 8B9654FF 		movw	-172(%bp),	%dx
 870 0651 01FA     		addw	%di,	%dx
 871 0653 06       		pushw	%es
 872 0654 8DB660FF 		leaw	-160(%bp),	%si
 873 0658 56       		pushw	%si
 874 0659 52       		pushw	%dx
 875 065a 89965EFF 		movw	%dx,	-162(%bp)
 876 065e FFB65CFF 		pushw	-164(%bp)
 877 0662 E8FEFF   		call	fetch_data_word
 878 0665 06       		pushw	%es
 879 0666 57       		pushw	%di
 880 0667 FFB65CFF 		pushw	-164(%bp)
 881 066b 56       		pushw	%si
 882 066c E8FEFF   		call	copy_data_word
 883 066f 06       		pushw	%es
 884 0670 56       		pushw	%si
 885 0671 8B965EFF 		movw	-162(%bp),	%dx
 886 0675 52       		pushw	%dx
 887 0676 B800B8   		movw	$-18432,	%ax
 888 0679 50       		pushw	%ax
 889 067a E8FEFF   		call	fetch_data_word
 890 067d 06       		pushw	%es
 891 067e 57       		pushw	%di
 892 067f B800B8   		movw	$-18432,	%ax
 893 0682 50       		pushw	%ax
 894 0683 56       		pushw	%si
 895 0684 E8FEFF   		call	copy_data_word
 896 0687 8B8658FF 		movw	-168(%bp),	%ax
 897 068b 40       		incw	%ax
 898 068c 81C7A000 		addw	$160,	%di
 899 0690 83C420   		addw	$32,	%sp
 900 0693 3B8656FF 		cmpw	-170(%bp),	%ax
 901 0697 7EB0     		jle	.L50
 902              	.L51:
 903 0699 8B864CFF 		movw	-180(%bp),	%ax
 904 069d B108     		movb	$8,	%cl
 905 069f D3E8     		shrw	%cl,	%ax
 906 06a1 89865EFF 		movw	%ax,	-162(%bp)
 907 06a5 8DB660FF 		leaw	-160(%bp),	%si
 908 06a9 8D5C01   		leaw	1(%si),	%bx
 909 06ac 8D4601   		leaw	1(%bp),	%ax
 910              	.L49:
 911 06af 8A965EFF 		movb	-162(%bp),	%dl
 912 06b3 8817     		movb	%dl,	(%bx)
 913 06b5 C60420   		movb	$32,	(%si)
 914 06b8 83C602   		addw	$2,	%si
 915 06bb 83C302   		addw	$2,	%bx
 916 06be 39D8     		cmpw	%bx,	%ax
 917 06c0 75ED     		jne	.L49
 918 06c2 8B8656FF 		movw	-170(%bp),	%ax
 919 06c6 40       		incw	%ax
 920 06c7 8B9650FF 		movw	-176(%bp),	%dx
 921 06cb 39D0     		cmpw	%dx,	%ax
 922 06cd 7D03E984 		jl	.L68
 922      00
 923              	.L52:
 924 06d2 39865AFF 		cmpw	%ax,	-166(%bp)
 925 06d6 7C59     		jl	.L39
 926 06d8 8B9652FF 		movw	-174(%bp),	%dx
 927 06dc 8B8E4EFF 		movw	-178(%bp),	%cx
 928 06e0 29CA     		subw	%cx,	%dx
 929 06e2 42       		incw	%dx
 930 06e3 89965EFF 		movw	%dx,	-162(%bp)
 931 06e7 89C6     		movw	%ax,	%si
 932 06e9 D1E6     		shlw	$1,	%si
 933 06eb D1E6     		shlw	$1,	%si
 934 06ed 01C6     		addw	%ax,	%si
 935 06ef D1E6     		shlw	$1,	%si
 936 06f1 D1E6     		shlw	$1,	%si
 937 06f3 D1E6     		shlw	$1,	%si
 938 06f5 D1E6     		shlw	$1,	%si
 939 06f7 01CE     		addw	%cx,	%si
 940 06f9 D1E6     		shlw	$1,	%si
 941 06fb BA00B8   		movw	$-18432,	%dx
 942 06fe 8EC2     		movw	%dx,	%es
 943              	.L54:
 944 0700 898658FF 		movw	%ax,	-168(%bp)
 945 0704 FFB65EFF 		pushw	-162(%bp)
 946 0708 56       		pushw	%si
 947 0709 FFB65CFF 		pushw	-164(%bp)
 948 070d 8DBE60FF 		leaw	-160(%bp),	%di
 949 0711 57       		pushw	%di
 950 0712 E8FEFF   		call	copy_data_word
 951 0715 FFB65EFF 		pushw	-162(%bp)
 952 0719 56       		pushw	%si
 953 071a 06       		pushw	%es
 954 071b 57       		pushw	%di
 955 071c E8FEFF   		call	copy_data_word
 956 071f 8B8658FF 		movw	-168(%bp),	%ax
 957 0723 40       		incw	%ax
 958 0724 81C6A000 		addw	$160,	%si
 959 0728 83C410   		addw	$16,	%sp
 960 072b 39865AFF 		cmpw	%ax,	-166(%bp)
 961 072f 7DCF     		jge	.L54
 962              	.L39:
 963 0731 89EC     		movw	%bp,	%sp
 964 0733 5D       		popw	%bp
 965 0734 07       		popw	%es
 966 0735 5F       		popw	%di
 967 0736 5E       		popw	%si
 968 0737 C3       		ret
 969              	.L67:
 970 0738 30D2     		xorb	%dl,	%dl
 971 073a 84D6     		testb	%dl,	%dh
 972 073c 7403E9A1 		jne	.L69
 972      FE
 973 0741 EBEE     		jmp	.L39
 974              	.L66:
 975 0743 30F6     		xorb	%dh,	%dh
 976 0745 B201     		movb	$1,	%dl
 977 0747 8B8E5AFF 		movw	-166(%bp),	%cx
 978 074b 3B8E50FF 		cmpw	-176(%bp),	%cx
 979 074f 7C03E987 		jge	.L47
 979      FE
 980 0754 EBE2     		jmp	.L67
 981              	.L68:
 982 0756 89D0     		movw	%dx,	%ax
 983 0758 E977FF   		jmp	.L52
 985              		.global	int10_handler_ah07
 987              	int10_handler_ah07:
 988 075b 56       		pushw	%si
 989 075c 57       		pushw	%di
 990 075d 06       		pushw	%es
 991 075e 55       		pushw	%bp
 992 075f 89E5     		movw	%sp,	%bp
 993 0761 81ECB400 		subw	$180,	%sp
 994 0765 8B360000 		movw	int10_reg_cx,	%si
 995 0769 89F0     		movw	%si,	%ax
 996 076b B108     		movb	$8,	%cl
 997 076d D3E8     		shrw	%cl,	%ax
 998 076f 898650FF 		movw	%ax,	-176(%bp)
 999 0773 81E6FF00 		andw	$255,	%si
 1000 0777 89B64EFF 		movw	%si,	-178(%bp)
 1001 077b A10000   		movw	int10_reg_dx,	%ax
 1002 077e 89C2     		movw	%ax,	%dx
 1003 0780 30F6     		xorb	%dh,	%dh
 1004 0782 D3E8     		shrw	%cl,	%ax
 1005 0784 898656FF 		movw	%ax,	-170(%bp)
 1006 0788 83F818   		cmpw	$24,	%ax
 1007 078b 7606     		jbe	.L71
 1008 078d C78656FF 		movw	$24,	-170(%bp)
 1008      1800
 1009              	.L71:
 1010 0793 899652FF 		movw	%dx,	-174(%bp)
 1011 0797 83FA4F   		cmpw	$79,	%dx
 1012 079a 7E06     		jle	.L72
 1013 079c C78652FF 		movw	$79,	-174(%bp)
 1013      4F00
 1014              	.L72:
 1015 07a2 B401     		movb	$1,	%ah
 1016 07a4 8B964EFF 		movw	-178(%bp),	%dx
 1017 07a8 3B9652FF 		cmpw	-174(%bp),	%dx
 1018 07ac 7F02     		jg	.L74
 1019 07ae 30E4     		xorb	%ah,	%ah
 1020              	.L74:
 1021 07b0 B001     		movb	$1,	%al
 1022 07b2 8B9656FF 		movw	-170(%bp),	%dx
 1023 07b6 3B9650FF 		cmpw	-176(%bp),	%dx
 1024 07ba 7C02     		jl	.L75
 1025 07bc 30C0     		xorb	%al,	%al
 1026              	.L75:
 1027 07be 08C4     		orb	%al,	%ah
 1028 07c0 7403E993 		jne	.L70
 1028      01
 1029 07c5 8B0E0000 		movw	int10_reg_ax,	%cx
 1030 07c9 81E1FF00 		andw	$255,	%cx
 1031 07cd 89CE     		movw	%cx,	%si
 1032 07cf 7503     		jne	.L76
 1033 07d1 BE1900   		movw	$25,	%si
 1034              	.L76:
 1035 07d4 B401     		movb	$1,	%ah
 1036 07d6 8B964EFF 		movw	-178(%bp),	%dx
 1037 07da 3B9652FF 		cmpw	-174(%bp),	%dx
 1038 07de 7E03E987 		jg	.L97
 1038      01
 1039 07e3 B001     		movb	$1,	%al
 1040 07e5 8B9656FF 		movw	-170(%bp),	%dx
 1041 07e9 3B9650FF 		cmpw	-176(%bp),	%dx
 1042 07ed 7D03E96D 		jl	.L98
 1042      01
 1043              	.L78:
 1044 07f2 84C4     		testb	%al,	%ah
 1045 07f4 7503E95F 		je	.L70
 1045      01
 1046              	.L100:
 1047 07f9 A10000   		movw	int10_reg_bx,	%ax
 1048 07fc 89864CFF 		movw	%ax,	-180(%bp)
 1049 0800 A00000   		movb	disp_page,	%al
 1050 0803 B108     		movb	$8,	%cl
 1051 0805 D3E0     		shlw	%cl,	%ax
 1052 0807 80C4D0   		addb	$-48,	%ah
 1053 080a 89865CFF 		movw	%ax,	-164(%bp)
 1054 080e 8B8650FF 		movw	-176(%bp),	%ax
 1055 0812 01F0     		addw	%si,	%ax
 1056 0814 898658FF 		movw	%ax,	-168(%bp)
 1057 0818 398656FF 		cmpw	%ax,	-170(%bp)
 1058 081c 7D03E995 		jl	.L82
 1058      00
 1059 0821 8B8652FF 		movw	-174(%bp),	%ax
 1060 0825 8B8E4EFF 		movw	-178(%bp),	%cx
 1061 0829 29C8     		subw	%cx,	%ax
 1062 082b 40       		incw	%ax
 1063 082c 8EC0     		movw	%ax,	%es
 1064 082e 8B9E56FF 		movw	-170(%bp),	%bx
 1065 0832 89DA     		movw	%bx,	%dx
 1066 0834 29F2     		subw	%si,	%dx
 1067 0836 89D0     		movw	%dx,	%ax
 1068 0838 D1E0     		shlw	$1,	%ax
 1069 083a D1E0     		shlw	$1,	%ax
 1070 083c 01D0     		addw	%dx,	%ax
 1071 083e D1E0     		shlw	$1,	%ax
 1072 0840 D1E0     		shlw	$1,	%ax
 1073 0842 D1E0     		shlw	$1,	%ax
 1074 0844 D1E0     		shlw	$1,	%ax
 1075 0846 01C8     		addw	%cx,	%ax
 1076 0848 89C7     		movw	%ax,	%di
 1077 084a D1E7     		shlw	$1,	%di
 1078 084c 89F0     		movw	%si,	%ax
 1079 084e D1E0     		shlw	$1,	%ax
 1080 0850 D1E0     		shlw	$1,	%ax
 1081 0852 89F1     		movw	%si,	%cx
 1082 0854 01C1     		addw	%ax,	%cx
 1083 0856 D1E1     		shlw	$1,	%cx
 1084 0858 D1E1     		shlw	$1,	%cx
 1085 085a D1E1     		shlw	$1,	%cx
 1086 085c D1E1     		shlw	$1,	%cx
 1087 085e D1E1     		shlw	$1,	%cx
 1088 0860 898E54FF 		movw	%cx,	-172(%bp)
 1089 0864 89D8     		movw	%bx,	%ax
 1090              	.L81:
 1091 0866 89865AFF 		movw	%ax,	-166(%bp)
 1092 086a 06       		pushw	%es
 1093 086b 8DB660FF 		leaw	-160(%bp),	%si
 1094 086f 56       		pushw	%si
 1095 0870 57       		pushw	%di
 1096 0871 FFB65CFF 		pushw	-164(%bp)
 1097 0875 E8FEFF   		call	fetch_data_word
 1098 0878 8B9654FF 		movw	-172(%bp),	%dx
 1099 087c 01FA     		addw	%di,	%dx
 1100 087e 06       		pushw	%es
 1101 087f 52       		pushw	%dx
 1102 0880 89965EFF 		movw	%dx,	-162(%bp)
 1103 0884 FFB65CFF 		pushw	-164(%bp)
 1104 0888 56       		pushw	%si
 1105 0889 E8FEFF   		call	copy_data_word
 1106 088c 06       		pushw	%es
 1107 088d 56       		pushw	%si
 1108 088e 57       		pushw	%di
 1109 088f B800B8   		movw	$-18432,	%ax
 1110 0892 50       		pushw	%ax
 1111 0893 E8FEFF   		call	fetch_data_word
 1112 0896 06       		pushw	%es
 1113 0897 8B965EFF 		movw	-162(%bp),	%dx
 1114 089b 52       		pushw	%dx
 1115 089c B800B8   		movw	$-18432,	%ax
 1116 089f 50       		pushw	%ax
 1117 08a0 56       		pushw	%si
 1118 08a1 E8FEFF   		call	copy_data_word
 1119 08a4 8B865AFF 		movw	-166(%bp),	%ax
 1120 08a8 48       		decw	%ax
 1121 08a9 81C760FF 		addw	$-160,	%di
 1122 08ad 83C420   		addw	$32,	%sp
 1123 08b0 3B8658FF 		cmpw	-168(%bp),	%ax
 1124 08b4 7DB0     		jge	.L81
 1125              	.L82:
 1126 08b6 8B864CFF 		movw	-180(%bp),	%ax
 1127 08ba B108     		movb	$8,	%cl
 1128 08bc D3E8     		shrw	%cl,	%ax
 1129 08be 89865EFF 		movw	%ax,	-162(%bp)
 1130 08c2 8DB660FF 		leaw	-160(%bp),	%si
 1131 08c6 8D5C01   		leaw	1(%si),	%bx
 1132 08c9 8D4601   		leaw	1(%bp),	%ax
 1133              	.L80:
 1134 08cc 8A965EFF 		movb	-162(%bp),	%dl
 1135 08d0 8817     		movb	%dl,	(%bx)
 1136 08d2 C60420   		movb	$32,	(%si)
 1137 08d5 83C602   		addw	$2,	%si
 1138 08d8 83C302   		addw	$2,	%bx
 1139 08db 39D8     		cmpw	%bx,	%ax
 1140 08dd 75ED     		jne	.L80
 1141 08df 8B8658FF 		movw	-168(%bp),	%ax
 1142 08e3 48       		decw	%ax
 1143 08e4 898658FF 		movw	%ax,	-168(%bp)
 1144 08e8 8B9656FF 		movw	-170(%bp),	%dx
 1145 08ec 39D0     		cmpw	%dx,	%ax
 1146 08ee 7E03E98A 		jg	.L99
 1146      00
 1147              	.L83:
 1148 08f3 8BB650FF 		movw	-176(%bp),	%si
 1149 08f7 3BB658FF 		cmpw	-168(%bp),	%si
 1150 08fb 7F5B     		jg	.L70
 1151 08fd 8B8652FF 		movw	-174(%bp),	%ax
 1152 0901 8B964EFF 		movw	-178(%bp),	%dx
 1153 0905 29D0     		subw	%dx,	%ax
 1154 0907 40       		incw	%ax
 1155 0908 89865EFF 		movw	%ax,	-162(%bp)
 1156 090c 89F0     		movw	%si,	%ax
 1157 090e D1E6     		shlw	$1,	%si
 1158 0910 D1E6     		shlw	$1,	%si
 1159 0912 01C6     		addw	%ax,	%si
 1160 0914 D1E6     		shlw	$1,	%si
 1161 0916 D1E6     		shlw	$1,	%si
 1162 0918 D1E6     		shlw	$1,	%si
 1163 091a D1E6     		shlw	$1,	%si
 1164 091c 01D6     		addw	%dx,	%si
 1165 091e D1E6     		shlw	$1,	%si
 1166 0920 BA00B8   		movw	$-18432,	%dx
 1167 0923 8EC2     		movw	%dx,	%es
 1168 0925 89C7     		movw	%ax,	%di
 1169              	.L85:
 1170 0927 FFB65EFF 		pushw	-162(%bp)
 1171 092b 56       		pushw	%si
 1172 092c FFB65CFF 		pushw	-164(%bp)
 1173 0930 8D9660FF 		leaw	-160(%bp),	%dx
 1174 0934 52       		pushw	%dx
 1175 0935 89965AFF 		movw	%dx,	-166(%bp)
 1176 0939 E8FEFF   		call	copy_data_word
 1177 093c FFB65EFF 		pushw	-162(%bp)
 1178 0940 56       		pushw	%si
 1179 0941 06       		pushw	%es
 1180 0942 8B965AFF 		movw	-166(%bp),	%dx
 1181 0946 52       		pushw	%dx
 1182 0947 E8FEFF   		call	copy_data_word
 1183 094a 47       		incw	%di
 1184 094b 81C6A000 		addw	$160,	%si
 1185 094f 83C410   		addw	$16,	%sp
 1186 0952 3BBE58FF 		cmpw	-168(%bp),	%di
 1187 0956 7ECF     		jle	.L85
 1188              	.L70:
 1189 0958 89EC     		movw	%bp,	%sp
 1190 095a 5D       		popw	%bp
 1191 095b 07       		popw	%es
 1192 095c 5F       		popw	%di
 1193 095d 5E       		popw	%si
 1194 095e C3       		ret
 1195              	.L98:
 1196 095f 30C0     		xorb	%al,	%al
 1197 0961 84C4     		testb	%al,	%ah
 1198 0963 7403E991 		jne	.L100
 1198      FE
 1199 0968 EBEE     		jmp	.L70
 1200              	.L97:
 1201 096a 30E4     		xorb	%ah,	%ah
 1202 096c B001     		movb	$1,	%al
 1203 096e 8B9656FF 		movw	-170(%bp),	%dx
 1204 0972 3B9650FF 		cmpw	-176(%bp),	%dx
 1205 0976 7C03E977 		jge	.L78
 1205      FE
 1206 097b EBE2     		jmp	.L98
 1207              	.L99:
 1208 097d 899658FF 		movw	%dx,	-168(%bp)
 1209 0981 E96FFF   		jmp	.L83
 1211              		.global	int10_handler_ah08
 1213              	int10_handler_ah08:
 1214 0984 55       		pushw	%bp
 1215 0985 89E5     		movw	%sp,	%bp
 1216 0987 83EC02   		subw	$2,	%sp
 1217 098a A00100   		movb	int10_reg_bx+1,	%al
 1218 098d 83E00F   		andw	$15,	%ax
 1219 0990 8946FE   		movw	%ax,	-2(%bp)
 1220 0993 807EFE08 		cmpb	$8,	-2(%bp)
 1221 0997 18DB     		sbbb	%bl,	%bl
 1222 0999 225EFE   		andb	-2(%bp),	%bl
 1223 099c 30FF     		xorb	%bh,	%bh
 1224 099e B80100   		movw	$1,	%ax
 1225 09a1 50       		pushw	%ax
 1226 09a2 B80000   		movw	$int10_reg_ax,	%ax
 1227 09a5 50       		pushw	%ax
 1228 09a6 8A970000 		movb	posy(%bx),	%dl
 1229 09aa 30F6     		xorb	%dh,	%dh
 1230 09ac 89D0     		movw	%dx,	%ax
 1231 09ae D1E0     		shlw	$1,	%ax
 1232 09b0 D1E0     		shlw	$1,	%ax
 1233 09b2 01D0     		addw	%dx,	%ax
 1234 09b4 D1E0     		shlw	$1,	%ax
 1235 09b6 D1E0     		shlw	$1,	%ax
 1236 09b8 D1E0     		shlw	$1,	%ax
 1237 09ba D1E0     		shlw	$1,	%ax
 1238 09bc 8A970000 		movb	posx(%bx),	%dl
 1239 09c0 30F6     		xorb	%dh,	%dh
 1240 09c2 01D0     		addw	%dx,	%ax
 1241 09c4 D1E0     		shlw	$1,	%ax
 1242 09c6 50       		pushw	%ax
 1243 09c7 B800B8   		movw	$-18432,	%ax
 1244 09ca 50       		pushw	%ax
 1245 09cb E8FEFF   		call	fetch_data_word
 1246 09ce 89EC     		movw	%bp,	%sp
 1247 09d0 5D       		popw	%bp
 1248 09d1 C3       		ret
 1250              		.global	putCharWithAttr
 1252              	putCharWithAttr:
 1253 09d2 56       		pushw	%si
 1254 09d3 57       		pushw	%di
 1255 09d4 06       		pushw	%es
 1256 09d5 55       		pushw	%bp
 1257 09d6 89E5     		movw	%sp,	%bp
 1258 09d8 81ECAA00 		subw	$170,	%sp
 1259 09dc 8A160000 		movb	disp_page,	%dl
 1260 09e0 3A560C   		cmpb	12(%bp),	%dl
 1261 09e3 7407     		je	.L124
 1262 09e5 89EC     		movw	%bp,	%sp
 1263 09e7 5D       		popw	%bp
 1264 09e8 07       		popw	%es
 1265 09e9 5F       		popw	%di
 1266 09ea 5E       		popw	%si
 1267 09eb C3       		ret
 1268              	.L124:
 1269 09ec 807E0A0A 		cmpb	$10,	10(%bp)
 1270 09f0 7503E9CC 		je	.L125
 1270      01
 1271 09f5 807E0A0D 		cmpb	$13,	10(%bp)
 1272 09f9 7503E9A6 		je	.L126
 1272      01
 1273 09fe 807E0A08 		cmpb	$8,	10(%bp)
 1274 0a02 7503E9DF 		je	.L127
 1274      01
 1275 0a07 807E0A07 		cmpb	$7,	10(%bp)
 1276 0a0b 7503E9FA 		je	.L128
 1276      01
 1277 0a10 8A460E   		movb	14(%bp),	%al
 1278 0a13 B108     		movb	$8,	%cl
 1279 0a15 D3E0     		shlw	%cl,	%ax
 1280 0a17 0A460A   		orb	10(%bp),	%al
 1281 0a1a 89865EFF 		movw	%ax,	-162(%bp)
 1282 0a1e 88D0     		movb	%dl,	%al
 1283 0a20 89C3     		movw	%ax,	%bx
 1284 0a22 30FF     		xorb	%bh,	%bh
 1285 0a24 BF0000   		movw	$posy,	%di
 1286 0a27 89BE56FF 		movw	%di,	-170(%bp)
 1287 0a2b 8A01     		movb	(%bx,%di),	%al
 1288 0a2d 30E4     		xorb	%ah,	%ah
 1289 0a2f 89C1     		movw	%ax,	%cx
 1290 0a31 D1E1     		shlw	$1,	%cx
 1291 0a33 D1E1     		shlw	$1,	%cx
 1292 0a35 01C8     		addw	%cx,	%ax
 1293 0a37 D1E0     		shlw	$1,	%ax
 1294 0a39 D1E0     		shlw	$1,	%ax
 1295 0a3b D1E0     		shlw	$1,	%ax
 1296 0a3d D1E0     		shlw	$1,	%ax
 1297 0a3f BE0000   		movw	$posx,	%si
 1298 0a42 89B658FF 		movw	%si,	-168(%bp)
 1299 0a46 8A30     		movb	(%bx,%si),	%dh
 1300 0a48 8EDB     		movw	%bx,	%ds
 1301 0a4a 88B65CFF 		movb	%dh,	-164(%bp)
 1302 0a4e C6865DFF 		movb	$0,	-163(%bp)
 1302      00
 1303 0a53 03865CFF 		addw	-164(%bp),	%ax
 1304 0a57 D1E0     		shlw	$1,	%ax
 1305 0a59 89C7     		movw	%ax,	%di
 1306 0a5b 31F6     		xorw	%si,	%si
 1307 0a5d 88D0     		movb	%dl,	%al
 1308 0a5f B108     		movb	$8,	%cl
 1309 0a61 D3E0     		shlw	%cl,	%ax
 1310 0a63 89C1     		movw	%ax,	%cx
 1311 0a65 80C5D0   		addb	$-48,	%ch
 1312 0a68 89F0     		movw	%si,	%ax
 1313 0a6a 01F8     		addw	%di,	%ax
 1314 0a6c 11F1     		adcw	%si,	%cx
 1315 0a6e 8EC1     		movw	%cx,	%es
 1316 0a70 89C3     		movw	%ax,	%bx
 1317 0a72 8B865EFF 		movw	-162(%bp),	%ax
 1318 0a76 268907   		movw	%ax,	%es:(%bx)
 1319 0a79 89F8     		movw	%di,	%ax
 1320 0a7b F8       		clc
 1321 0a7c 81D600B8 		adcw	$-18432,	%si
 1322 0a80 8EC6     		movw	%si,	%es
 1323 0a82 89C6     		movw	%ax,	%si
 1324 0a84 8B865EFF 		movw	-162(%bp),	%ax
 1325 0a88 268904   		movw	%ax,	%es:(%si)
 1326 0a8b 8BBE58FF 		movw	-168(%bp),	%di
 1327 0a8f 8CDB     		movw	%ds,	%bx
 1328 0a91 368A01   		movb	%ss:(%bx,%di),	%al
 1329 0a94 88865EFF 		movb	%al,	-162(%bp)
 1330 0a98 FEC0     		incb	%al
 1331 0a9a 368801   		movb	%al,	%ss:(%bx,%di)
 1332 0a9d 8BBE56FF 		movw	-170(%bp),	%di
 1333 0aa1 368A31   		movb	%ss:(%bx,%di),	%dh
 1334              	.L107:
 1335 0aa4 3C4F     		cmpb	$79,	%al
 1336 0aa6 7612     		jbe	.L109
 1337 0aa8 D450     		aam	$80
 1338 0aaa 8BBE58FF 		movw	-168(%bp),	%di
 1339 0aae 368801   		movb	%al,	%ss:(%bx,%di)
 1340 0ab1 FEC6     		incb	%dh
 1341 0ab3 8BBE56FF 		movw	-170(%bp),	%di
 1342 0ab7 368831   		movb	%dh,	%ss:(%bx,%di)
 1343              	.L109:
 1344 0aba 80FE18   		cmpb	$24,	%dh
 1345 0abd 7703E9A0 		jbe	.L113
 1345      00
 1346 0ac2 36C68700 		movb	$24,	%ss:posy(%bx)
 1346      0018
 1347 0ac8 B108     		movb	$8,	%cl
 1348 0aca D3E2     		shlw	%cl,	%dx
 1349 0acc 80C6D0   		addb	$-48,	%dh
 1350 0acf 89965EFF 		movw	%dx,	-162(%bp)
 1351 0ad3 BEA000   		movw	$160,	%si
 1352 0ad6 B85000   		movw	$80,	%ax
 1353 0ad9 8EC0     		movw	%ax,	%es
 1354              	.L114:
 1355 0adb 06       		pushw	%es
 1356 0adc 8DBE60FF 		leaw	-160(%bp),	%di
 1357 0ae0 57       		pushw	%di
 1358 0ae1 56       		pushw	%si
 1359 0ae2 FFB65EFF 		pushw	-162(%bp)
 1360 0ae6 16       		pushw	%ss
 1361 0ae7 1F       		popw	%ds
 1362 0ae8 E8FEFF   		call	fetch_data_word
 1363 0aeb 8D9460FF 		leaw	-160(%si),	%dx
 1364 0aef 06       		pushw	%es
 1365 0af0 52       		pushw	%dx
 1366 0af1 89965AFF 		movw	%dx,	-166(%bp)
 1367 0af5 FFB65EFF 		pushw	-162(%bp)
 1368 0af9 57       		pushw	%di
 1369 0afa E8FEFF   		call	copy_data_word
 1370 0afd 06       		pushw	%es
 1371 0afe 57       		pushw	%di
 1372 0aff 56       		pushw	%si
 1373 0b00 B800B8   		movw	$-18432,	%ax
 1374 0b03 50       		pushw	%ax
 1375 0b04 89865CFF 		movw	%ax,	-164(%bp)
 1376 0b08 E8FEFF   		call	fetch_data_word
 1377 0b0b 06       		pushw	%es
 1378 0b0c 8B965AFF 		movw	-166(%bp),	%dx
 1379 0b10 52       		pushw	%dx
 1380 0b11 8B865CFF 		movw	-164(%bp),	%ax
 1381 0b15 50       		pushw	%ax
 1382 0b16 57       		pushw	%di
 1383 0b17 E8FEFF   		call	copy_data_word
 1384 0b1a 81C6A000 		addw	$160,	%si
 1385 0b1e 83C420   		addw	$32,	%sp
 1386 0b21 81FEA00F 		cmpw	$4000,	%si
 1387 0b25 75B4     		jne	.L114
 1388 0b27 89FB     		movw	%di,	%bx
 1389 0b29 8D7501   		leaw	1(%di),	%si
 1390 0b2c 8D4601   		leaw	1(%bp),	%ax
 1391              	.L115:
 1392 0b2f C60407   		movb	$7,	(%si)
 1393 0b32 C60720   		movb	$32,	(%bx)
 1394 0b35 83C302   		addw	$2,	%bx
 1395 0b38 83C602   		addw	$2,	%si
 1396 0b3b 39F0     		cmpw	%si,	%ax
 1397 0b3d 75F0     		jne	.L115
 1398 0b3f B85000   		movw	$80,	%ax
 1399 0b42 8EC0     		movw	%ax,	%es
 1400 0b44 50       		pushw	%ax
 1401 0b45 BF000F   		movw	$3840,	%di
 1402 0b48 57       		pushw	%di
 1403 0b49 FFB65EFF 		pushw	-162(%bp)
 1404 0b4d 8DB660FF 		leaw	-160(%bp),	%si
 1405 0b51 56       		pushw	%si
 1406 0b52 E8FEFF   		call	copy_data_word
 1407 0b55 06       		pushw	%es
 1408 0b56 57       		pushw	%di
 1409 0b57 B800B8   		movw	$-18432,	%ax
 1410 0b5a 50       		pushw	%ax
 1411 0b5b 56       		pushw	%si
 1412 0b5c E8FEFF   		call	copy_data_word
 1413 0b5f 83C410   		addw	$16,	%sp
 1414              	.L113:
 1415 0b62 368A1E00 		movb	%ss:disp_page,	%bl
 1415      00
 1416 0b67 30FF     		xorb	%bh,	%bh
 1417 0b69 89D8     		movw	%bx,	%ax
 1418 0b6b D1E0     		shlw	$1,	%ax
 1419 0b6d 83C050   		addw	$80,	%ax
 1420 0b70 8BBE58FF 		movw	-168(%bp),	%di
 1421 0b74 368A09   		movb	%ss:(%bx,%di),	%cl
 1422 0b77 99       		cwtd
 1423 0b78 89C6     		movw	%ax,	%si
 1424 0b7a F8       		clc
 1425 0b7b 83D240   		adcw	$64,	%dx
 1426 0b7e 8EC2     		movw	%dx,	%es
 1427 0b80 26880C   		movb	%cl,	%es:(%si)
 1428 0b83 8BBE56FF 		movw	-170(%bp),	%di
 1429 0b87 368A09   		movb	%ss:(%bx,%di),	%cl
 1430 0b8a 40       		incw	%ax
 1431 0b8b 89C2     		movw	%ax,	%dx
 1432 0b8d 31DB     		xorw	%bx,	%bx
 1433 0b8f 01DA     		addw	%bx,	%dx
 1434 0b91 83D340   		adcw	$64,	%bx
 1435 0b94 8EC3     		movw	%bx,	%es
 1436 0b96 89D3     		movw	%dx,	%bx
 1437 0b98 26880F   		movb	%cl,	%es:(%bx)
 1438 0b9b 89EC     		movw	%bp,	%sp
 1439 0b9d 5D       		popw	%bp
 1440 0b9e 07       		popw	%es
 1441 0b9f 5F       		popw	%di
 1442 0ba0 5E       		popw	%si
 1443 0ba1 16       		pushw	%ss
 1444 0ba2 1F       		popw	%ds
 1445 0ba3 C3       		ret
 1446              	.L126:
 1447 0ba4 88D0     		movb	%dl,	%al
 1448 0ba6 30E4     		xorb	%ah,	%ah
 1449 0ba8 89C3     		movw	%ax,	%bx
 1450 0baa C6870000 		movb	$0,	posx(%bx)
 1450      00
 1451 0baf BF0000   		movw	$posy,	%di
 1452 0bb2 89BE56FF 		movw	%di,	-170(%bp)
 1453 0bb6 8A31     		movb	(%bx,%di),	%dh
 1454 0bb8 C78658FF 		movw	$posx,	-168(%bp)
 1454      0000
 1455 0bbe E9F9FE   		jmp	.L109
 1456              	.L125:
 1457 0bc1 88D0     		movb	%dl,	%al
 1458 0bc3 30E4     		xorb	%ah,	%ah
 1459 0bc5 89C3     		movw	%ax,	%bx
 1460 0bc7 BF0000   		movw	$posy,	%di
 1461 0bca 89BE56FF 		movw	%di,	-170(%bp)
 1462 0bce 8A01     		movb	(%bx,%di),	%al
 1463 0bd0 88865EFF 		movb	%al,	-162(%bp)
 1464 0bd4 88C6     		movb	%al,	%dh
 1465 0bd6 FEC6     		incb	%dh
 1466 0bd8 8831     		movb	%dh,	(%bx,%di)
 1467 0bda BF0000   		movw	$posx,	%di
 1468 0bdd 89BE58FF 		movw	%di,	-168(%bp)
 1469 0be1 8A01     		movb	(%bx,%di),	%al
 1470 0be3 E9BEFE   		jmp	.L107
 1471              	.L127:
 1472 0be6 88D0     		movb	%dl,	%al
 1473 0be8 30E4     		xorb	%ah,	%ah
 1474 0bea 89C3     		movw	%ax,	%bx
 1475 0bec BF0000   		movw	$posx,	%di
 1476 0bef 89BE58FF 		movw	%di,	-168(%bp)
 1477 0bf3 8A01     		movb	(%bx,%di),	%al
 1478 0bf5 3C01     		cmpb	$1,	%al
 1479 0bf7 F5       		cmc
 1480 0bf8 18E4     		sbbb	%ah,	%ah
 1481 0bfa 00E0     		addb	%ah,	%al
 1482 0bfc 8801     		movb	%al,	(%bx,%di)
 1483 0bfe BF0000   		movw	$posy,	%di
 1484 0c01 89BE56FF 		movw	%di,	-170(%bp)
 1485 0c05 8A31     		movb	(%bx,%di),	%dh
 1486 0c07 E99AFE   		jmp	.L107
 1487              	.L128:
 1488 0c0a 88D0     		movb	%dl,	%al
 1489 0c0c 30E4     		xorb	%ah,	%ah
 1490 0c0e 89C3     		movw	%ax,	%bx
 1491 0c10 BF0000   		movw	$posx,	%di
 1492 0c13 89BE58FF 		movw	%di,	-168(%bp)
 1493 0c17 8A01     		movb	(%bx,%di),	%al
 1494 0c19 BF0000   		movw	$posy,	%di
 1495 0c1c 89BE56FF 		movw	%di,	-170(%bp)
 1496 0c20 8A31     		movb	(%bx,%di),	%dh
 1497 0c22 E97FFE   		jmp	.L107
 1499              		.global	int10_handler_ah09
 1501              	int10_handler_ah09:
 1502 0c25 A10000   		movw	int10_reg_bx,	%ax
 1503 0c28 89C3     		movw	%ax,	%bx
 1504 0c2a B108     		movb	$8,	%cl
 1505 0c2c D3EB     		shrw	%cl,	%bx
 1506 0c2e 36381E00 		cmpb	%bl,	%ss:disp_page
 1506      00
 1507 0c33 7401     		je	.L144
 1508 0c35 C3       		ret
 1509              	.L144:
 1510 0c36 56       		pushw	%si
 1511 0c37 57       		pushw	%di
 1512 0c38 06       		pushw	%es
 1513 0c39 55       		pushw	%bp
 1514 0c3a 89E5     		movw	%sp,	%bp
 1515 0c3c 83EC06   		subw	$6,	%sp
 1516 0c3f 8AAF0000 		movb	posx(%bx),	%ch
 1517 0c43 8A970000 		movb	posy(%bx),	%dl
 1518 0c47 8856FF   		movb	%dl,	-1(%bp)
 1519 0c4a 89C2     		movw	%ax,	%dx
 1520 0c4c D3E2     		shlw	%cl,	%dx
 1521 0c4e 8A1E0000 		movb	int10_reg_ax,	%bl
 1522 0c52 30FF     		xorb	%bh,	%bh
 1523 0c54 09D3     		orw	%dx,	%bx
 1524 0c56 8EDB     		movw	%bx,	%ds
 1525 0c58 36833E00 		cmpw	$0,	%ss:int10_reg_cx
 1525      0000
 1526 0c5e 7466     		je	.L129
 1527 0c60 30C0     		xorb	%al,	%al
 1528 0c62 80C4D0   		addb	$-48,	%ah
 1529 0c65 8946FC   		movw	%ax,	-4(%bp)
 1530 0c68 31C0     		xorw	%ax,	%ax
 1531 0c6a 8946FA   		movw	%ax,	-6(%bp)
 1532 0c6d 89C7     		movw	%ax,	%di
 1533 0c6f 8A4EFF   		movb	-1(%bp),	%cl
 1534              	.L134:
 1535 0c72 88CA     		movb	%cl,	%dl
 1536 0c74 30F6     		xorb	%dh,	%dh
 1537 0c76 89D0     		movw	%dx,	%ax
 1538 0c78 D1E0     		shlw	$1,	%ax
 1539 0c7a D1E0     		shlw	$1,	%ax
 1540 0c7c 01C2     		addw	%ax,	%dx
 1541 0c7e D1E2     		shlw	$1,	%dx
 1542 0c80 D1E2     		shlw	$1,	%dx
 1543 0c82 D1E2     		shlw	$1,	%dx
 1544 0c84 D1E2     		shlw	$1,	%dx
 1545 0c86 88E8     		movb	%ch,	%al
 1546 0c88 30E4     		xorb	%ah,	%ah
 1547 0c8a 01D0     		addw	%dx,	%ax
 1548 0c8c D1E0     		shlw	$1,	%ax
 1549 0c8e 31F6     		xorw	%si,	%si
 1550 0c90 8B5EFA   		movw	-6(%bp),	%bx
 1551 0c93 01C3     		addw	%ax,	%bx
 1552 0c95 8B56FC   		movw	-4(%bp),	%dx
 1553 0c98 11F2     		adcw	%si,	%dx
 1554 0c9a 8EC2     		movw	%dx,	%es
 1555 0c9c 268C1F   		movw	%ds,	%es:(%bx)
 1556 0c9f 01F0     		addw	%si,	%ax
 1557 0ca1 81D600B8 		adcw	$-18432,	%si
 1558 0ca5 8EC6     		movw	%si,	%es
 1559 0ca7 89C3     		movw	%ax,	%bx
 1560 0ca9 268C1F   		movw	%ds,	%es:(%bx)
 1561 0cac FEC5     		incb	%ch
 1562 0cae 80FD4F   		cmpb	$79,	%ch
 1563 0cb1 7604     		jbe	.L132
 1564 0cb3 FEC1     		incb	%cl
 1565 0cb5 30ED     		xorb	%ch,	%ch
 1566              	.L132:
 1567 0cb7 80F919   		cmpb	$25,	%cl
 1568 0cba 18C0     		sbbb	%al,	%al
 1569 0cbc 20C1     		andb	%al,	%cl
 1570 0cbe 47       		incw	%di
 1571 0cbf 36393E00 		cmpw	%di,	%ss:int10_reg_cx
 1571      00
 1572 0cc4 77AC     		ja	.L134
 1573              	.L129:
 1574 0cc6 89EC     		movw	%bp,	%sp
 1575 0cc8 5D       		popw	%bp
 1576 0cc9 07       		popw	%es
 1577 0cca 5F       		popw	%di
 1578 0ccb 5E       		popw	%si
 1579 0ccc 16       		pushw	%ss
 1580 0ccd 1F       		popw	%ds
 1581 0cce C3       		ret
 1583              		.global	int10_handler_ah0a
 1585              	int10_handler_ah0a:
 1586 0ccf E953FF   		jmp	int10_handler_ah09
 1588              		.global	int10_handler_ah0e
 1590              	int10_handler_ah0e:
 1591 0cd2 56       		pushw	%si
 1592 0cd3 57       		pushw	%di
 1593 0cd4 06       		pushw	%es
 1594 0cd5 55       		pushw	%bp
 1595 0cd6 89E5     		movw	%sp,	%bp
 1596 0cd8 81ECAA00 		subw	$170,	%sp
 1597 0cdc A10000   		movw	int10_reg_bx,	%ax
 1598 0cdf 89865EFF 		movw	%ax,	-162(%bp)
 1599 0ce3 89C3     		movw	%ax,	%bx
 1600 0ce5 B108     		movb	$8,	%cl
 1601 0ce7 D3EB     		shrw	%cl,	%bx
 1602 0ce9 36381E00 		cmpb	%bl,	%ss:disp_page
 1602      00
 1603 0cee 7407     		je	.L165
 1604 0cf0 89EC     		movw	%bp,	%sp
 1605 0cf2 5D       		popw	%bp
 1606 0cf3 07       		popw	%es
 1607 0cf4 5F       		popw	%di
 1608 0cf5 5E       		popw	%si
 1609 0cf6 C3       		ret
 1610              	.L165:
 1611 0cf7 A10000   		movw	int10_reg_ax,	%ax
 1612 0cfa 3C0A     		cmpb	$10,	%al
 1613 0cfc 7503E9B4 		je	.L166
 1613      01
 1614 0d01 3C0D     		cmpb	$13,	%al
 1615 0d03 7503E996 		je	.L167
 1615      01
 1616 0d08 3C08     		cmpb	$8,	%al
 1617 0d0a 7503E9C5 		je	.L168
 1617      01
 1618 0d0f 3C07     		cmpb	$7,	%al
 1619 0d11 7503E9DC 		je	.L169
 1619      01
 1620 0d16 8B965EFF 		movw	-162(%bp),	%dx
 1621 0d1a B108     		movb	$8,	%cl
 1622 0d1c D3E2     		shlw	%cl,	%dx
 1623 0d1e 08C2     		orb	%al,	%dl
 1624 0d20 89965CFF 		movw	%dx,	-164(%bp)
 1625 0d24 BF0000   		movw	$posy,	%di
 1626 0d27 89BE58FF 		movw	%di,	-168(%bp)
 1627 0d2b 8A01     		movb	(%bx,%di),	%al
 1628 0d2d 30E4     		xorb	%ah,	%ah
 1629 0d2f 89C1     		movw	%ax,	%cx
 1630 0d31 D1E1     		shlw	$1,	%cx
 1631 0d33 89CA     		movw	%cx,	%dx
 1632 0d35 D1E2     		shlw	$1,	%dx
 1633 0d37 01C2     		addw	%ax,	%dx
 1634 0d39 D1E2     		shlw	$1,	%dx
 1635 0d3b D1E2     		shlw	$1,	%dx
 1636 0d3d D1E2     		shlw	$1,	%dx
 1637 0d3f D1E2     		shlw	$1,	%dx
 1638 0d41 BE0000   		movw	$posx,	%si
 1639 0d44 8EDE     		movw	%si,	%ds
 1640 0d46 89B656FF 		movw	%si,	-170(%bp)
 1641 0d4a 368A00   		movb	%ss:(%bx,%si),	%al
 1642 0d4d 30E4     		xorb	%ah,	%ah
 1643 0d4f 01C2     		addw	%ax,	%dx
 1644 0d51 89D0     		movw	%dx,	%ax
 1645 0d53 D1E0     		shlw	$1,	%ax
 1646 0d55 89C7     		movw	%ax,	%di
 1647 0d57 31F6     		xorw	%si,	%si
 1648 0d59 8B865EFF 		movw	-162(%bp),	%ax
 1649 0d5d 30C0     		xorb	%al,	%al
 1650 0d5f 80C4D0   		addb	$-48,	%ah
 1651 0d62 89C2     		movw	%ax,	%dx
 1652 0d64 89F0     		movw	%si,	%ax
 1653 0d66 01F8     		addw	%di,	%ax
 1654 0d68 89F1     		movw	%si,	%cx
 1655 0d6a 11F2     		adcw	%si,	%dx
 1656 0d6c 8EC2     		movw	%dx,	%es
 1657 0d6e 89C6     		movw	%ax,	%si
 1658 0d70 8B965CFF 		movw	-164(%bp),	%dx
 1659 0d74 268914   		movw	%dx,	%es:(%si)
 1660 0d77 89F8     		movw	%di,	%ax
 1661 0d79 F8       		clc
 1662 0d7a 89CE     		movw	%cx,	%si
 1663 0d7c 81D600B8 		adcw	$-18432,	%si
 1664 0d80 8EC6     		movw	%si,	%es
 1665 0d82 89C6     		movw	%ax,	%si
 1666 0d84 268914   		movw	%dx,	%es:(%si)
 1667 0d87 8CDF     		movw	%ds,	%di
 1668 0d89 368A01   		movb	%ss:(%bx,%di),	%al
 1669 0d8c 88865CFF 		movb	%al,	-164(%bp)
 1670 0d90 FEC0     		incb	%al
 1671 0d92 368801   		movb	%al,	%ss:(%bx,%di)
 1672 0d95 8BBE58FF 		movw	-168(%bp),	%di
 1673 0d99 368A11   		movb	%ss:(%bx,%di),	%dl
 1674              	.L149:
 1675 0d9c 3C4F     		cmpb	$79,	%al
 1676 0d9e 7612     		jbe	.L151
 1677 0da0 D450     		aam	$80
 1678 0da2 8BBE56FF 		movw	-170(%bp),	%di
 1679 0da6 368801   		movb	%al,	%ss:(%bx,%di)
 1680 0da9 FEC2     		incb	%dl
 1681 0dab 8BBE58FF 		movw	-168(%bp),	%di
 1682 0daf 368811   		movb	%dl,	%ss:(%bx,%di)
 1683              	.L151:
 1684 0db2 80FA18   		cmpb	$24,	%dl
 1685 0db5 7703E9A2 		jbe	.L155
 1685      00
 1686 0dba 36C68700 		movb	$24,	%ss:posy(%bx)
 1686      0018
 1687 0dc0 8B8E5EFF 		movw	-162(%bp),	%cx
 1688 0dc4 30C9     		xorb	%cl,	%cl
 1689 0dc6 80C5D0   		addb	$-48,	%ch
 1690 0dc9 898E5EFF 		movw	%cx,	-162(%bp)
 1691 0dcd BEA000   		movw	$160,	%si
 1692 0dd0 B85000   		movw	$80,	%ax
 1693 0dd3 8EC0     		movw	%ax,	%es
 1694              	.L156:
 1695 0dd5 06       		pushw	%es
 1696 0dd6 8DBE60FF 		leaw	-160(%bp),	%di
 1697 0dda 57       		pushw	%di
 1698 0ddb 56       		pushw	%si
 1699 0ddc FFB65EFF 		pushw	-162(%bp)
 1700 0de0 16       		pushw	%ss
 1701 0de1 1F       		popw	%ds
 1702 0de2 E8FEFF   		call	fetch_data_word
 1703 0de5 8D9460FF 		leaw	-160(%si),	%dx
 1704 0de9 06       		pushw	%es
 1705 0dea 52       		pushw	%dx
 1706 0deb 89965AFF 		movw	%dx,	-166(%bp)
 1707 0def FFB65EFF 		pushw	-162(%bp)
 1708 0df3 57       		pushw	%di
 1709 0df4 E8FEFF   		call	copy_data_word
 1710 0df7 06       		pushw	%es
 1711 0df8 57       		pushw	%di
 1712 0df9 56       		pushw	%si
 1713 0dfa B800B8   		movw	$-18432,	%ax
 1714 0dfd 50       		pushw	%ax
 1715 0dfe 89865CFF 		movw	%ax,	-164(%bp)
 1716 0e02 E8FEFF   		call	fetch_data_word
 1717 0e05 06       		pushw	%es
 1718 0e06 8B965AFF 		movw	-166(%bp),	%dx
 1719 0e0a 52       		pushw	%dx
 1720 0e0b 8B865CFF 		movw	-164(%bp),	%ax
 1721 0e0f 50       		pushw	%ax
 1722 0e10 57       		pushw	%di
 1723 0e11 E8FEFF   		call	copy_data_word
 1724 0e14 81C6A000 		addw	$160,	%si
 1725 0e18 83C420   		addw	$32,	%sp
 1726 0e1b 81FEA00F 		cmpw	$4000,	%si
 1727 0e1f 75B4     		jne	.L156
 1728 0e21 89FB     		movw	%di,	%bx
 1729 0e23 8D7501   		leaw	1(%di),	%si
 1730 0e26 8D4601   		leaw	1(%bp),	%ax
 1731              	.L157:
 1732 0e29 C60407   		movb	$7,	(%si)
 1733 0e2c C60720   		movb	$32,	(%bx)
 1734 0e2f 83C302   		addw	$2,	%bx
 1735 0e32 83C602   		addw	$2,	%si
 1736 0e35 39F0     		cmpw	%si,	%ax
 1737 0e37 75F0     		jne	.L157
 1738 0e39 B85000   		movw	$80,	%ax
 1739 0e3c 8EC0     		movw	%ax,	%es
 1740 0e3e 50       		pushw	%ax
 1741 0e3f BF000F   		movw	$3840,	%di
 1742 0e42 57       		pushw	%di
 1743 0e43 FFB65EFF 		pushw	-162(%bp)
 1744 0e47 8DB660FF 		leaw	-160(%bp),	%si
 1745 0e4b 56       		pushw	%si
 1746 0e4c E8FEFF   		call	copy_data_word
 1747 0e4f 06       		pushw	%es
 1748 0e50 57       		pushw	%di
 1749 0e51 B800B8   		movw	$-18432,	%ax
 1750 0e54 50       		pushw	%ax
 1751 0e55 56       		pushw	%si
 1752 0e56 E8FEFF   		call	copy_data_word
 1753 0e59 83C410   		addw	$16,	%sp
 1754              	.L155:
 1755 0e5c 368A1E00 		movb	%ss:disp_page,	%bl
 1755      00
 1756 0e61 30FF     		xorb	%bh,	%bh
 1757 0e63 89D8     		movw	%bx,	%ax
 1758 0e65 D1E0     		shlw	$1,	%ax
 1759 0e67 83C050   		addw	$80,	%ax
 1760 0e6a 8BBE56FF 		movw	-170(%bp),	%di
 1761 0e6e 368A09   		movb	%ss:(%bx,%di),	%cl
 1762 0e71 99       		cwtd
 1763 0e72 89C6     		movw	%ax,	%si
 1764 0e74 F8       		clc
 1765 0e75 83D240   		adcw	$64,	%dx
 1766 0e78 8EC2     		movw	%dx,	%es
 1767 0e7a 26880C   		movb	%cl,	%es:(%si)
 1768 0e7d 8BBE58FF 		movw	-168(%bp),	%di
 1769 0e81 368A09   		movb	%ss:(%bx,%di),	%cl
 1770 0e84 40       		incw	%ax
 1771 0e85 89C2     		movw	%ax,	%dx
 1772 0e87 31DB     		xorw	%bx,	%bx
 1773 0e89 01DA     		addw	%bx,	%dx
 1774 0e8b 83D340   		adcw	$64,	%bx
 1775 0e8e 8EC3     		movw	%bx,	%es
 1776 0e90 89D3     		movw	%dx,	%bx
 1777 0e92 26880F   		movb	%cl,	%es:(%bx)
 1778 0e95 89EC     		movw	%bp,	%sp
 1779 0e97 5D       		popw	%bp
 1780 0e98 07       		popw	%es
 1781 0e99 5F       		popw	%di
 1782 0e9a 5E       		popw	%si
 1783 0e9b 16       		pushw	%ss
 1784 0e9c 1F       		popw	%ds
 1785 0e9d C3       		ret
 1786              	.L167:
 1787 0e9e C6870000 		movb	$0,	posx(%bx)
 1787      00
 1788 0ea3 BF0000   		movw	$posy,	%di
 1789 0ea6 89BE58FF 		movw	%di,	-168(%bp)
 1790 0eaa 8A11     		movb	(%bx,%di),	%dl
 1791 0eac C78656FF 		movw	$posx,	-170(%bp)
 1791      0000
 1792 0eb2 E9FDFE   		jmp	.L151
 1793              	.L166:
 1794 0eb5 BF0000   		movw	$posy,	%di
 1795 0eb8 89BE58FF 		movw	%di,	-168(%bp)
 1796 0ebc 8A01     		movb	(%bx,%di),	%al
 1797 0ebe 88865CFF 		movb	%al,	-164(%bp)
 1798 0ec2 88C2     		movb	%al,	%dl
 1799 0ec4 FEC2     		incb	%dl
 1800 0ec6 8811     		movb	%dl,	(%bx,%di)
 1801 0ec8 BF0000   		movw	$posx,	%di
 1802 0ecb 89BE56FF 		movw	%di,	-170(%bp)
 1803 0ecf 8A01     		movb	(%bx,%di),	%al
 1804 0ed1 E9C8FE   		jmp	.L149
 1805              	.L168:
 1806 0ed4 BF0000   		movw	$posx,	%di
 1807 0ed7 89BE56FF 		movw	%di,	-170(%bp)
 1808 0edb 8A01     		movb	(%bx,%di),	%al
 1809 0edd 3C01     		cmpb	$1,	%al
 1810 0edf F5       		cmc
 1811 0ee0 18E4     		sbbb	%ah,	%ah
 1812 0ee2 00E0     		addb	%ah,	%al
 1813 0ee4 8801     		movb	%al,	(%bx,%di)
 1814 0ee6 BF0000   		movw	$posy,	%di
 1815 0ee9 89BE58FF 		movw	%di,	-168(%bp)
 1816 0eed 8A11     		movb	(%bx,%di),	%dl
 1817 0eef E9AAFE   		jmp	.L149
 1818              	.L169:
 1819 0ef2 BF0000   		movw	$posx,	%di
 1820 0ef5 89BE56FF 		movw	%di,	-170(%bp)
 1821 0ef9 8A01     		movb	(%bx,%di),	%al
 1822 0efb BF0000   		movw	$posy,	%di
 1823 0efe 89BE58FF 		movw	%di,	-168(%bp)
 1824 0f02 8A11     		movb	(%bx,%di),	%dl
 1825 0f04 E995FE   		jmp	.L149
 1827              		.global	int10_handler_ah0f
 1829              	int10_handler_ah0f:
 1830 0f07 A00000   		movb	disp_page,	%al
 1831 0f0a B108     		movb	$8,	%cl
 1832 0f0c D3E0     		shlw	%cl,	%ax
 1833 0f0e A30000   		movw	%ax,	int10_reg_bx
 1834 0f11 C7060000 		movw	$20483,	int10_reg_ax
 1834      0350
 1835 0f17 C3       		ret
 1837              		.section	.rodata.str1.1
 1838              	.LC2:
 1839 003a 494E5420 		.string	"INT 0x10\n"
 1839      30783130 
 1839      0A00
 1840              		.text
 1841              		.global	int10_handler_ah10
 1843              	int10_handler_ah10:
 1844 0f18 803E0000 		cmpb	$3,	int10_reg_ax
 1844      03
 1845 0f1d 7447     		je	.L177
 1846 0f1f 56       		pushw	%si
 1847 0f20 06       		pushw	%es
 1848 0f21 55       		pushw	%bp
 1849 0f22 89E5     		movw	%sp,	%bp
 1850 0f24 83EC40   		subw	$64,	%sp
 1851 0f27 B83A00   		movw	$.LC2,	%ax
 1852 0f2a 50       		pushw	%ax
 1853 0f2b 8D76C0   		leaw	-64(%bp),	%si
 1854 0f2e 56       		pushw	%si
 1855 0f2f E8FEFF   		call	s_sprintf
 1856 0f32 56       		pushw	%si
 1857              	#APP
 1858              	;# 627 "src/int10h.c" 1
 248              	    s_snprintf(buf, sizeof(buf), "\nINT 0x10\n");
 249              	    emuLogMessage(reg_ss, (uint16_t)buf);
 250              	    s_snprintf(buf, sizeof(buf), "AX: %04x BX: %04x CX: %04x DX: %04x ES: %04x \n", 
 251              	        int10_reg_ax, int10_reg_bx, int10_reg_cx, int10_reg_dx, int10_reg_es);
 252              	    emuLogMessage(reg_ss, (uint16_t)buf);
 253              	}
 254              	
 255              	#define MAX_X 80 /* Columns */
 256              	#define MAX_Y 25 /* Rows   */
 257              	#define PAGES 8
 258              	
 259              	unsigned char disp_page = 0;
 260              	unsigned char posx[PAGES]   = {0,0,0,0,0,0,0,0}; /* 0 ... MAX_X - 1  */
 261              	unsigned char posy[PAGES]   = {0,0,0,0,0,0,0,0}; /* 0 ... MAX_Y - 1  */
 262              	
 263              	static unsigned int getDispSeg(unsigned int page){
 264              	    return 0xd000 + (page << 8);
 265              	}
 266              	
 267              	static void updateDispBuf(unsigned char x, unsigned char y, unsigned char *buf){
 268              	    unsigned int seg = getDispSeg( disp_page );
 269              	
 270              	    unsigned int pos = ((y*MAX_X + x)<<1);
 271              	    *((unsigned int __far *) _MK_FP(   seg, pos)) = ((unsigned int *)buf)[0];
 272              	    *((unsigned int __far *) _MK_FP(0xb800, pos)) = ((unsigned int *)buf)[0];
 273              	}
 274              	
 275              	
 276              	static void set_cursorPos_memarea(unsigned char page){
 277              	    // Set the Cursor position on 40:50 - 40:57 in BIOS Data Area
 278              	    // See: https://stanislavs.org/helppc/bios_data_area.html
 279              	
 280              	    // lower: col(x), higher: row(y), 0-based (checked it with VMWARE)
 281              	
 282              	    unsigned int pos = 0x50 + (page<<1);
 283              	
 284              	    *((unsigned char __far *) _MK_FP(0x40, pos+0)) = posx[page];
 285              	    *((unsigned char __far *) _MK_FP(0x40, pos+1)) = posy[page];
 286              	}
 287              	
 288              	void set_cursorPosition(unsigned char page, unsigned char x, unsigned char y){
 289              	    /*
 290              	    page : 0-7
 291              	    x,y 0-based position
 292              	    */
 293              	    if(page >= PAGES) return ;
 294              	    posx[page] = x;
 295              	    posy[page] = y;
 296              	    set_cursorPos_memarea(page);
 297              	}
 298              	
 299              	void int10_handler_ah00(void){
 300              	    // Set Video Mode
 301              	
 302              	    if( (int10_reg_ax & 0x0080) == 0 ){
 303              	        // if bit7 of AL is 1, clearing the display is not necessary.
 304              	        unsigned char buf[2*MAX_X];
 305              	        unsigned int seg = getDispSeg( disp_page );
 306              	
 307              	        for(int i=0; i<sizeof(buf) ; i+=2){
 308              	            buf[i+1] = 0x07;
 309              	            buf[i+0] = ' ';
 310              	        }
 311              	
 312              	        for(int y = 0; y < MAX_Y; y++){
 313              	            copy_data_word (buf,    seg, (unsigned char *)((y*MAX_X)<<1), MAX_X);
 314              	            copy_data_word (buf, 0xb800, (unsigned char *)((y*MAX_X)<<1), MAX_X);
 315              	        }
 316              	
 317              	        posx[disp_page] = posy[disp_page] = 0;
 318              	        set_cursorPos_memarea( disp_page );
 319              	        termGoTo( 0, 0 );
 320              	    }
 321              	
 322              	    return ;
 323              	}
 324              	
 325              	void int10_handler_ah01(void){
 326              	    // Set Cursor Type
 327              	    return ;
 328              	}
 329              	
 330              	void int10_handler_ah02(void){
 331              	    // Set Cursor Position
 332              	    int page = ((int10_reg_bx>>8) & 0xff);
 333              	    if(page >= PAGES) page = PAGES -1;
 334              	
 335              	    // DH: row(y), DL: column(x)
 336              	    posy[page] = (int10_reg_dx>>8);
 337              	    posx[page] = (int10_reg_dx&0xff);
 338              	
 339              	    if(posx[page] >= MAX_X) posx[page] = MAX_X - 1;
 340              	    if(posy[page] >= MAX_Y) posy[page] = MAX_Y - 1;
 341              	
 342              	    if( page == disp_page ){
 343              	        termGoTo( posx[page]+1, posy[page]+1 );
 344              	    }
 345              	
 346              	    set_cursorPos_memarea( page );
 347              	}
 348              	
 349              	void int10_handler_ah03(void){
 350              	    // Read Cursor Position and Size
 351              	    int page = ((int10_reg_bx>>8) & 0xff);
 352              	    page = (page >= PAGES) ? PAGES -1 : page;
 353              	
 354              	    int10_reg_cx = 0x0607;  // Cursor Start and End line values (Default value for CGA)
 355              	    int10_reg_dx = posx[page] + (posy[page]<<8); // 0x1950;
 356              	}
 357              	
 358              	void int10_handler_ah05(void){
 359              	    // Select Active Display Page
 360              	    int page = (int10_reg_ax & 0xff);
 361              	    disp_page = (page >= PAGES) ? PAGES -1 : page;
 362              	
 363              	    termGoTo( posx[disp_page]+1, posy[disp_page]+1 );
 364              	}
 365              	
 366              	#define MIN(a,b)    (((a) < (b)) ? (a) : (b))
 367              	#define MAX(a,b)    (((a) > (b)) ? (a) : (b))
 368              	
 369              	void int10_handler_ah06(void){
 370              	    // Scroll Window Up
 371              	    // (bottom lines are blanked)
 372              	
 373              	    int lines = (int10_reg_ax & 0xff);      // AL: #lines
 374              	    int color = ((int10_reg_bx>>8) & 0xff); // BH: attribute
 375              	
 376              	    int x1, x2, y1, y2;
 377              	    // from  row(y): CH col(x): CL
 378              	    // to    row(y): DH col(x): DL
 379              	    y1 = ((int10_reg_cx>>8) & 0xff);
 380              	    x1 = ( int10_reg_cx     & 0xff);
 381              	    y2 = ((int10_reg_dx>>8) & 0xff);
 382              	    x2 = ( int10_reg_dx     & 0xff);
 383              	
 384              	    if(y2 >= MAX_Y) y2 = MAX_Y-1;
 385              	    if(x2 >= MAX_X) x2 = MAX_X-1;
 386              	
 387              	    if( x2 < x1 || y2 < y1 ) return;
 388              	
 389              	    if( lines == 0 ){
 390              	        lines = MAX_Y;
 391              	    }
 392              	
 393              	    if( x2 >= x1 && y2 >= y1 ){
 394              	        unsigned char buf[2*MAX_X];
 395              	        unsigned int seg = getDispSeg( disp_page );
 396              	        for(int y= y1; y <= y2 - lines ; y++){
 397              	            fetch_data_word(     seg, (unsigned char *)(((y+lines)*MAX_X + x1)<<1), buf, x2 - x1 +1
 398              	            copy_data_word (buf, seg, (unsigned char *)(( y       *MAX_X + x1)<<1),      x2 - x1 +1
 399              	
 400              	            fetch_data_word(     0xb800, (unsigned char *)(((y+lines)*MAX_X + x1)<<1), buf, x2 - x1
 401              	            copy_data_word (buf, 0xb800, (unsigned char *)(( y       *MAX_X + x1)<<1),      x2 - x1
 402              	        }
 403              	        for(int i=0; i<sizeof(buf) ; i+=2){
 404              	            buf[i+1] = color;
 405              	            buf[i+0] = ' ';
 406              	        }
 407              	        for(int y = MAX(y1, y2 - lines+1); y <= y2; y++){
 408              	            copy_data_word (buf,    seg, (unsigned char *)((y*MAX_X + x1)<<1), x2 - x1 +1);
 409              	            copy_data_word (buf, 0xb800, (unsigned char *)((y*MAX_X + x1)<<1), x2 - x1 +1);
 410              	        }
 411              	    }
 412              	}
 413              	
 414              	void int10_handler_ah07(void){
 415              	    // Scroll Window Down
 416              	    // (upper lines are blanked)
 417              	
 418              	    int lines = (int10_reg_ax & 0xff);      // AL: #lines
 419              	    int color = ((int10_reg_bx>>8) & 0xff); // BH: attribute
 420              	
 421              	    int x1, x2, y1, y2;
 422              	    // from  row(y): CH col(x): CL
 423              	    // to    row(y): DH col(x): DL
 424              	    y1 = ((int10_reg_cx>>8) & 0xff);
 425              	    x1 = ( int10_reg_cx     & 0xff);
 426              	    y2 = ((int10_reg_dx>>8) & 0xff);
 427              	    x2 = ( int10_reg_dx     & 0xff);
 428              	
 429              	    if(y2 >= MAX_Y) y2 = MAX_Y-1;
 430              	    if(x2 >= MAX_X) x2 = MAX_X-1;
 431              	
 432              	    if( x2 < x1 || y2 < y1 ) return;
 433              	
 434              	    if( lines == 0 ){
 435              	        lines = MAX_Y;
 436              	    }
 437              	
 438              	    if( x2 >= x1 && y2 >= y1 ){
 439              	        unsigned char buf[2*MAX_X];
 440              	        unsigned int seg = getDispSeg( disp_page );
 441              	        for(int y= y2; y >= y1+lines ; y--){
 442              	            fetch_data_word(     seg, (unsigned char *)(((y-lines)*MAX_X + x1)<<1), buf, x2 - x1+1)
 443              	            copy_data_word (buf, seg, (unsigned char *)(( y       *MAX_X + x1)<<1),      x2 - x1+1)
 444              	
 445              	            fetch_data_word(     0xb800, (unsigned char *)(((y-lines)*MAX_X + x1)<<1), buf, x2 - x1
 446              	            copy_data_word (buf, 0xb800, (unsigned char *)(( y       *MAX_X + x1)<<1),      x2 - x1
 447              	        }
 448              	        for(int i=0; i<sizeof(buf) ; i+=2){
 449              	            buf[i+1] = color;
 450              	            buf[i+0] = ' ';
 451              	        }
 452              	        for(int y = y1; y <= MIN(y2, y1 + lines-1); y++){
 453              	            copy_data_word (buf,    seg, (unsigned char *)((y*MAX_X + x1)<<1), x2 - x1+1);
 454              	            copy_data_word (buf, 0xb800, (unsigned char *)((y*MAX_X + x1)<<1), x2 - x1+1);
 455              	        }
 456              	    }
 457              	
 458              	}
 459              	
 460              	void int10_handler_ah08(void){
 461              	    // Read Character and Attribute at Cursor Position
 462              	
 463              	    unsigned char p = ( (int10_reg_bx>>8) & 0xf);
 464              	    if( p >= PAGES ) p=0;
 465              	    fetch_data_word(0xb800, (unsigned char *)((posy[p]*MAX_X + posx[p])<<1), (unsigned char *)&int1
 466              	}
 467              	
 468              	void putCharWithAttr(char c, unsigned char page, unsigned char attr){
 469              	    unsigned char buf[2];
 470              	
 471              	    if( page != disp_page ) return ;
 472              	
 473              	    if( c == '\n' ){
 474              	        posy[disp_page] ++;
 475              	    }else if( c == '\r'  ){
 476              	        posx[disp_page] = 0;
 477              	    }else if( c == '\b' ){
 478              	        posx[disp_page] = (posx[disp_page] == 0) ? 0 : posx[disp_page] - 1;
 479              	    }else if( c == '\a' ){
 480              	        ;
 481              	    }else{
 482              	        buf[0] = c;
 483              	        buf[1] = attr;
 484              	        updateDispBuf(posx[disp_page], posy[disp_page], buf );
 485              	        posx[disp_page]++;
 486              	    }
 487              	
 488              	    if( posx[disp_page] >= MAX_X ){
 489              	        posx[disp_page] = (posx[disp_page] % MAX_X);
 490              	        posy[disp_page] += 1;
 491              	    }
 492              	    if( posy[disp_page] >= MAX_Y ){
 493              	        posy[disp_page] = MAX_Y - 1;
 494              	
 495              	        unsigned char buf[2*MAX_X];
 496              	        unsigned int seg = getDispSeg( disp_page );
 497              	        for(int y= 0; y+1 < MAX_Y; y++){
 498              	            fetch_data_word(     seg, (unsigned char *)(((y+1)*MAX_X)<<1), buf, MAX_X);
 499              	            copy_data_word (buf, seg, (unsigned char *)(( y   *MAX_X)<<1),      MAX_X);
 500              	
 501              	            fetch_data_word(     0xb800, (unsigned char *)(((y+1)*MAX_X)<<1), buf, MAX_X);
 502              	            copy_data_word (buf, 0xb800, (unsigned char *)(( y   *MAX_X)<<1),      MAX_X);
 503              	        }
 504              	        for(int i=0; i<sizeof(buf) ; i+=2){
 505              	            buf[i+1] = 0x07;
 506              	            buf[i+0] = ' ';
 507              	        }
 508              	
 509              	        copy_data_word (buf,    seg, (unsigned char *)(((MAX_Y-1)*MAX_X)<<1), MAX_X);
 510              	        copy_data_word (buf, 0xb800, (unsigned char *)(((MAX_Y-1)*MAX_X)<<1), MAX_X);
 511              	    }
 512              	
 513              	    set_cursorPos_memarea( disp_page );
 514              	}
 515              	
 516              	void int10_handler_ah09(void){
 517              	    // Write Character and Attribute at Cursor Position
 518              	    // The cursor does not move (but the characters print out from left to right)
 519              	
 520              	    unsigned char page = ((int10_reg_bx>>8)&0xff);
 521              	    char c             = (int10_reg_ax&0xff);
 522              	    unsigned char attr = (int10_reg_bx&0xff);
 523              	    unsigned char buf[2];
 524              	
 525              	    if( page != disp_page ) return ;
 526              	
 527              	    unsigned char px = posx[disp_page];
 528              	    unsigned char py = posy[disp_page];
 529              	
 530              	    buf[0] = c;
 531              	    buf[1] = attr;
 532              	    for(unsigned int i=0; i < int10_reg_cx; i++ ){
 533              	        updateDispBuf( px, py, buf );
 534              	
 535              	        if( ++px >= MAX_X ){ px = 0; py += 1; }
 536              	        if(   py >= MAX_Y ){ py = 0; }
 537              	    }
 538              	}
 539              	
 540              	
 541              	void int10_handler_ah0a(void){
 542              	    // Write character at current cursor
 543              	    int10_handler_ah09();
 544              	}
 545              	
 546              	void int10_handler_ah0e(void){
 547              	    // Write Text in Teletype Mode
 548              	    /*
 549              	    This service responds to the ASCII meanings of
 550              	    characters 07h (bell), 08h (backspace), 0Ah (line
 551              	    feed), and 0Dh (carriage return). All other ASCII
 552              	    values result in the displaying of a character, with
 553              	    the cursor moving one position.
 554              	
 555              	    See: http://vitaly_filatov.tripod.com/ng/asm/asm_023.15.html
 556              	    */
 557              	
 558              	    unsigned char page = ((int10_reg_bx>>8)&0xff);
 559              	    char c             = (int10_reg_ax&0xff);
 560              	    unsigned char attr = (int10_reg_bx&0xff);
 561              	
 562              	    if( page != disp_page ) return ;
 563              	
 564              	    if( c == '\n' ){
 565              	        posy[disp_page] ++;
 566              	    }else if( c == '\r'  ){
 567              	        posx[disp_page] = 0;
 568              	    }else if( c == '\b' ){
 569              	        posx[disp_page] = (posx[disp_page] == 0) ? 0 : posx[disp_page] - 1;
 570              	    }else if( c == '\a' ){
 571              	        ;
 572              	    }else{
 573              	        unsigned char buf[2];
 574              	        buf[0] = c;
 575              	        buf[1] = attr;
 576              	        updateDispBuf(posx[disp_page], posy[disp_page], buf );
 577              	        posx[disp_page]++;
 578              	    }
 579              	
 580              	    if( posx[disp_page] >= MAX_X ){
 581              	        posx[disp_page] = (posx[disp_page] % MAX_X);
 582              	        posy[disp_page] += 1;
 583              	    }
 584              	    if( posy[disp_page] >= MAX_Y ){
 585              	        posy[disp_page] = MAX_Y - 1;
 586              	
 587              	        unsigned char buf[2*MAX_X];
 588              	        unsigned int seg = getDispSeg( disp_page );
 589              	        for(int y= 0; y+1 < MAX_Y; y++){
 590              	            fetch_data_word(     seg, (unsigned char *)(((y+1)*MAX_X)<<1), buf, MAX_X);
 591              	            copy_data_word (buf, seg, (unsigned char *)(( y   *MAX_X)<<1),      MAX_X);
 592              	
 593              	            fetch_data_word(     0xb800, (unsigned char *)(((y+1)*MAX_X)<<1), buf, MAX_X);
 594              	            copy_data_word (buf, 0xb800, (unsigned char *)(( y   *MAX_X)<<1),      MAX_X);
 595              	        }
 596              	        for(int i=0; i<sizeof(buf) ; i+=2){
 597              	            buf[i+1] = 0x07;
 598              	            buf[i+0] = ' ';
 599              	        }
 600              	
 601              	        copy_data_word (buf,    seg, (unsigned char *)(((MAX_Y-1)*MAX_X)<<1), MAX_X);
 602              	        copy_data_word (buf, 0xb800, (unsigned char *)(((MAX_Y-1)*MAX_X)<<1), MAX_X);
 603              	    }
 604              	
 605              	    set_cursorPos_memarea( disp_page );  
 606              	}
 607              	
 608              	void int10_handler_ah0f(void){
 609              	    // Get Video State
 610              	
 611              	    int10_reg_bx = (disp_page<<8);    // BH : current display page
 612              	    // AH: #char columns per line
 613              	    // AL: Video mode
 614              	    int10_reg_ax = 0x5003;    // 03h     Text          80 x 25      All but MDA   16 fore/8 back   
 615              	}
 616              	
 617              	void int10_handler_ah10(void){
 618              	    // Set Palette Registers
 619              	
 620              	    if( (int10_reg_ax&0xff) == 3 ){
 621              	        // Toggle intensify/blinking bit
 622              	        return ;
 623              	    }else{
 624              	    	unsigned int reg_ss;
 625              	        char buf[64];
 626              	
 627 0f33 8CD0     	        asm volatile("mov  %%ss, %w0" : "=a"(reg_ss) : );
 628              	
 1859              		mov  %ss, %ax
 1860              	;# 0 "" 2
 1861              	#NO_APP
 1862 0f35 8EC0     		movw	%ax,	%es
 1863 0f37 50       		pushw	%ax
 1864 0f38 E8FEFF   		call	emuLogMessage
 1865 0f3b FF360000 		pushw	int10_reg_es
 1866 0f3f FF360000 		pushw	int10_reg_dx
 1867 0f43 FF360000 		pushw	int10_reg_cx
 1868 0f47 FF360000 		pushw	int10_reg_bx
 1869 0f4b FF360000 		pushw	int10_reg_ax
 1870 0f4f B80B00   		movw	$.LC1,	%ax
 1871 0f52 50       		pushw	%ax
 1872 0f53 B84000   		movw	$64,	%ax
 1873 0f56 50       		pushw	%ax
 1874 0f57 56       		pushw	%si
 1875 0f58 E8FEFF   		call	s_snprintf
 1876 0f5b 56       		pushw	%si
 1877 0f5c 06       		pushw	%es
 1878 0f5d E8FEFF   		call	emuLogMessage
 1879 0f60 89EC     		movw	%bp,	%sp
 1880 0f62 5D       		popw	%bp
 1881 0f63 07       		popw	%es
 1882 0f64 5E       		popw	%si
 1883 0f65 C3       		ret
 1884              	.L177:
 1885 0f66 C3       		ret
 1887              		.global	int10_handler_ah11
 1889              	int10_handler_ah11:
 1890 0f67 C3       		ret
 1892              		.global	int10_handler_ah12
 1894              	int10_handler_ah12:
 1895 0f68 A10000   		movw	int10_reg_bx,	%ax
 1896 0f6b B400     		movb	$0,	%ah
 1897 0f6d 83F810   		cmpw	$16,	%ax
 1898 0f70 740F     		je	.L189
 1899 0f72 83F832   		cmpw	$50,	%ax
 1900 0f75 7403     		je	.L190
 1901 0f77 E95BF3   		jmp	int10_default_handler
 1902              	.L190:
 1903 0f7a C7060000 		movw	$4626,	int10_reg_ax
 1903      1212
 1904 0f80 C3       		ret
 1905              	.L189:
 1906 0f81 C7060000 		movw	$0,	int10_reg_bx
 1906      0000
 1907 0f87 C7060000 		movw	$0,	int10_reg_cx
 1907      0000
 1908 0f8d C3       		ret
 1910              		.global	int10_handler_ah1a
 1912              	int10_handler_ah1a:
 1913 0f8e C7060000 		movw	$2,	int10_reg_bx
 1913      0200
 1914 0f94 C3       		ret
 1916              		.global	int10_handler_ahfe
 1918              	int10_handler_ahfe:
 1919 0f95 56       		pushw	%si
 1920 0f96 57       		pushw	%di
 1921 0f97 55       		pushw	%bp
 1922 0f98 89E5     		movw	%sp,	%bp
 1923 0f9a 83EC02   		subw	$2,	%sp
 1924 0f9d A00000   		movb	disp_page,	%al
 1925 0fa0 B108     		movb	$8,	%cl
 1926 0fa2 D3E0     		shlw	%cl,	%ax
 1927 0fa4 80C4D0   		addb	$-48,	%ah
 1928 0fa7 A30000   		movw	%ax,	int10_reg_es
 1929 0faa C746FE20 		movw	$32,	-2(%bp)
 1929      00
 1930 0faf 31FF     		xorw	%di,	%di
 1931 0fb1 BE0200   		movw	$2,	%si
 1932 0fb4 56       		pushw	%si
 1933 0fb5 57       		pushw	%di
 1934 0fb6 50       		pushw	%ax
 1935 0fb7 8D46FE   		leaw	-2(%bp),	%ax
 1936 0fba 50       		pushw	%ax
 1937 0fbb E8FEFF   		call	copy_data
 1938 0fbe 83C702   		addw	$2,	%di
 1939 0fc1 83C408   		addw	$8,	%sp
 1940 0fc4 81FFA00F 		cmpw	$4000,	%di
 1941 0fc8 7419     		je	.L192
 1942              	.L198:
 1943 0fca A10000   		movw	int10_reg_es,	%ax
 1944 0fcd 56       		pushw	%si
 1945 0fce 57       		pushw	%di
 1946 0fcf 50       		pushw	%ax
 1947 0fd0 8D46FE   		leaw	-2(%bp),	%ax
 1948 0fd3 50       		pushw	%ax
 1949 0fd4 E8FEFF   		call	copy_data
 1950 0fd7 83C702   		addw	$2,	%di
 1951 0fda 83C408   		addw	$8,	%sp
 1952 0fdd 81FFA00F 		cmpw	$4000,	%di
 1953 0fe1 75E7     		jne	.L198
 1954              	.L192:
 1955 0fe3 89EC     		movw	%bp,	%sp
 1956 0fe5 5D       		popw	%bp
 1957 0fe6 5F       		popw	%di
 1958 0fe7 5E       		popw	%si
 1959 0fe8 C3       		ret
 1961              		.global	int10_handler_ahff
 1963              	int10_handler_ahff:
 1964 0fe9 A10000   		movw	int10_reg_di,	%ax
 1965 0fec B9A00F   		movw	$4000,	%cx
 1966 0fef 31D2     		xorw	%dx,	%dx
 1967 0ff1 F7F1     		divw	%cx
 1968 0ff3 89160000 		movw	%dx,	int10_reg_di
 1969 0ff7 36833E00 		cmpw	$0,	%ss:int10_reg_cx
 1969      0000
 1970 0ffd 7503E9B4 		je	.L203
 1970      00
 1971 1002 56       		pushw	%si
 1972 1003 57       		pushw	%di
 1973 1004 31F6     		xorw	%si,	%si
 1974 1006 89F7     		movw	%si,	%di
 1975 1008 D1E7     		shlw	$1,	%di
 1976 100a 01FA     		addw	%di,	%dx
 1977 100c 31C0     		xorw	%ax,	%ax
 1978 100e 89C1     		movw	%ax,	%cx
 1979 1010 01D1     		addw	%dx,	%cx
 1980 1012 36130600 		adcw	%ss:int10_reg_es,	%ax
 1980      00
 1981 1017 8ED8     		movw	%ax,	%ds
 1982 1019 89CB     		movw	%cx,	%bx
 1983 101b 8A27     		movb	(%bx),	%ah
 1984 101d 89D1     		movw	%dx,	%cx
 1985 101f 41       		incw	%cx
 1986 1020 31DB     		xorw	%bx,	%bx
 1987 1022 01D9     		addw	%bx,	%cx
 1988 1024 36131E00 		adcw	%ss:int10_reg_es,	%bx
 1988      00
 1989 1029 8EDB     		movw	%bx,	%ds
 1990 102b 89CB     		movw	%cx,	%bx
 1991 102d 8A07     		movb	(%bx),	%al
 1992 102f F8       		clc
 1993 1030 B90000   		movw	$0,	%cx
 1994 1033 81D100B8 		adcw	$-18432,	%cx
 1995 1037 8ED9     		movw	%cx,	%ds
 1996 1039 89D3     		movw	%dx,	%bx
 1997 103b 8827     		movb	%ah,	(%bx)
 1998 103d 368B1E00 		movw	%ss:int10_reg_di,	%bx
 1998      00
 1999 1042 8D5901   		leaw	1(%bx,%di),	%bx
 2000 1045 31D2     		xorw	%dx,	%dx
 2001 1047 01D3     		addw	%dx,	%bx
 2002 1049 81D200B8 		adcw	$-18432,	%dx
 2003 104d 8EDA     		movw	%dx,	%ds
 2004 104f 8807     		movb	%al,	(%bx)
 2005 1051 46       		incw	%si
 2006 1052 363B3600 		cmpw	%ss:int10_reg_cx,	%si
 2006      00
 2007 1057 7358     		jnc	.L199
 2008              	.L208:
 2009 1059 368B1600 		movw	%ss:int10_reg_di,	%dx
 2009      00
 2010 105e 89F7     		movw	%si,	%di
 2011 1060 D1E7     		shlw	$1,	%di
 2012 1062 01FA     		addw	%di,	%dx
 2013 1064 31C0     		xorw	%ax,	%ax
 2014 1066 89C1     		movw	%ax,	%cx
 2015 1068 01D1     		addw	%dx,	%cx
 2016 106a 36130600 		adcw	%ss:int10_reg_es,	%ax
 2016      00
 2017 106f 8ED8     		movw	%ax,	%ds
 2018 1071 89CB     		movw	%cx,	%bx
 2019 1073 8A27     		movb	(%bx),	%ah
 2020 1075 89D1     		movw	%dx,	%cx
 2021 1077 41       		incw	%cx
 2022 1078 31DB     		xorw	%bx,	%bx
 2023 107a 01D9     		addw	%bx,	%cx
 2024 107c 36131E00 		adcw	%ss:int10_reg_es,	%bx
 2024      00
 2025 1081 8EDB     		movw	%bx,	%ds
 2026 1083 89CB     		movw	%cx,	%bx
 2027 1085 8A07     		movb	(%bx),	%al
 2028 1087 F8       		clc
 2029 1088 B90000   		movw	$0,	%cx
 2030 108b 81D100B8 		adcw	$-18432,	%cx
 2031 108f 8ED9     		movw	%cx,	%ds
 2032 1091 89D3     		movw	%dx,	%bx
 2033 1093 8827     		movb	%ah,	(%bx)
 2034 1095 368B1E00 		movw	%ss:int10_reg_di,	%bx
 2034      00
 2035 109a 8D5901   		leaw	1(%bx,%di),	%bx
 2036 109d 31D2     		xorw	%dx,	%dx
 2037 109f 01D3     		addw	%dx,	%bx
 2038 10a1 81D200B8 		adcw	$-18432,	%dx
 2039 10a5 8EDA     		movw	%dx,	%ds
 2040 10a7 8807     		movb	%al,	(%bx)
 2041 10a9 46       		incw	%si
 2042 10aa 363B3600 		cmpw	%ss:int10_reg_cx,	%si
 2042      00
 2043 10af 72A8     		jc	.L208
 2044              	.L199:
 2045 10b1 5F       		popw	%di
 2046 10b2 5E       		popw	%si
 2047 10b3 16       		pushw	%ss
 2048 10b4 1F       		popw	%ds
 2049 10b5 C3       		ret
 2050              	.L203:
 2051 10b6 C3       		ret
 2053              		.global	posy
 2054              		.bss
 2055              		.p2align	0
 2058              	posy:
 2059 0000 00000000 		.skip	8,0
 2059      00000000 
 2060              		.global	posx
 2061              		.p2align	0
 2064              	posx:
 2065 0008 00000000 		.skip	8,0
 2065      00000000 
 2066              		.global	disp_page
 2067              		.p2align	0
 2070              	disp_page:
 2071 0010 00       		.skip	1,0
 2072              		.comm	int10_reg_ss2,2,2
 2073              		.comm	int10_reg_ss,2,2
 2074              		.comm	int10_reg_sp,2,2
 2075              		.comm	int10_reg_es,2,2
 2076              		.comm	int10_reg_di,2,2
 2077              		.comm	int10_reg_dx,2,2
 2078              		.comm	int10_reg_cx,2,2
 2079              		.comm	int10_reg_bx,2,2
 2080              		.comm	int10_reg_ax,2,2
 2081              		.ident	"GCC: (GNU) 6.3.0"
   1              		.arch i8086,jumps
   2              		.code16
   3              		.att_syntax prefix
   4              	#NO_APP
   5              	#APP
   6              		   .global int13_handler_asm        
   7              	int13_handler_asm:                  
   8 0000 1E       		push %ds                         
   9 0001 06       		push %es                         
  10 0002 2E8C1600 	mov %ss, %cs:int13_reg_ss2
  10      00
  11 0007 50       	push %ax
  12 0008 51       	push %cx
  13 0009 52       	push %dx
  14 000a 53       	push %bx
  15 000b 2EFF3600 	push %cs:int13_reg_ss2
  15      00
  16 0010 55       	push %bp
  17 0011 56       	push %si
  18 0012 57       	push %di
  19              	                                    
  20 0013 2EA30000 	   mov %ax, %cs:int13_reg_ax        
  21 0017 2E891E00 	   mov %bx, %cs:int13_reg_bx        
  21      00
  22 001c 2E890E00 	   mov %cx, %cs:int13_reg_cx        
  22      00
  23 0021 2E891600 	   mov %dx, %cs:int13_reg_dx        
  23      00
  24 0026 2E8C1E00 	   mov %ds, %cs:int13_reg_ds        
  24      00
  25 002b 2E8C0600 	   mov %es, %cs:int13_reg_es        
  25      00
  26 0030 2E893600 	   mov %si, %cs:int13_reg_si        
  26      00
  27 0035 2E892600 	   mov %sp, %cs:int13_reg_sp        
  27      00
  28 003a 2E8C1600 	   mov %ss, %cs:int13_reg_ss        
  28      00
  29              	                                    
  30 003f 8CC8     		mov	%cs, %ax                     
  31 0041 8ED0     		mov	%ax, %ss                     
  32 0043 8ED8     		mov	%ax, %ds                     
  33 0045 BCFFFF   		mov	$0xffff, %sp                 
  34              	                                    
  35 0048 A10000   	   mov int13_reg_ax, %ax            
  36 004b 80FC00   		cmp	$0x00, %ah                   
  37 004e 7445     		je	int13_handler_asm_ah00       
  38 0050 80FC02   		cmp	$0x02, %ah                   
  39 0053 746A     		je	int13_handler_asm_ah02       
  40 0055 80FC03   		cmp	$0x03, %ah                   
  41 0058 7503E9A2 		je	int13_handler_asm_ah03       
  41      00
  42 005d 80FC08   		cmp	$0x08, %ah                   
  43 0060 7503E9DA 		je	int13_handler_asm_ah08       
  43      00
  44 0065 80FC15   		cmp	$0x15, %ah                   
  45 0068 7503E90D 		je	int13_handler_asm_ah15       
  45      01
  46 006d 80FC41   		cmp	$0x41, %ah                   
  47 0070 7503E93B 		je	int13_handler_asm_ah41       
  47      01
  48 0075 80FC42   		cmp	$0x42, %ah                   
  49 0078 7503E964 		je	int13_handler_asm_ah42       
  49      01
  50              	                                    
  51 007d E8FEFF   		call int13_default_handler       
  52              	                                    
  53 0080 2E8B2600 	   mov %cs:int13_reg_sp, %sp        
  53      00
  54 0085 2E8E1600 	   mov %cs:int13_reg_ss, %ss        
  54      00
  55              	                                    
  56 008a 5F       	pop %di
  57 008b 5E       	pop %si
  58 008c 5D       	pop %bp
  59 008d 5B       	pop %bx
  60 008e 5B       	pop %bx
  61 008f 5A       	pop %dx
  62 0090 59       	pop %cx
  63 0091 58       	pop %ax
  64 0092 07       		pop %es                          
  65 0093 1F       		pop %ds                          
  66 0094 CF       		iret                             
  67              	
  68              		int13_handler_asm_ah00:             
  69 0095 E8FEFF   		call int13_handler_ah00                    
  70              	                                    
  71 0098 2E8B2600 	   mov %cs:int13_reg_sp, %sp        
  71      00
  72 009d 2E8E1600 	   mov %cs:int13_reg_ss, %ss        
  72      00
  73              	                                    
  74 00a2 5F       	pop %di
  75 00a3 5E       	pop %si
  76 00a4 5D       	pop %bp
  77 00a5 5B       	pop %bx
  78 00a6 5B       	pop %bx
  79 00a7 5A       	pop %dx
  80 00a8 59       	pop %cx
  81 00a9 58       	pop %ax
  82 00aa 07       		pop %es                          
  83 00ab 1F       		pop %ds                          
  84 00ac B80000   	   mov $0, %ax                      
  85 00af 50       	   push %ax                         
  86 00b0 55       	   push %bp                         
  87 00b1 89E5     	   mov  %sp, %bp                    
  88 00b3 8B4608   	   movw 8(%bp), %ax                 
  89 00b6 83E0FE   	   andw $0xfffe, %ax                
  90 00b9 894608   	   movw %ax, 8(%bp)                 
  91 00bc 5D       	   pop  %bp                         
  92 00bd 58       	   pop  %ax                         
  93 00be CF       	   iret                             
  94              	
  95              		int13_handler_asm_ah02:             
  96 00bf E8FEFF   		call int13_handler_ah02                    
  97              	                                    
  98 00c2 2E8B2600 	   mov %cs:int13_reg_sp, %sp        
  98      00
  99 00c7 2E8E1600 	   mov %cs:int13_reg_ss, %ss        
  99      00
 100              	                                    
 101 00cc 5F       	pop %di
 102 00cd 5E       	pop %si
 103 00ce 5D       	pop %bp
 104 00cf 5B       	pop %bx
 105 00d0 5B       	pop %bx
 106 00d1 5A       	pop %dx
 107 00d2 59       	pop %cx
 108 00d3 58       	pop %ax
 109 00d4 07       		pop %es                          
 110 00d5 1F       		pop %ds                          
 111              	                                    
 112 00d6 2EA10000 	   mov %cs:int13_reg_ax, %ax        
 113 00da 80FC00   	   cmp $0, %ah                      
 114 00dd 7410     	   je 1f                            
 115              	                                    
 116 00df 50       	   push %ax                         
 117 00e0 55       	   push %bp                         
 118 00e1 89E5     	   mov  %sp, %bp                    
 119 00e3 8B4608   	   movw 8(%bp), %ax                 
 120 00e6 83C801   	   orw  $1, %ax                     
 121 00e9 894608   	   movw %ax, 8(%bp)                 
 122 00ec 5D       	   pop  %bp                         
 123 00ed 58       	   pop  %ax                         
 124 00ee CF       	   iret                             
 125              	1:                                  
 126 00ef 50       	   push %ax                         
 127 00f0 55       	   push %bp                         
 128 00f1 89E5     	   mov  %sp, %bp                    
 129 00f3 8B4608   	   movw 8(%bp), %ax                 
 130 00f6 83E0FE   	   andw $0xfffe, %ax                
 131 00f9 894608   	   movw %ax, 8(%bp)                 
 132 00fc 5D       	   pop  %bp                         
 133 00fd 58       	   pop  %ax                         
 134 00fe CF       	   iret                             
 135              	
 136              		int13_handler_asm_ah03:             
 137 00ff E8FEFF   		call int13_handler_ah03                    
 138              	                                    
 139 0102 2E8B2600 	   mov %cs:int13_reg_sp, %sp        
 139      00
 140 0107 2E8E1600 	   mov %cs:int13_reg_ss, %ss        
 140      00
 141              	                                    
 142 010c 5F       	pop %di
 143 010d 5E       	pop %si
 144 010e 5D       	pop %bp
 145 010f 5B       	pop %bx
 146 0110 5B       	pop %bx
 147 0111 5A       	pop %dx
 148 0112 59       	pop %cx
 149 0113 58       	pop %ax
 150 0114 07       		pop %es                          
 151 0115 1F       		pop %ds                          
 152              	                                    
 153 0116 2EA10000 	   mov %cs:int13_reg_ax, %ax        
 154 011a 80FC00   	   cmp $0, %ah                      
 155 011d 7410     	   je 2f                            
 156              	                                    
 157 011f 50       	   push %ax                         
 158 0120 55       	   push %bp                         
 159 0121 89E5     	   mov  %sp, %bp                    
 160 0123 8B4608   	   movw 8(%bp), %ax                 
 161 0126 83C801   	   orw  $1, %ax                     
 162 0129 894608   	   movw %ax, 8(%bp)                 
 163 012c 5D       	   pop  %bp                         
 164 012d 58       	   pop  %ax                         
 165 012e CF       	   iret                             
 166              	2:                                  
 167 012f 50       	   push %ax                         
 168 0130 55       	   push %bp                         
 169 0131 89E5     	   mov  %sp, %bp                    
 170 0133 8B4608   	   movw 8(%bp), %ax                 
 171 0136 83E0FE   	   andw $0xfffe, %ax                
 172 0139 894608   	   movw %ax, 8(%bp)                 
 173 013c 5D       	   pop  %bp                         
 174 013d 58       	   pop  %ax                         
 175 013e CF       	   iret                             
 176              	
 177              		int13_handler_asm_ah08:             
 178 013f E8FEFF   		call int13_handler_ah08                    
 179              	                                    
 180 0142 2E8B2600 	   mov %cs:int13_reg_sp, %sp        
 180      00
 181 0147 2E8E1600 	   mov %cs:int13_reg_ss, %ss        
 181      00
 182              	                                    
 183 014c 5F       	pop %di
 184 014d 5E       	pop %si
 185 014e 5D       	pop %bp
 186 014f 5B       	pop %bx
 187 0150 5B       	pop %bx
 188 0151 5A       	pop %dx
 189 0152 59       	pop %cx
 190 0153 58       	pop %ax
 191 0154 07       		pop %es                          
 192 0155 1F       		pop %ds                          
 193              	                                    
 194 0156 2E8A1E00 	   movb %cs:int13_reg_bx, %bl       
 194      00
 195 015b 2E8B0E00 	   mov  %cs:int13_reg_cx, %cx       
 195      00
 196 0160 2E8B1600 	   mov  %cs:int13_reg_dx, %dx       
 196      00
 197 0165 2E8A2601 	   movb %cs:int13_reg_ax+1, %ah     
 197      00
 198              	                                    
 199 016a 50       	   push %ax                         
 200 016b 55       	   push %bp                         
 201 016c 89E5     	   mov  %sp, %bp                    
 202 016e 8B4608   	   movw 8(%bp), %ax                 
 203 0171 83E0FE   	   andw $0xfffe, %ax                
 204 0174 894608   	   movw %ax, 8(%bp)                 
 205 0177 5D       	   pop  %bp                         
 206 0178 58       	   pop  %ax                         
 207 0179 CF       	   iret                             
 208              	
 209              		int13_handler_asm_ah15:             
 210 017a E8FEFF   		call int13_handler_ah15                    
 211              	                                    
 212 017d 2E8B2600 	   mov %cs:int13_reg_sp, %sp        
 212      00
 213 0182 2E8E1600 	   mov %cs:int13_reg_ss, %ss        
 213      00
 214              	                                    
 215 0187 5F       	pop %di
 216 0188 5E       	pop %si
 217 0189 5D       	pop %bp
 218 018a 5B       	pop %bx
 219 018b 5B       	pop %bx
 220 018c 5A       	pop %dx
 221 018d 59       	pop %cx
 222 018e 58       	pop %ax
 223 018f 07       		pop %es                          
 224 0190 1F       		pop %ds                          
 225              	                                    
 226 0191 2E8A2601 	   movb %cs:int13_reg_ax+1, %ah     
 226      00
 227 0196 2E8B0E00 	   mov  %cs:int13_reg_cx  , %cx     
 227      00
 228 019b 2E8B1600 	   mov  %cs:int13_reg_dx  , %dx     
 228      00
 229              	                                    
 230 01a0 50       	   push %ax                         
 231 01a1 55       	   push %bp                         
 232 01a2 89E5     	   mov  %sp, %bp                    
 233 01a4 8B4608   	   movw 8(%bp), %ax                 
 234 01a7 83E0FE   	   andw $0xfffe, %ax                
 235 01aa 894608   	   movw %ax, 8(%bp)                 
 236 01ad 5D       	   pop  %bp                         
 237 01ae 58       	   pop  %ax                         
 238 01af CF       	   iret                             
 239              	
 240              		int13_handler_asm_ah41:             
 241 01b0 E8FEFF   		call int13_handler_ah41                    
 242              	                                    
 243 01b3 2E8B2600 	   mov %cs:int13_reg_sp, %sp        
 243      00
 244 01b8 2E8E1600 	   mov %cs:int13_reg_ss, %ss        
 244      00
 245              	                                    
 246 01bd 5F       	pop %di
 247 01be 5E       	pop %si
 248 01bf 5D       	pop %bp
 249 01c0 5B       	pop %bx
 250 01c1 5B       	pop %bx
 251 01c2 5A       	pop %dx
 252 01c3 59       	pop %cx
 253 01c4 58       	pop %ax
 254 01c5 07       		pop %es                          
 255 01c6 1F       		pop %ds                          
 256              	                                    
 257 01c7 2E8B0E00 	   mov  %cs:int13_reg_cx, %cx       
 257      00
 258 01cc BB55AA   	   mov  $0xAA55, %bx                
 259 01cf B401     	   movb $0x01,   %ah                
 260              	                                    
 261 01d1 50       	   push %ax                         
 262 01d2 55       	   push %bp                         
 263 01d3 89E5     	   mov  %sp, %bp                    
 264 01d5 8B4608   	   movw 8(%bp), %ax                 
 265 01d8 83E0FE   	   andw $0xfffe, %ax                
 266 01db 894608   	   movw %ax, 8(%bp)                 
 267 01de 5D       	   pop  %bp                         
 268 01df 58       	   pop  %ax                         
 269 01e0 CF       	   iret                             
 270              	
 271              		int13_handler_asm_ah42:             
 272 01e1 E8FEFF   		call int13_handler_ah42                    
 273              	                                    
 274 01e4 2E8B2600 	   mov %cs:int13_reg_sp, %sp        
 274      00
 275 01e9 2E8E1600 	   mov %cs:int13_reg_ss, %ss        
 275      00
 276              	                                    
 277 01ee 5F       	pop %di
 278 01ef 5E       	pop %si
 279 01f0 5D       	pop %bp
 280 01f1 5B       	pop %bx
 281 01f2 5B       	pop %bx
 282 01f3 5A       	pop %dx
 283 01f4 59       	pop %cx
 284 01f5 58       	pop %ax
 285 01f6 07       		pop %es                          
 286 01f7 1F       		pop %ds                          
 287              	                                    
 288 01f8 2E8A2601 	   movb %cs:int13_reg_ax+1, %ah     
 288      00
 289 01fd 80FC00   	   cmp  $0, %ah                     
 290 0200 7410     	   je 1f                            
 291              	                                    
 292 0202 50       	   push %ax                         
 293 0203 55       	   push %bp                         
 294 0204 89E5     	   mov  %sp, %bp                    
 295 0206 8B4608   	   movw 8(%bp), %ax                 
 296 0209 83C801   	   orw  $1, %ax                     
 297 020c 894608   	   movw %ax, 8(%bp)                 
 298 020f 5D       	   pop  %bp                         
 299 0210 58       	   pop  %ax                         
 300 0211 CF       	   iret                             
 301              	1:                                  
 302 0212 50       	   push %ax                         
 303 0213 55       	   push %bp                         
 304 0214 89E5     	   mov  %sp, %bp                    
 305 0216 8B4608   	   movw 8(%bp), %ax                 
 306 0219 83E0FE   	   andw $0xfffe, %ax                
 307 021c 894608   	   movw %ax, 8(%bp)                 
 308 021f 5D       	   pop  %bp                         
 309 0220 58       	   pop  %ax                         
 310 0221 CF       	   iret                             
 311              	
 312              		.section	.rodata.str1.1,"aMS",@progbits,1
 313              	.LC0:
 314 0000 494E5420 		.string	"INT 0x13\n"
 314      30783133 
 314      0A00
 315              	.LC1:
 316 000a 41583A20 		.string	"AX: %04x BX: %04x CX: %04x DX: %04x ES: %04x \n"
 316      25303478 
 316      2042583A 
 316      20253034 
 316      78204358 
 317              	#NO_APP
 318              		.text
 319              		.global	int13_default_handler
 321              	int13_default_handler:
 322 0222 56       		pushw	%si
 323 0223 57       		pushw	%di
 324 0224 06       		pushw	%es
 325 0225 55       		pushw	%bp
 326 0226 89E5     		movw	%sp,	%bp
 327 0228 83C480   		addw	$-128,	%sp
 328 022b B80000   		movw	$.LC0,	%ax
 329 022e 50       		pushw	%ax
 330 022f BF8000   		movw	$128,	%di
 331 0232 57       		pushw	%di
 332 0233 8D7680   		leaw	-128(%bp),	%si
 333 0236 56       		pushw	%si
 334 0237 E8FEFF   		call	s_snprintf
 335 023a 56       		pushw	%si
 336              	#APP
 337              	;# 219 "src/int13h.c" 1
   1              	#include <stdio.h>
   2              	#include "basicio.h"
   3              	
   4              	#include "system.h"
   5              	#include "asmfuncs.h"
   6              	#include "emu_interface.h"
   7              	
   8              	
   9              	unsigned int int13_reg_ax;
  10              	unsigned int int13_reg_bx;
  11              	unsigned int int13_reg_cx;
  12              	unsigned int int13_reg_dx;
  13              	unsigned int int13_reg_ds;
  14              	unsigned int int13_reg_es;
  15              	unsigned int int13_reg_si;
  16              	
  17              	unsigned int int13_reg_sp;
  18              	unsigned int int13_reg_ss;
  19              	
  20              	unsigned int int13_reg_ss2;
  21              	
  22              	#define PUSHA \
  23              	"mov %ss, %cs:int13_reg_ss2\n" \
  24              	"push %ax\n" \
  25              	"push %cx\n" \
  26              	"push %dx\n" \
  27              	"push %bx\n" \
  28              	"push %cs:int13_reg_ss2\n" \
  29              	"push %bp\n" \
  30              	"push %si\n" \
  31              	"push %di\n"
  32              	
  33              	#define POPA \
  34              	"pop %di\n" \
  35              	"pop %si\n" \
  36              	"pop %bp\n" \
  37              	"pop %bx\n"  /* skip next 2 bytes of stack */ \
  38              	"pop %bx\n" \
  39              	"pop %dx\n" \
  40              	"pop %cx\n" \
  41              	"pop %ax\n" 
  42              	
  43              	
  44              	__asm__ (
  45              	"   .global int13_handler_asm        \n"
  46              	"int13_handler_asm:                  \n"
  47              	"	push %ds                         \n"
  48              	"	push %es                         \n"
  49              	PUSHA /*"	pusha                            \n"*/
  50              	"                                    \n"
  51              	"   mov %ax, %cs:int13_reg_ax        \n"
  52              	"   mov %bx, %cs:int13_reg_bx        \n"
  53              	"   mov %cx, %cs:int13_reg_cx        \n"
  54              	"   mov %dx, %cs:int13_reg_dx        \n"
  55              	"   mov %ds, %cs:int13_reg_ds        \n"
  56              	"   mov %es, %cs:int13_reg_es        \n"
  57              	"   mov %si, %cs:int13_reg_si        \n"
  58              	"   mov %sp, %cs:int13_reg_sp        \n"
  59              	"   mov %ss, %cs:int13_reg_ss        \n"
  60              	"                                    \n"
  61              	"	mov	%cs, %ax                     \n"
  62              	"	mov	%ax, %ss                     \n"
  63              	"	mov	%ax, %ds                     \n"
  64              	"	mov	$0xffff, %sp                 \n"
  65              	"                                    \n"
  66              	"   mov int13_reg_ax, %ax            \n"
  67              	"	cmp	$0x00, %ah                   \n"
  68              	"	je	int13_handler_asm_ah00       \n"
  69              	"	cmp	$0x02, %ah                   \n"
  70              	"	je	int13_handler_asm_ah02       \n"
  71              	"	cmp	$0x03, %ah                   \n"
  72              	"	je	int13_handler_asm_ah03       \n"
  73              	"	cmp	$0x08, %ah                   \n"
  74              	"	je	int13_handler_asm_ah08       \n"
  75              	"	cmp	$0x15, %ah                   \n"
  76              	"	je	int13_handler_asm_ah15       \n"
  77              	"	cmp	$0x41, %ah                   \n"
  78              	"	je	int13_handler_asm_ah41       \n"
  79              	"	cmp	$0x42, %ah                   \n"
  80              	"	je	int13_handler_asm_ah42       \n"
  81              	"                                    \n"
  82              	"	call int13_default_handler       \n"
  83              	"                                    \n"
  84              	"   mov %cs:int13_reg_sp, %sp        \n"
  85              	"   mov %cs:int13_reg_ss, %ss        \n"
  86              	"                                    \n"
  87              	POPA /*"	popa                             \n"*/
  88              	"	pop %es                          \n"
  89              	"	pop %ds                          \n"
  90              	"	iret                             \n");
  91              	
  92              	#define HEAD_OF_ASM_HANDLER(func)  \
  93              	"	call " func "                    \n" \
  94              	"                                    \n" \
  95              	"   mov %cs:int13_reg_sp, %sp        \n" \
  96              	"   mov %cs:int13_reg_ss, %ss        \n" \
  97              	"                                    \n" \
  98              	POPA /*"	popa                             \n"*/ \
  99              	"	pop %es                          \n" \
 100              	"	pop %ds                          \n" 
 101              	
 102              	#define IRET_WITH_CARRYFLAG  \
 103              	"   push %ax                         \n" \
 104              	"   push %bp                         \n" \
 105              	"   mov  %sp, %bp                    \n" \
 106              	"   movw 8(%bp), %ax                 \n" /* set the carry flag */ \
 107              	"   orw  $1, %ax                     \n" \
 108              	"   movw %ax, 8(%bp)                 \n" \
 109              	"   pop  %bp                         \n" \
 110              	"   pop  %ax                         \n" \
 111              	"   iret                             \n" 
 112              	
 113              	#define IRET_WITHOUT_CARRYFLAG  \
 114              	"   push %ax                         \n" \
 115              	"   push %bp                         \n" \
 116              	"   mov  %sp, %bp                    \n" \
 117              	"   movw 8(%bp), %ax                 \n" /* clear the carry flag */ \
 118              	"   andw $0xfffe, %ax                \n" \
 119              	"   movw %ax, 8(%bp)                 \n" \
 120              	"   pop  %bp                         \n" \
 121              	"   pop  %ax                         \n" \
 122              	"   iret                             \n"
 123              	
 124              	
 125              	__asm__ (
 126              	"int13_handler_asm_ah00:             \n"
 127              	HEAD_OF_ASM_HANDLER("int13_handler_ah00")
 128              	"   mov $0, %ax                      \n"
 129              	IRET_WITHOUT_CARRYFLAG);
 130              	
 131              	__asm__ (
 132              	"int13_handler_asm_ah02:             \n"
 133              	HEAD_OF_ASM_HANDLER("int13_handler_ah02")
 134              	"                                    \n"
 135              	"   mov %cs:int13_reg_ax, %ax        \n"
 136              	"   cmp $0, %ah                      \n"
 137              	"   je 1f                            \n"
 138              	"                                    \n"
 139              	    IRET_WITH_CARRYFLAG
 140              	"1:                                  \n"
 141              	    IRET_WITHOUT_CARRYFLAG);
 142              	
 143              	__asm__ (
 144              	"int13_handler_asm_ah03:             \n"
 145              	HEAD_OF_ASM_HANDLER("int13_handler_ah03")
 146              	"                                    \n"
 147              	"   mov %cs:int13_reg_ax, %ax        \n"
 148              	"   cmp $0, %ah                      \n"
 149              	"   je 2f                            \n"
 150              	"                                    \n"
 151              	    IRET_WITH_CARRYFLAG
 152              	"2:                                  \n"
 153              	    IRET_WITHOUT_CARRYFLAG);
 154              	
 155              	__asm__ (
 156              	"int13_handler_asm_ah08:             \n"
 157              	HEAD_OF_ASM_HANDLER("int13_handler_ah08")
 158              	"                                    \n"
 159              	"   movb %cs:int13_reg_bx, %bl       \n"
 160              	"   mov  %cs:int13_reg_cx, %cx       \n"
 161              	"   mov  %cs:int13_reg_dx, %dx       \n"
 162              	"   movb %cs:int13_reg_ax+1, %ah     \n"
 163              	"                                    \n"
 164              	IRET_WITHOUT_CARRYFLAG);
 165              	
 166              	
 167              	__asm__ (
 168              	"int13_handler_asm_ah15:             \n"
 169              	HEAD_OF_ASM_HANDLER("int13_handler_ah15")
 170              	"                                    \n"
 171              	"   movb %cs:int13_reg_ax+1, %ah     \n"
 172              	"   mov  %cs:int13_reg_cx  , %cx     \n"
 173              	"   mov  %cs:int13_reg_dx  , %dx     \n"
 174              	"                                    \n"
 175              	IRET_WITHOUT_CARRYFLAG);
 176              	
 177              	
 178              	__asm__ (
 179              	"int13_handler_asm_ah41:             \n"
 180              	HEAD_OF_ASM_HANDLER("int13_handler_ah41")
 181              	"                                    \n"
 182              	"   mov  %cs:int13_reg_cx, %cx       \n"
 183              	"   mov  $0xAA55, %bx                \n"
 184              	"   movb $0x01,   %ah                \n"
 185              	"                                    \n"
 186              	IRET_WITHOUT_CARRYFLAG);
 187              	
 188              	__asm__ (
 189              	"int13_handler_asm_ah42:             \n"
 190              	HEAD_OF_ASM_HANDLER("int13_handler_ah42")
 191              	"                                    \n"
 192              	"   movb %cs:int13_reg_ax+1, %ah     \n"
 193              	"   cmp  $0, %ah                     \n"
 194              	"   je 1f                            \n"
 195              	"                                    \n"
 196              	    IRET_WITH_CARRYFLAG
 197              	"1:                                  \n"
 198              	    IRET_WITHOUT_CARRYFLAG);
 199              	
 200              	
 201              	/*******************************************
 202              	 * Definitions of global variables in bios.c
 203              	 *******************************************/
 204              	extern unsigned long BufMem[1024/sizeof(unsigned long)];
 205              	extern unsigned int  hdd_ready;
 206              	extern unsigned int  hdd_cylinder;
 207              	extern unsigned int  hdd_head;
 208              	extern unsigned int  hdd_sector;
 209              	extern unsigned long hdd_total_sectors;
 210              	/*******************************************/
 211              	
 212              	//#define INT13H_DEBUG
 213              	
 214              	
 215              	void int13_default_handler(void){
 216              	    char buf[128];
 217              		unsigned int reg_ss;
 218              	
 219 023b 8CD0     	    asm volatile("mov  %%ss, %w0" : "=a"(reg_ss) : );
 220              	    s_snprintf(buf, sizeof(buf), "INT 0x13\n");
 338              		mov  %ss, %ax
 339              	;# 0 "" 2
 340              	#NO_APP
 341 023d 8EC0     		movw	%ax,	%es
 342 023f 50       		pushw	%ax
 343 0240 E8FEFF   		call	emuLogMessage
 344 0243 FF360000 		pushw	int13_reg_es
 345 0247 FF360000 		pushw	int13_reg_dx
 346 024b FF360000 		pushw	int13_reg_cx
 347 024f FF360000 		pushw	int13_reg_bx
 348 0253 FF360000 		pushw	int13_reg_ax
 349 0257 B80A00   		movw	$.LC1,	%ax
 350 025a 50       		pushw	%ax
 351 025b 57       		pushw	%di
 352 025c 56       		pushw	%si
 353 025d E8FEFF   		call	s_snprintf
 354 0260 56       		pushw	%si
 355 0261 06       		pushw	%es
 356 0262 E8FEFF   		call	emuLogMessage
 357 0265 89EC     		movw	%bp,	%sp
 358 0267 5D       		popw	%bp
 359 0268 07       		popw	%es
 360 0269 5F       		popw	%di
 361 026a 5E       		popw	%si
 362 026b C3       		ret
 364              		.global	int13_handler_ah00
 366              	int13_handler_ah00:
 367 026c C3       		ret
 369              		.global	int13_handler_ah08
 371              	int13_handler_ah08:
 372 026d A10000   		movw	int13_reg_dx,	%ax
 373 0270 258000   		andw	$128,	%ax
 374 0273 743B     		je	.L5
 375 0275 C7060000 		movw	$0,	int13_reg_ax
 375      0000
 376 027b C7060000 		movw	$0,	int13_reg_bx
 376      0000
 377 0281 833E0000 		cmpw	$0,	hdd_ready
 377      00
 378 0286 743E     		je	.L6
 379 0288 8B160000 		movw	hdd_cylinder,	%dx
 380 028c A00000   		movb	hdd_sector,	%al
 381 028f 83E03F   		andw	$63,	%ax
 382 0292 08D0     		orb	%dl,	%al
 383 0294 B102     		movb	$2,	%cl
 384 0296 D3EA     		shrw	%cl,	%dx
 385 0298 81E2C000 		andw	$192,	%dx
 386 029c 09C2     		orw	%ax,	%dx
 387 029e 89160000 		movw	%dx,	int13_reg_cx
 388 02a2 A10000   		movw	hdd_head,	%ax
 389 02a5 B108     		movb	$8,	%cl
 390 02a7 D3E0     		shlw	%cl,	%ax
 391 02a9 83C801   		orw	$1,	%ax
 392 02ac A30000   		movw	%ax,	int13_reg_dx
 393 02af C3       		ret
 394              	.L5:
 395 02b0 A30000   		movw	%ax,	int13_reg_ax
 396 02b3 C7060000 		movw	$4,	int13_reg_bx
 396      0400
 397 02b9 C7060000 		movw	$20242,	int13_reg_cx
 397      124F
 398 02bf C7060000 		movw	$258,	int13_reg_dx
 398      0201
 399 02c5 C3       		ret
 400              	.L6:
 401 02c6 C7060000 		movw	$0,	int13_reg_cx
 401      0000
 402 02cc C7060000 		movw	$0,	int13_reg_dx
 402      0000
 403 02d2 C3       		ret
 405              		.global	int13_handler_ah15
 407              	int13_handler_ah15:
 408 02d3 A10000   		movw	int13_reg_dx,	%ax
 409 02d6 A880     		testb	$-128,	%al
 410 02d8 741A     		je	.L11
 411 02da 833E0000 		cmpw	$0,	hdd_ready
 411      00
 412 02df 741B     		je	.L12
 413 02e1 C7060000 		movw	$768,	int13_reg_ax
 413      0003
 414 02e7 A10200   		movw	hdd_total_sectors+2,	%ax
 415 02ea A30000   		movw	%ax,	int13_reg_cx
 416 02ed A10000   		movw	hdd_total_sectors,	%ax
 417 02f0 A30000   		movw	%ax,	int13_reg_dx
 418 02f3 C3       		ret
 419              	.L11:
 420 02f4 83E07F   		andw	$127,	%ax
 421 02f7 83F801   		cmpw	$1,	%ax
 422 02fa 7607     		jbe	.L16
 423              	.L12:
 424 02fc C7060000 		movw	$0,	int13_reg_ax
 424      0000
 425 0302 C3       		ret
 426              	.L16:
 427 0303 C7060000 		movw	$256,	int13_reg_ax
 427      0001
 428 0309 C3       		ret
 430              		.global	int13_handler_ah41
 432              	int13_handler_ah41:
 433 030a C7060000 		movw	$0,	int13_reg_cx
 433      0000
 434 0310 C3       		ret
 436              		.global	int13_handler_ah02
 438              	int13_handler_ah02:
 439 0311 56       		pushw	%si
 440 0312 57       		pushw	%di
 441 0313 55       		pushw	%bp
 442 0314 89E5     		movw	%sp,	%bp
 443 0316 83EC06   		subw	$6,	%sp
 444 0319 8B160000 		movw	int13_reg_cx,	%dx
 445 031d 89D1     		movw	%dx,	%cx
 446 031f D1E1     		shlw	$1,	%cx
 447 0321 D1E1     		shlw	$1,	%cx
 448 0323 81E10003 		andw	$768,	%cx
 449 0327 89CB     		movw	%cx,	%bx
 450 0329 89D0     		movw	%dx,	%ax
 451 032b B108     		movb	$8,	%cl
 452 032d D3E8     		shrw	%cl,	%ax
 453 032f 01C3     		addw	%ax,	%bx
 454 0331 895EFE   		movw	%bx,	-2(%bp)
 455 0334 83E23F   		andw	$63,	%dx
 456 0337 8956FA   		movw	%dx,	-6(%bp)
 457 033a 31F6     		xorw	%si,	%si
 458 033c A10000   		movw	int13_reg_dx,	%ax
 459 033f 89C3     		movw	%ax,	%bx
 460 0341 D3EB     		shrw	%cl,	%bx
 461 0343 89F7     		movw	%si,	%di
 462 0345 30E4     		xorb	%ah,	%ah
 463 0347 89C2     		movw	%ax,	%dx
 464 0349 8946FC   		movw	%ax,	-4(%bp)
 465              	#APP
 466              	;# 322 "src/int13h.c" 1
 221              	    emuLogMessage(reg_ss, (uint16_t)buf);
 222              	
 223              	    s_snprintf(buf, sizeof(buf), "AX: %04x BX: %04x CX: %04x DX: %04x ES: %04x \n", 
 224              	        int13_reg_ax, int13_reg_bx, int13_reg_cx, int13_reg_dx, int13_reg_es);
 225              	    emuLogMessage(reg_ss, (uint16_t)buf);
 226              	}
 227              	
 228              	void int13_handler_ah00(void){
 229              	    // reset disk system
 230              	    return ;
 231              	}
 232              	
 233              	void int13_handler_ah08(void){
 234              	    // Get current drive parameters
 235              	
 236              	#ifdef INT13H_DEBUG
 237              	    s_printf("\nINT13H AH=8H   DX=0x%02x\n", int13_reg_dx);
 238              	#endif
 239              	
 240              	    if( (int13_reg_dx&0x80) == 0x80 ){
 241              	        // HDD
 242              	
 243              	        // AH: return code (0x00 : no error)
 244              	        int13_reg_ax = 0x0000;
 245              	
 246              	        // BH: -, BL: Drive type 
 247              	        int13_reg_bx = 0x0000;
 248              	
 249              	        if( hdd_ready ){
 250              	            // CH: Maximum value for cylinder, CL: higher 2-bit of cylinder , sectors per track
 251              	            int13_reg_cx = ( (hdd_cylinder&0xff) | ((hdd_cylinder>>2)&0xc0) | (hdd_sector&0x3f) );
 252              	
 253              	            // DH: head (0based), DL: number of drives attached
 254              	            int13_reg_dx = ( ((hdd_head&0xff)<<8) | 0x01 );
 255              	        }else{
 256              	            int13_reg_cx = 0x0000;  // CH: Maximum value for cylinder, CL: sectors per track
 257              	            int13_reg_dx = 0x0000;  // DH: head (0based), DL: number of drives attached
 258              	        }
 259              	    }else{
 260              	        int13_reg_ax = 0x0000;
 261              	        int13_reg_bx = 0x0004;  // BH: -, BL: Drive type 
 262              	        int13_reg_cx = 0x4f12;  // CH: Maximum value for cylinder, CL: sectors per track
 263              	        int13_reg_dx = 0x0102;  // DH: head (0based), DL: number of drives attached
 264              	    }
 265              	}
 266              	
 267              	void int13_handler_ah15(void){
 268              	    // Read disk type/DASD type
 269              	
 270              	#ifdef INT13H_DEBUG
 271              	    s_printf("\nINT13H AH=15H   DX=0x%02x\n", int13_reg_dx);
 272              	#endif
 273              	
 274              	    if( (int13_reg_dx&0x0080) ){
 275              	        // HDD
 276              	
 277              	        if( hdd_ready && ((int13_reg_dx&0x80) == 0x80) ){
 278              	            int13_reg_ax = 0x0300;  // fixed disk present
 279              	            int13_reg_cx = ((hdd_total_sectors>>16) & 0xffff);
 280              	            int13_reg_dx = ( hdd_total_sectors      & 0xffff);
 281              	        }else{
 282              	            int13_reg_ax = 0x0000;
 283              	        }
 284              	    }else{
 285              	        // FDD
 286              	        if( (int13_reg_dx&0x7f) == 0 || (int13_reg_dx&0x7f) == 1 ){
 287              	            // diskette, no change detection present
 288              	            int13_reg_ax = 0x0100;
 289              	        }else{
 290              	            int13_reg_ax = 0x0000;
 291              	        }
 292              	    }
 293              	}
 294              	
 295              	void int13_handler_ah41(void){
 296              	    // Check Extensions Present
 297              	
 298              	    if( (int13_reg_dx&0x0080) ){
 299              	        // HDD
 300              	        int13_reg_cx = 0x0000;
 301              	    }else{
 302              	        // FDD
 303              	        int13_reg_cx = 0x0000;
 304              	    }
 305              	
 306              	    return ;
 307              	}
 308              	
 309              	
 310              	void int13_handler_ah02(void){
 311              	    unsigned int  counter  = 0;
 312              	    unsigned int  nsector  = (int13_reg_ax&0xff);
 313              	    unsigned long cylinder = ((int13_reg_cx&0xff00)>>8) + ((int13_reg_cx&0xc0)<<2);
 314              	    unsigned long sector   = (int13_reg_cx&0x3f);
 315              	    unsigned long head     = ((int13_reg_dx&0xff00)>>8);
 316              	    unsigned int  drive    = (int13_reg_dx&0xff);
 317              	
 318              		unsigned int reg_ss;
 319              	    unsigned long pos;
 320              		uint8_t result;
 321              	
 322 034c 8CD0     	    asm volatile("mov  %%ss, %w0" : "=a"(reg_ss) : );
 323              	
 467              		mov  %ss, %ax
 468              	;# 0 "" 2
 469              	#NO_APP
 470 034e 83FA01   		cmpw	$1,	%dx
 471 0351 7703E99A 		jbe	.L30
 471      00
 472 0356 817EFC80 		cmpw	$128,	-4(%bp)
 472      00
 473 035b 740C     		je	.L31
 474              	.L21:
 475 035d C7060000 		movw	$-22016,	int13_reg_ax
 475      00AA
 476 0363 89EC     		movw	%bp,	%sp
 477 0365 5D       		popw	%bp
 478 0366 5F       		popw	%di
 479 0367 5E       		popw	%si
 480 0368 C3       		ret
 481              	.L31:
 482 0369 A10000   		movw	hdd_head,	%ax
 483 036c 40       		incw	%ax
 484 036d F766FE   		mulw	-2(%bp)
 485 0370 01C3     		addw	%ax,	%bx
 486 0372 11D7     		adcw	%dx,	%di
 487 0374 8B0E0000 		movw	hdd_sector,	%cx
 488 0378 89F8     		movw	%di,	%ax
 489 037a F7E1     		mulw	%cx
 490 037c 89C7     		movw	%ax,	%di
 491 037e 89D8     		movw	%bx,	%ax
 492 0380 F7E1     		mulw	%cx
 493 0382 01FA     		addw	%di,	%dx
 494 0384 8B7EFA   		movw	-6(%bp),	%di
 495 0387 83C7FF   		addw	$-1,	%di
 496 038a 89F1     		movw	%si,	%cx
 497 038c 83D1FF   		adcw	$-1,	%cx
 498 038f 01C7     		addw	%ax,	%di
 499 0391 11D1     		adcw	%dx,	%cx
 500 0393 C746FC02 		movw	$2,	-4(%bp)
 500      00
 501              	.L20:
 502 0398 A10000   		movw	int13_reg_ax,	%ax
 503 039b 25FF00   		andw	$255,	%ax
 504 039e 8946FE   		movw	%ax,	-2(%bp)
 505 03a1 7503E987 		je	.L25
 505      00
 506 03a6 31F6     		xorw	%si,	%si
 507              	.L23:
 508 03a8 89F0     		movw	%si,	%ax
 509 03aa D1E0     		shlw	$1,	%ax
 510 03ac D1E0     		shlw	$1,	%ax
 511 03ae D1E0     		shlw	$1,	%ax
 512 03b0 D1E0     		shlw	$1,	%ax
 513 03b2 D1E0     		shlw	$1,	%ax
 514 03b4 D1E0     		shlw	$1,	%ax
 515 03b6 D1E0     		shlw	$1,	%ax
 516 03b8 D1E0     		shlw	$1,	%ax
 517 03ba D1E0     		shlw	$1,	%ax
 518 03bc 03060000 		addw	int13_reg_bx,	%ax
 519 03c0 50       		pushw	%ax
 520 03c1 FF360000 		pushw	int13_reg_es
 521 03c5 51       		pushw	%cx
 522 03c6 894EFA   		movw	%cx,	-6(%bp)
 523 03c9 57       		pushw	%di
 524 03ca FF76FC   		pushw	-4(%bp)
 525 03cd E8FEFF   		call	emuReadDriveSector
 526 03d0 83C40A   		addw	$10,	%sp
 527 03d3 84C0     		testb	%al,	%al
 528 03d5 7586     		jne	.L21
 529 03d7 46       		incw	%si
 530 03d8 83C701   		addw	$1,	%di
 531 03db 8B4EFA   		movw	-6(%bp),	%cx
 532 03de 83D100   		adcw	$0,	%cx
 533 03e1 3976FE   		cmpw	%si,	-2(%bp)
 534 03e4 75C2     		jne	.L23
 535 03e6 89360000 		movw	%si,	int13_reg_ax
 536              	.L32:
 537 03ea 89EC     		movw	%bp,	%sp
 538 03ec 5D       		popw	%bp
 539 03ed 5F       		popw	%di
 540 03ee 5E       		popw	%si
 541 03ef C3       		ret
 542              	.L30:
 543 03f0 8B46FE   		movw	-2(%bp),	%ax
 544 03f3 89F2     		movw	%si,	%dx
 545 03f5 D1E0     		shlw	%ax
 546 03f7 D1D2     		rclw	%dx
 547 03f9 01C3     		addw	%ax,	%bx
 548 03fb 11D7     		adcw	%dx,	%di
 549 03fd 89D8     		movw	%bx,	%ax
 550 03ff 89FA     		movw	%di,	%dx
 551 0401 D1E0     		shlw	%ax
 552 0403 D1D2     		rclw	%dx
 553 0405 D1E0     		shlw	%ax
 554 0407 D1D2     		rclw	%dx
 555 0409 D1E0     		shlw	%ax
 556 040b 8946FE   		movw	%ax,	-2(%bp)
 557 040e D1D2     		rclw	%dx
 558 0410 8B46FE   		movw	-2(%bp),	%ax
 559 0413 01D8     		addw	%bx,	%ax
 560 0415 11FA     		adcw	%di,	%dx
 561 0417 D1E0     		shlw	%ax
 562 0419 D1D2     		rclw	%dx
 563 041b 8B7EFA   		movw	-6(%bp),	%di
 564 041e 83C7FF   		addw	$-1,	%di
 565 0421 89F1     		movw	%si,	%cx
 566 0423 83D1FF   		adcw	$-1,	%cx
 567 0426 01C7     		addw	%ax,	%di
 568 0428 11D1     		adcw	%dx,	%cx
 569 042a E96BFF   		jmp	.L20
 570              	.L25:
 571 042d 8B76FE   		movw	-2(%bp),	%si
 572 0430 89360000 		movw	%si,	int13_reg_ax
 573 0434 EBB4     		jmp	.L32
 575              		.global	int13_handler_ah03
 577              	int13_handler_ah03:
 578 0436 56       		pushw	%si
 579 0437 57       		pushw	%di
 580 0438 55       		pushw	%bp
 581 0439 89E5     		movw	%sp,	%bp
 582 043b 83EC06   		subw	$6,	%sp
 583 043e 8B160000 		movw	int13_reg_cx,	%dx
 584 0442 89D1     		movw	%dx,	%cx
 585 0444 D1E1     		shlw	$1,	%cx
 586 0446 D1E1     		shlw	$1,	%cx
 587 0448 81E10003 		andw	$768,	%cx
 588 044c 89CB     		movw	%cx,	%bx
 589 044e 89D0     		movw	%dx,	%ax
 590 0450 B108     		movb	$8,	%cl
 591 0452 D3E8     		shrw	%cl,	%ax
 592 0454 01C3     		addw	%ax,	%bx
 593 0456 895EFE   		movw	%bx,	-2(%bp)
 594 0459 83E23F   		andw	$63,	%dx
 595 045c 8956FA   		movw	%dx,	-6(%bp)
 596 045f 31F6     		xorw	%si,	%si
 597 0461 A10000   		movw	int13_reg_dx,	%ax
 598 0464 89C3     		movw	%ax,	%bx
 599 0466 D3EB     		shrw	%cl,	%bx
 600 0468 89F7     		movw	%si,	%di
 601 046a 30E4     		xorb	%ah,	%ah
 602 046c 89C2     		movw	%ax,	%dx
 603 046e 8946FC   		movw	%ax,	-4(%bp)
 604              	#APP
 605              	;# 359 "src/int13h.c" 1
 324              	    if( (drive == 0) || (drive == 1) ){
 325              	        pos = ((cylinder*2 + head)*18UL + sector - 1);
 326              	    }else if( drive == 0x80 ){
 327              	        pos = ((cylinder*(hdd_head+1) + head)*((unsigned long)hdd_sector) + sector - 1);
 328              	        drive = 2;
 329              	    }else{
 330              	        goto drive_err;
 331              	    }
 332              	
 333              	    for(counter=0; nsector > counter; counter++){
 334              	    	result = emuReadDriveSector(drive, pos + counter, int13_reg_es, (uint16_t)(int13_reg_bx+512*co
 335              	    	if(result != EMU_INTERFACE_RESULT_OK) goto drive_err; 
 336              	    }
 337              	
 338              	    int13_reg_ax = ( 0x00 | (counter&0xff));
 339              	
 340              	    return;
 341              	
 342              	drive_err:
 343              	    int13_reg_ax = (0xAA<<8);	// Drive not ready 
 344              	}
 345              	
 346              	
 347              	void int13_handler_ah03(void){
 348              	    unsigned int  counter  = -1;
 349              	    unsigned int  nsector  = (int13_reg_ax&0xff);
 350              	    unsigned long cylinder = ((int13_reg_cx&0xff00)>>8) + ((int13_reg_cx&0xc0)<<2);
 351              	    unsigned long sector   = (int13_reg_cx&0x3f);
 352              	    unsigned long head     = ((int13_reg_dx&0xff00)>>8);
 353              	    unsigned int  drive    = (int13_reg_dx&0xff);
 354              	
 355              		unsigned int reg_ss;
 356              	    unsigned long pos;
 357              		uint8_t result;
 358              	
 359 0471 8CD0     	    asm volatile("mov  %%ss, %w0" : "=a"(reg_ss) : );
 360              	
 606              		mov  %ss, %ax
 607              	;# 0 "" 2
 608              	#NO_APP
 609 0473 83FA01   		cmpw	$1,	%dx
 610 0476 7703E99A 		jbe	.L45
 610      00
 611 047b 817EFC80 		cmpw	$128,	-4(%bp)
 611      00
 612 0480 740C     		je	.L46
 613              	.L36:
 614 0482 C7060000 		movw	$-22016,	int13_reg_ax
 614      00AA
 615 0488 89EC     		movw	%bp,	%sp
 616 048a 5D       		popw	%bp
 617 048b 5F       		popw	%di
 618 048c 5E       		popw	%si
 619 048d C3       		ret
 620              	.L46:
 621 048e A10000   		movw	hdd_head,	%ax
 622 0491 40       		incw	%ax
 623 0492 F766FE   		mulw	-2(%bp)
 624 0495 01C3     		addw	%ax,	%bx
 625 0497 11D7     		adcw	%dx,	%di
 626 0499 8B0E0000 		movw	hdd_sector,	%cx
 627 049d 89F8     		movw	%di,	%ax
 628 049f F7E1     		mulw	%cx
 629 04a1 89C7     		movw	%ax,	%di
 630 04a3 89D8     		movw	%bx,	%ax
 631 04a5 F7E1     		mulw	%cx
 632 04a7 01FA     		addw	%di,	%dx
 633 04a9 8B7EFA   		movw	-6(%bp),	%di
 634 04ac 83C7FF   		addw	$-1,	%di
 635 04af 89F1     		movw	%si,	%cx
 636 04b1 83D1FF   		adcw	$-1,	%cx
 637 04b4 01C7     		addw	%ax,	%di
 638 04b6 11D1     		adcw	%dx,	%cx
 639 04b8 C746FC02 		movw	$2,	-4(%bp)
 639      00
 640              	.L35:
 641 04bd A10000   		movw	int13_reg_ax,	%ax
 642 04c0 25FF00   		andw	$255,	%ax
 643 04c3 8946FE   		movw	%ax,	-2(%bp)
 644 04c6 7503E987 		je	.L40
 644      00
 645 04cb 31F6     		xorw	%si,	%si
 646              	.L38:
 647 04cd 89F0     		movw	%si,	%ax
 648 04cf D1E0     		shlw	$1,	%ax
 649 04d1 D1E0     		shlw	$1,	%ax
 650 04d3 D1E0     		shlw	$1,	%ax
 651 04d5 D1E0     		shlw	$1,	%ax
 652 04d7 D1E0     		shlw	$1,	%ax
 653 04d9 D1E0     		shlw	$1,	%ax
 654 04db D1E0     		shlw	$1,	%ax
 655 04dd D1E0     		shlw	$1,	%ax
 656 04df D1E0     		shlw	$1,	%ax
 657 04e1 03060000 		addw	int13_reg_bx,	%ax
 658 04e5 50       		pushw	%ax
 659 04e6 FF360000 		pushw	int13_reg_es
 660 04ea 51       		pushw	%cx
 661 04eb 894EFA   		movw	%cx,	-6(%bp)
 662 04ee 57       		pushw	%di
 663 04ef FF76FC   		pushw	-4(%bp)
 664 04f2 E8FEFF   		call	emuWriteDriveSector
 665 04f5 83C40A   		addw	$10,	%sp
 666 04f8 84C0     		testb	%al,	%al
 667 04fa 7586     		jne	.L36
 668 04fc 46       		incw	%si
 669 04fd 83C701   		addw	$1,	%di
 670 0500 8B4EFA   		movw	-6(%bp),	%cx
 671 0503 83D100   		adcw	$0,	%cx
 672 0506 3976FE   		cmpw	%si,	-2(%bp)
 673 0509 75C2     		jne	.L38
 674 050b 89360000 		movw	%si,	int13_reg_ax
 675              	.L47:
 676 050f 89EC     		movw	%bp,	%sp
 677 0511 5D       		popw	%bp
 678 0512 5F       		popw	%di
 679 0513 5E       		popw	%si
 680 0514 C3       		ret
 681              	.L45:
 682 0515 8B46FE   		movw	-2(%bp),	%ax
 683 0518 89F2     		movw	%si,	%dx
 684 051a D1E0     		shlw	%ax
 685 051c D1D2     		rclw	%dx
 686 051e 01C3     		addw	%ax,	%bx
 687 0520 11D7     		adcw	%dx,	%di
 688 0522 89D8     		movw	%bx,	%ax
 689 0524 89FA     		movw	%di,	%dx
 690 0526 D1E0     		shlw	%ax
 691 0528 D1D2     		rclw	%dx
 692 052a D1E0     		shlw	%ax
 693 052c D1D2     		rclw	%dx
 694 052e D1E0     		shlw	%ax
 695 0530 8946FE   		movw	%ax,	-2(%bp)
 696 0533 D1D2     		rclw	%dx
 697 0535 8B46FE   		movw	-2(%bp),	%ax
 698 0538 01D8     		addw	%bx,	%ax
 699 053a 11FA     		adcw	%di,	%dx
 700 053c D1E0     		shlw	%ax
 701 053e D1D2     		rclw	%dx
 702 0540 8B7EFA   		movw	-6(%bp),	%di
 703 0543 83C7FF   		addw	$-1,	%di
 704 0546 89F1     		movw	%si,	%cx
 705 0548 83D1FF   		adcw	$-1,	%cx
 706 054b 01C7     		addw	%ax,	%di
 707 054d 11D1     		adcw	%dx,	%cx
 708 054f E96BFF   		jmp	.L35
 709              	.L40:
 710 0552 8B76FE   		movw	-2(%bp),	%si
 711 0555 89360000 		movw	%si,	int13_reg_ax
 712 0559 EBB4     		jmp	.L47
 714              		.global	int13_handler_ah42
 716              	int13_handler_ah42:
 717 055b 56       		pushw	%si
 718 055c 57       		pushw	%di
 719 055d 06       		pushw	%es
 720 055e 55       		pushw	%bp
 721 055f 89E5     		movw	%sp,	%bp
 722 0561 83EC1E   		subw	$30,	%sp
 723 0564 B80800   		movw	$8,	%ax
 724 0567 50       		pushw	%ax
 725 0568 8D46F0   		leaw	-16(%bp),	%ax
 726 056b 50       		pushw	%ax
 727 056c FF360000 		pushw	int13_reg_si
 728 0570 FF360000 		pushw	int13_reg_ds
 729 0574 E8FEFF   		call	fetch_data_word
 730 0577 83C408   		addw	$8,	%sp
 731 057a 807EF010 		cmpb	$16,	-16(%bp)
 732 057e 740D     		je	.L61
 733              	.L49:
 734 0580 C7060000 		movw	$-22016,	int13_reg_ax
 734      00AA
 735 0586 89EC     		movw	%bp,	%sp
 736 0588 5D       		popw	%bp
 737 0589 07       		popw	%es
 738 058a 5F       		popw	%di
 739 058b 5E       		popw	%si
 740 058c C3       		ret
 741              	.L61:
 742 058d 8B160000 		movw	int13_reg_dx,	%dx
 743 0591 B600     		movb	$0,	%dh
 744              	#APP
 745              	;# 402 "src/int13h.c" 1
 361              	    if( (drive == 0) || (drive == 1) ){
 362              	        pos = ((cylinder*2 + head)*18UL + sector - 1);
 363              	    }else if( drive == 0x80 ){
 364              	        pos = ((cylinder*(hdd_head+1) + head)*((unsigned long)hdd_sector) + sector - 1);
 365              	        drive = 2;
 366              	    }else{
 367              	        goto drive_err;
 368              	    }
 369              	
 370              	    for(counter=0; nsector > counter; counter++){
 371              	    	result = emuWriteDriveSector(drive, pos + counter, int13_reg_es, (uint16_t)(int13_reg_bx+512*c
 372              	    	if(result != EMU_INTERFACE_RESULT_OK) goto drive_err; 
 373              	    }
 374              	
 375              	    int13_reg_ax = ( 0x00 | (counter&0xff));
 376              	
 377              	    return;
 378              	
 379              	drive_err:
 380              	    int13_reg_ax = (0xAA<<8);	// Drive not ready 
 381              	}
 382              	
 383              	
 384              	
 385              	void int13_handler_ah42(void){
 386              	    unsigned char arg[16];
 387              	
 388              	    fetch_data_word(int13_reg_ds, (unsigned char *)int13_reg_si, arg, sizeof(arg)/2);
 389              	
 390              	    unsigned int  counter  = 0;
 391              	    unsigned int  nsector  = *((unsigned int  *)(arg + 2));
 392              	    unsigned int  drive    = (int13_reg_dx&0xff);
 393              	    unsigned long s_sector = *((unsigned long *)(arg + 8));
 394              	    unsigned int  dest_seg = *((unsigned int  *)(arg + 6));
 395              	    unsigned int  dest_off = *((unsigned int  *)(arg + 4));
 396              	
 397              	    if(arg[0] != 0x10) goto drive_err;
 398              	
 399              		unsigned int reg_ss;
 400              		uint8_t result;
 401              	
 402 0593 8CD0     	    asm volatile("mov  %%ss, %w0" : "=a"(reg_ss) : );
 403              	
 746              		mov  %ss, %ax
 747              	;# 0 "" 2
 748              	#NO_APP
 749 0595 8946EA   		movw	%ax,	-22(%bp)
 750 0598 83FA01   		cmpw	$1,	%dx
 751 059b 7609     		jbe	.L50
 752 059d 81FA8000 		cmpw	$128,	%dx
 753 05a1 75DD     		jne	.L49
 754 05a3 BA0200   		movw	$2,	%dx
 755              	.L50:
 756 05a6 8B46F2   		movw	-14(%bp),	%ax
 757 05a9 85C0     		testw	%ax,	%ax
 758 05ab 747F     		je	.L51
 759 05ad 8B4EF8   		movw	-8(%bp),	%cx
 760 05b0 8B5EFA   		movw	-6(%bp),	%bx
 761 05b3 8B7EF6   		movw	-10(%bp),	%di
 762 05b6 897EE6   		movw	%di,	-26(%bp)
 763 05b9 BF0000   		movw	$BufMem,	%di
 764 05bc 8EC7     		movw	%di,	%es
 765 05be 8856E9   		movb	%dl,	-23(%bp)
 766 05c1 894EEC   		movw	%cx,	-20(%bp)
 767 05c4 89CA     		movw	%cx,	%dx
 768 05c6 83C201   		addw	$1,	%dx
 769 05c9 89D7     		movw	%dx,	%di
 770 05cb 89DE     		movw	%bx,	%si
 771 05cd 83D600   		adcw	$0,	%si
 772 05d0 48       		decw	%ax
 773 05d1 89C2     		movw	%ax,	%dx
 774 05d3 31C9     		xorw	%cx,	%cx
 775 05d5 89F8     		movw	%di,	%ax
 776 05d7 01D0     		addw	%dx,	%ax
 777 05d9 8946E4   		movw	%ax,	-28(%bp)
 778 05dc 11CE     		adcw	%cx,	%si
 779 05de 8976E2   		movw	%si,	-30(%bp)
 780 05e1 8B46F4   		movw	-12(%bp),	%ax
 781 05e4 8946EE   		movw	%ax,	-18(%bp)
 782 05e7 8B7EEC   		movw	-20(%bp),	%di
 783 05ea 89DE     		movw	%bx,	%si
 784              	.L56:
 785 05ec 06       		pushw	%es
 786 05ed FF76EA   		pushw	-22(%bp)
 787 05f0 56       		pushw	%si
 788 05f1 57       		pushw	%di
 789 05f2 FF76E9   		pushw	-23(%bp)
 790 05f5 E8FEFF   		call	emuReadDriveSector
 791 05f8 83C40A   		addw	$10,	%sp
 792 05fb 84C0     		testb	%al,	%al
 793 05fd 7581     		jne	.L49
 794 05ff B80001   		movw	$256,	%ax
 795 0602 50       		pushw	%ax
 796 0603 FF76EE   		pushw	-18(%bp)
 797 0606 FF76E6   		pushw	-26(%bp)
 798 0609 06       		pushw	%es
 799 060a E8FEFF   		call	copy_data_word
 800 060d 89F8     		movw	%di,	%ax
 801 060f 2B46EC   		subw	-20(%bp),	%ax
 802 0612 40       		incw	%ax
 803 0613 83C701   		addw	$1,	%di
 804 0616 83D600   		adcw	$0,	%si
 805 0619 8046EF02 		addb	$2,	-17(%bp)
 806 061d 83C408   		addw	$8,	%sp
 807 0620 3B7EE4   		cmpw	-28(%bp),	%di
 808 0623 75C7     		jne	.L56
 809 0625 3B76E2   		cmpw	-30(%bp),	%si
 810 0628 75C2     		jne	.L56
 811 062a 30E4     		xorb	%ah,	%ah
 812              	.L51:
 813 062c A30000   		movw	%ax,	int13_reg_ax
 814 062f 89EC     		movw	%bp,	%sp
 815 0631 5D       		popw	%bp
 816 0632 07       		popw	%es
 817 0633 5F       		popw	%di
 818 0634 5E       		popw	%si
 819 0635 C3       		ret
 821              		.comm	int13_reg_ss2,2,2
 822              		.comm	int13_reg_ss,2,2
 823              		.comm	int13_reg_sp,2,2
 824              		.comm	int13_reg_si,2,2
 825              		.comm	int13_reg_es,2,2
 826              		.comm	int13_reg_ds,2,2
 827              		.comm	int13_reg_dx,2,2
 828              		.comm	int13_reg_cx,2,2
 829              		.comm	int13_reg_bx,2,2
 830              		.comm	int13_reg_ax,2,2
 831              		.ident	"GCC: (GNU) 6.3.0"
   1              		.arch i8086,jumps
   2              		.code16
   3              		.att_syntax prefix
   4              	#NO_APP
   5              	#APP
   6              		   .global int14_handler_asm        
   7              	int14_handler_asm:                  
   8 0000 1E       		push %ds                         
   9 0001 06       		push %es                         
  10 0002 2E8C1600 	mov %ss, %cs:int14_reg_ss2
  10      00
  11 0007 50       	push %ax
  12 0008 51       	push %cx
  13 0009 52       	push %dx
  14 000a 53       	push %bx
  15 000b 2EFF3600 	push %cs:int14_reg_ss2
  15      00
  16 0010 55       	push %bp
  17 0011 56       	push %si
  18 0012 57       	push %di
  19              	                                    
  20 0013 2EA30000 	   mov %ax, %cs:int14_reg_ax        
  21 0017 2E891E00 	   mov %bx, %cs:int14_reg_bx        
  21      00
  22 001c 2E890E00 	   mov %cx, %cs:int14_reg_cx        
  22      00
  23 0021 2E891600 	   mov %dx, %cs:int14_reg_dx        
  23      00
  24 0026 2E892600 	   mov %sp, %cs:int14_reg_sp        
  24      00
  25 002b 2E8C1600 	   mov %ss, %cs:int14_reg_ss        
  25      00
  26              	                                    
  27 0030 8CC8     		mov	%cs, %ax                     
  28 0032 8ED0     		mov	%ax, %ss                     
  29 0034 8ED8     		mov	%ax, %ds                     
  30 0036 BCFFFF   		mov	$0xffff, %sp                 
  31              	                                    
  32 0039 A10000   	   mov int14_reg_ax, %ax            
  33 003c 80FC00   		cmp	$0x00, %ah                   
  34 003f 7418     		je	int14_handler_asm_ah00       
  35              	                                    
  36 0041 E8FEFF   		call int14_default_handler       
  37              	                                    
  38 0044 2E8B2600 	   mov %cs:int14_reg_sp, %sp        
  38      00
  39 0049 2E8E1600 	   mov %cs:int14_reg_ss, %ss        
  39      00
  40              	                                    
  41 004e 5F       	pop %di
  42 004f 5E       	pop %si
  43 0050 5D       	pop %bp
  44 0051 5B       	pop %bx
  45 0052 5B       	pop %bx
  46 0053 5A       	pop %dx
  47 0054 59       	pop %cx
  48 0055 58       	pop %ax
  49 0056 07       		pop %es                          
  50 0057 1F       		pop %ds                          
  51 0058 CF       		iret                             
  52              	
  53              		int14_handler_asm_ah00:             
  54 0059 E8FEFF   		call int14_handler_ah00                    
  55              	                                    
  56 005c 2E8B2600 	   mov %cs:int14_reg_sp, %sp        
  56      00
  57 0061 2E8E1600 	   mov %cs:int14_reg_ss, %ss        
  57      00
  58              	                                    
  59 0066 5F       	pop %di
  60 0067 5E       	pop %si
  61 0068 5D       	pop %bp
  62 0069 5B       	pop %bx
  63 006a 5B       	pop %bx
  64 006b 5A       	pop %dx
  65 006c 59       	pop %cx
  66 006d 58       	pop %ax
  67 006e 07       		pop %es                          
  68 006f 1F       		pop %ds                          
  69 0070 2EA10000 		movw	%cs:int14_reg_ax, %ax    
  70 0074 CF       		iret                             
  71              	
  72              		.section	.rodata.str1.1,"aMS",@progbits,1
  73              	.LC0:
  74 0000 494E5420 		.string	"INT 0x14\n"
  74      30783134 
  74      0A00
  75              	.LC1:
  76 000a 41583A20 		.string	"AX: %04x BX: %04x CX: %04x DX: %04x \n"
  76      25303478 
  76      2042583A 
  76      20253034 
  76      78204358 
  77              	#NO_APP
  78              		.text
  79              		.global	int14_default_handler
  81              	int14_default_handler:
  82 0075 56       		pushw	%si
  83 0076 57       		pushw	%di
  84 0077 06       		pushw	%es
  85 0078 55       		pushw	%bp
  86 0079 89E5     		movw	%sp,	%bp
  87 007b 83C480   		addw	$-128,	%sp
  88 007e B80000   		movw	$.LC0,	%ax
  89 0081 50       		pushw	%ax
  90 0082 BF8000   		movw	$128,	%di
  91 0085 57       		pushw	%di
  92 0086 8D7680   		leaw	-128(%bp),	%si
  93 0089 56       		pushw	%si
  94 008a E8FEFF   		call	s_snprintf
  95 008d 56       		pushw	%si
  96              	#APP
  97              	;# 99 "src/int14h.c" 1
   1              	#include <stdio.h>
   2              	#include "basicio.h"
   3              	
   4              	#include "terminal.h"
   5              	#include "system.h"
   6              	
   7              	#include "asmfuncs.h"
   8              	#include "emu_interface.h"
   9              	
  10              	/*
  11              	#define INT14_DEBUG_PRINT
  12              	*/
  13              	
  14              	unsigned int int14_reg_ax;
  15              	unsigned int int14_reg_bx;
  16              	unsigned int int14_reg_cx;
  17              	unsigned int int14_reg_dx;
  18              	
  19              	unsigned int int14_reg_sp;
  20              	unsigned int int14_reg_ss;
  21              	
  22              	unsigned int int14_reg_ss2;
  23              	
  24              	#define PUSHA \
  25              	"mov %ss, %cs:int14_reg_ss2\n" \
  26              	"push %ax\n" \
  27              	"push %cx\n" \
  28              	"push %dx\n" \
  29              	"push %bx\n" \
  30              	"push %cs:int14_reg_ss2\n" \
  31              	"push %bp\n" \
  32              	"push %si\n" \
  33              	"push %di\n"
  34              	
  35              	#define POPA \
  36              	"pop %di\n" \
  37              	"pop %si\n" \
  38              	"pop %bp\n" \
  39              	"pop %bx\n"  /* skip next 2 bytes of stack */ \
  40              	"pop %bx\n" \
  41              	"pop %dx\n" \
  42              	"pop %cx\n" \
  43              	"pop %ax\n" 
  44              	
  45              	__asm__ (
  46              	"   .global int14_handler_asm        \n"
  47              	"int14_handler_asm:                  \n"
  48              	"	push %ds                         \n"
  49              	"	push %es                         \n"
  50              	PUSHA /*"	pusha                            \n"*/
  51              	"                                    \n"
  52              	"   mov %ax, %cs:int14_reg_ax        \n"
  53              	"   mov %bx, %cs:int14_reg_bx        \n"
  54              	"   mov %cx, %cs:int14_reg_cx        \n"
  55              	"   mov %dx, %cs:int14_reg_dx        \n"
  56              	"   mov %sp, %cs:int14_reg_sp        \n"
  57              	"   mov %ss, %cs:int14_reg_ss        \n"
  58              	"                                    \n"
  59              	"	mov	%cs, %ax                     \n"
  60              	"	mov	%ax, %ss                     \n"
  61              	"	mov	%ax, %ds                     \n"
  62              	"	mov	$0xffff, %sp                 \n"
  63              	"                                    \n"
  64              	"   mov int14_reg_ax, %ax            \n"
  65              	"	cmp	$0x00, %ah                   \n"
  66              	"	je	int14_handler_asm_ah00       \n"
  67              	"                                    \n"
  68              	"	call int14_default_handler       \n"
  69              	"                                    \n"
  70              	"   mov %cs:int14_reg_sp, %sp        \n"
  71              	"   mov %cs:int14_reg_ss, %ss        \n"
  72              	"                                    \n"
  73              	POPA /*"	popa                             \n"*/
  74              	"	pop %es                          \n"
  75              	"	pop %ds                          \n"
  76              	"	iret                             \n");
  77              	
  78              	#define HEAD_OF_ASM_HANDLER(func)  \
  79              	"	call " func "                    \n" \
  80              	"                                    \n" \
  81              	"   mov %cs:int14_reg_sp, %sp        \n" \
  82              	"   mov %cs:int14_reg_ss, %ss        \n" \
  83              	"                                    \n" \
  84              	POPA/*"	popa                             \n"*/ \
  85              	"	pop %es                          \n" \
  86              	"	pop %ds                          \n" 
  87              	
  88              	__asm__ (
  89              	"int14_handler_asm_ah00:             \n"
  90              	HEAD_OF_ASM_HANDLER("int14_handler_ah00")
  91              	"	movw	%cs:int14_reg_ax, %ax    \n"
  92              	"	iret                             \n");
  93              	
  94              	
  95              	void int14_default_handler(void){
  96              	    char buf[128];
  97              		unsigned int reg_ss;
  98              	
  99 008e 8CD0     	    asm volatile("mov  %%ss, %w0" : "=a"(reg_ss) : );
 100              	    
  98              		mov  %ss, %ax
  99              	;# 0 "" 2
 100              	#NO_APP
 101 0090 8EC0     		movw	%ax,	%es
 102 0092 50       		pushw	%ax
 103 0093 E8FEFF   		call	emuLogMessage
 104 0096 FF360000 		pushw	int14_reg_dx
 105 009a FF360000 		pushw	int14_reg_cx
 106 009e FF360000 		pushw	int14_reg_bx
 107 00a2 FF360000 		pushw	int14_reg_ax
 108 00a6 B80A00   		movw	$.LC1,	%ax
 109 00a9 50       		pushw	%ax
 110 00aa 57       		pushw	%di
 111 00ab 56       		pushw	%si
 112 00ac E8FEFF   		call	s_snprintf
 113 00af 56       		pushw	%si
 114 00b0 06       		pushw	%es
 115 00b1 E8FEFF   		call	emuLogMessage
 116 00b4 89EC     		movw	%bp,	%sp
 117 00b6 5D       		popw	%bp
 118 00b7 07       		popw	%es
 119 00b8 5F       		popw	%di
 120 00b9 5E       		popw	%si
 121 00ba C3       		ret
 123              		.global	int14_handler_ah00
 125              	int14_handler_ah00:
 126 00bb C3       		ret
 128              		.comm	int14_reg_ss2,2,2
 129              		.comm	int14_reg_ss,2,2
 130              		.comm	int14_reg_sp,2,2
 131              		.comm	int14_reg_dx,2,2
 132              		.comm	int14_reg_cx,2,2
 133              		.comm	int14_reg_bx,2,2
 134              		.comm	int14_reg_ax,2,2
 135              		.ident	"GCC: (GNU) 6.3.0"
   1              		.arch i8086,jumps
   2              		.code16
   3              		.att_syntax prefix
   4              	#NO_APP
   5              	#APP
   6              		   .global int15_handler_asm        
   7              	int15_handler_asm:                  
   8 0000 1E       		push %ds                         
   9 0001 06       		push %es                         
  10 0002 2E8C1600 	mov %ss, %cs:int15_reg_ss2
  10      00
  11 0007 50       	push %ax
  12 0008 51       	push %cx
  13 0009 52       	push %dx
  14 000a 53       	push %bx
  15 000b 2EFF3600 	push %cs:int15_reg_ss2
  15      00
  16 0010 55       	push %bp
  17 0011 56       	push %si
  18 0012 57       	push %di
  19              	                                    
  20 0013 2EA30000 	   mov %ax, %cs:int15_reg_ax        
  21 0017 2E891E00 	   mov %bx, %cs:int15_reg_bx        
  21      00
  22 001c 2E890E00 	   mov %cx, %cs:int15_reg_cx        
  22      00
  23 0021 2E891600 	   mov %dx, %cs:int15_reg_dx        
  23      00
  24 0026 2E8C0600 	   mov %es, %cs:int15_reg_es        
  24      00
  25 002b 2E893E00 	   mov %di, %cs:int15_reg_di        
  25      00
  26 0030 2E892600 	   mov %sp, %cs:int15_reg_sp        
  26      00
  27 0035 2E8C1600 	   mov %ss, %cs:int15_reg_ss        
  27      00
  28              	                                    
  29 003a 8CC8     		mov	%cs, %ax                     
  30 003c 8ED0     		mov	%ax, %ss                     
  31 003e 8ED8     		mov	%ax, %ds                     
  32 0040 BCFFFF   		mov	$0xffff, %sp                 
  33              	                                    
  34 0043 A10000   	   mov int15_reg_ax, %ax            
  35 0046 3D0024   		cmpw $0x2400, %ax                
  36 0049 7455     		je	int15_handler_asm_ax2400     
  37 004b 3D0124   		cmpw $0x2401, %ax                
  38 004e 747C     		je	int15_handler_asm_ax2401     
  39 0050 3D0224   		cmpw $0x2402, %ax                
  40 0053 7503E9A0 		je	int15_handler_asm_ax2402     
  40      00
  41 0058 3D0324   		cmpw $0x2403, %ax                
  42 005b 7503E9C8 		je	int15_handler_asm_ax2403     
  42      00
  43 0060 3D01E8   		cmpw $0xe801, %ax                
  44 0063 7503E9F1 		je	int15_handler_asm_axe801     
  44      00
  45 0068 3D20E8   		cmpw $0xe820, %ax                
  46 006b 7503E923 		je	int15_handler_asm_axe820     
  46      01
  47 0070 80FC86   		cmp  $0x86, %ah                  
  48 0073 7503E933 		je	int15_handler_asm_ah86       
  48      01
  49 0078 80FC88   		cmp  $0x88, %ah                  
  50 007b 7503E956 		je	int15_handler_asm_ah88       
  50      01
  51 0080 80FCC0   		cmp  $0xc0, %ah                  
  52 0083 7503E979 		je	int15_handler_asm_ahc0       
  52      01
  53              	                                    
  54 0088 E8FEFF   		call int15_default_handler       
  55              	                                    
  56 008b 2E8B2600 	   mov %cs:int15_reg_sp, %sp        
  56      00
  57 0090 2E8E1600 	   mov %cs:int15_reg_ss, %ss        
  57      00
  58              	                                    
  59 0095 5F       	pop %di
  60 0096 5E       	pop %si
  61 0097 5D       	pop %bp
  62 0098 5B       	pop %bx
  63 0099 5B       	pop %bx
  64 009a 5A       	pop %dx
  65 009b 59       	pop %cx
  66 009c 58       	pop %ax
  67 009d 07       		pop %es                          
  68 009e 1F       		pop %ds                          
  69 009f CF       		iret                             
  70              	
  71              		int15_handler_asm_ax2400:             
  72 00a0 E8FEFF   		call int15_handler_ax2400                    
  73              	                                    
  74 00a3 2E8B2600 	   mov %cs:int15_reg_sp, %sp        
  74      00
  75 00a8 2E8E1600 	   mov %cs:int15_reg_ss, %ss        
  75      00
  76              	                                    
  77 00ad 5F       	pop %di
  78 00ae 5E       	pop %si
  79 00af 5D       	pop %bp
  80 00b0 5B       	pop %bx
  81 00b1 5B       	pop %bx
  82 00b2 5A       	pop %dx
  83 00b3 59       	pop %cx
  84 00b4 58       	pop %ax
  85 00b5 07       		pop %es                          
  86 00b6 1F       		pop %ds                          
  87 00b7 2E8A2601 		movb    %cs:int15_reg_ax+1, %ah    
  87      00
  88 00bc 50       	   push %ax                         
  89 00bd 55       	   push %bp                         
  90 00be 89E5     	   mov  %sp, %bp                    
  91 00c0 8B4608   	   movw 8(%bp), %ax                 
  92 00c3 83E0FE   	   andw $0xfffe, %ax                
  93 00c6 894608   	   movw %ax, 8(%bp)                 
  94 00c9 5D       	   pop  %bp                         
  95 00ca 58       	   pop  %ax                         
  96              	                                    
  97 00cb CF       	   iret                             
  98              	
  99              		int15_handler_asm_ax2401:             
 100 00cc E8FEFF   		call int15_handler_ax2401                    
 101              	                                    
 102 00cf 2E8B2600 	   mov %cs:int15_reg_sp, %sp        
 102      00
 103 00d4 2E8E1600 	   mov %cs:int15_reg_ss, %ss        
 103      00
 104              	                                    
 105 00d9 5F       	pop %di
 106 00da 5E       	pop %si
 107 00db 5D       	pop %bp
 108 00dc 5B       	pop %bx
 109 00dd 5B       	pop %bx
 110 00de 5A       	pop %dx
 111 00df 59       	pop %cx
 112 00e0 58       	pop %ax
 113 00e1 07       		pop %es                          
 114 00e2 1F       		pop %ds                          
 115 00e3 2E8A2601 		movb    %cs:int15_reg_ax+1, %ah    
 115      00
 116 00e8 50       	   push %ax                         
 117 00e9 55       	   push %bp                         
 118 00ea 89E5     	   mov  %sp, %bp                    
 119 00ec 8B4608   	   movw 8(%bp), %ax                 
 120 00ef 83E0FE   	   andw $0xfffe, %ax                
 121 00f2 894608   	   movw %ax, 8(%bp)                 
 122 00f5 5D       	   pop  %bp                         
 123 00f6 58       	   pop  %ax                         
 124              	                                    
 125 00f7 CF       	   iret                             
 126              	
 127              		int15_handler_asm_ax2402:             
 128 00f8 E8FEFF   		call int15_handler_ax2402                    
 129              	                                    
 130 00fb 2E8B2600 	   mov %cs:int15_reg_sp, %sp        
 130      00
 131 0100 2E8E1600 	   mov %cs:int15_reg_ss, %ss        
 131      00
 132              	                                    
 133 0105 5F       	pop %di
 134 0106 5E       	pop %si
 135 0107 5D       	pop %bp
 136 0108 5B       	pop %bx
 137 0109 5B       	pop %bx
 138 010a 5A       	pop %dx
 139 010b 59       	pop %cx
 140 010c 58       	pop %ax
 141 010d 07       		pop %es                          
 142 010e 1F       		pop %ds                          
 143 010f 2EA10000 		mov     %cs:int15_reg_ax, %ax      
 144 0113 2E8B0E00 		mov     %cs:int15_reg_cx, %cx      
 144      00
 145 0118 50       	   push %ax                         
 146 0119 55       	   push %bp                         
 147 011a 89E5     	   mov  %sp, %bp                    
 148 011c 8B4608   	   movw 8(%bp), %ax                 
 149 011f 83E0FE   	   andw $0xfffe, %ax                
 150 0122 894608   	   movw %ax, 8(%bp)                 
 151 0125 5D       	   pop  %bp                         
 152 0126 58       	   pop  %ax                         
 153              	                                    
 154 0127 CF       	   iret                             
 155              	
 156              		int15_handler_asm_ax2403:             
 157 0128 E8FEFF   		call int15_handler_ax2403                    
 158              	                                    
 159 012b 2E8B2600 	   mov %cs:int15_reg_sp, %sp        
 159      00
 160 0130 2E8E1600 	   mov %cs:int15_reg_ss, %ss        
 160      00
 161              	                                    
 162 0135 5F       	pop %di
 163 0136 5E       	pop %si
 164 0137 5D       	pop %bp
 165 0138 5B       	pop %bx
 166 0139 5B       	pop %bx
 167 013a 5A       	pop %dx
 168 013b 59       	pop %cx
 169 013c 58       	pop %ax
 170 013d 07       		pop %es                          
 171 013e 1F       		pop %ds                          
 172 013f 2E8A2601 		movb    %cs:int15_reg_ax+1, %ah    
 172      00
 173 0144 2E8B1E00 		mov     %cs:int15_reg_bx, %bx      
 173      00
 174 0149 50       	   push %ax                         
 175 014a 55       	   push %bp                         
 176 014b 89E5     	   mov  %sp, %bp                    
 177 014d 8B4608   	   movw 8(%bp), %ax                 
 178 0150 83E0FE   	   andw $0xfffe, %ax                
 179 0153 894608   	   movw %ax, 8(%bp)                 
 180 0156 5D       	   pop  %bp                         
 181 0157 58       	   pop  %ax                         
 182              	                                    
 183 0158 CF       	   iret                             
 184              	
 185              		int15_handler_asm_axe801:             
 186 0159 E8FEFF   		call int15_handler_axe801                    
 187              	                                    
 188 015c 2E8B2600 	   mov %cs:int15_reg_sp, %sp        
 188      00
 189 0161 2E8E1600 	   mov %cs:int15_reg_ss, %ss        
 189      00
 190              	                                    
 191 0166 5F       	pop %di
 192 0167 5E       	pop %si
 193 0168 5D       	pop %bp
 194 0169 5B       	pop %bx
 195 016a 5B       	pop %bx
 196 016b 5A       	pop %dx
 197 016c 59       	pop %cx
 198 016d 58       	pop %ax
 199 016e 07       		pop %es                          
 200 016f 1F       		pop %ds                          
 201 0170 2EA10000 		mov	    %cs:int15_reg_ax, %ax    
 202 0174 2E8B1E00 		mov	    %cs:int15_reg_bx, %bx    
 202      00
 203 0179 2E8B0E00 		mov	    %cs:int15_reg_cx, %cx    
 203      00
 204 017e 2E8B1600 		mov	    %cs:int15_reg_dx, %dx    
 204      00
 205 0183 50       	   push %ax                         
 206 0184 55       	   push %bp                         
 207 0185 89E5     	   mov  %sp, %bp                    
 208 0187 8B4608   	   movw 8(%bp), %ax                 
 209 018a 83E0FE   	   andw $0xfffe, %ax                
 210 018d 894608   	   movw %ax, 8(%bp)                 
 211 0190 5D       	   pop  %bp                         
 212 0191 58       	   pop  %ax                         
 213              	                                    
 214 0192 CF       	   iret                             
 215              	
 216              		int15_handler_asm_axe820:             
 217 0193 E8FEFF   		call int15_handler_axe820                    
 218              	                                    
 219 0196 2E8B2600 	   mov %cs:int15_reg_sp, %sp        
 219      00
 220 019b 2E8E1600 	   mov %cs:int15_reg_ss, %ss        
 220      00
 221              	                                    
 222 01a0 5F       	pop %di
 223 01a1 5E       	pop %si
 224 01a2 5D       	pop %bp
 225 01a3 5B       	pop %bx
 226 01a4 5B       	pop %bx
 227 01a5 5A       	pop %dx
 228 01a6 59       	pop %cx
 229 01a7 58       	pop %ax
 230 01a8 07       		pop %es                          
 231 01a9 1F       		pop %ds                          
 232 01aa CF       	   iret                             
 233              	
 234              		int15_handler_asm_ah86:             
 235 01ab E8FEFF   		call int15_handler_ah86                    
 236              	                                    
 237 01ae 2E8B2600 	   mov %cs:int15_reg_sp, %sp        
 237      00
 238 01b3 2E8E1600 	   mov %cs:int15_reg_ss, %ss        
 238      00
 239              	                                    
 240 01b8 5F       	pop %di
 241 01b9 5E       	pop %si
 242 01ba 5D       	pop %bp
 243 01bb 5B       	pop %bx
 244 01bc 5B       	pop %bx
 245 01bd 5A       	pop %dx
 246 01be 59       	pop %cx
 247 01bf 58       	pop %ax
 248 01c0 07       		pop %es                          
 249 01c1 1F       		pop %ds                          
 250 01c2 2EA10000 		mov	    %cs:int15_reg_ax, %ax    
 251 01c6 50       	   push %ax                         
 252 01c7 55       	   push %bp                         
 253 01c8 89E5     	   mov  %sp, %bp                    
 254 01ca 8B4608   	   movw 8(%bp), %ax                 
 255 01cd 83E0FE   	   andw $0xfffe, %ax                
 256 01d0 894608   	   movw %ax, 8(%bp)                 
 257 01d3 5D       	   pop  %bp                         
 258 01d4 58       	   pop  %ax                         
 259              	                                    
 260 01d5 CF       	   iret                             
 261              	
 262              		int15_handler_asm_ah88:             
 263 01d6 E8FEFF   		call int15_handler_ah88                    
 264              	                                    
 265 01d9 2E8B2600 	   mov %cs:int15_reg_sp, %sp        
 265      00
 266 01de 2E8E1600 	   mov %cs:int15_reg_ss, %ss        
 266      00
 267              	                                    
 268 01e3 5F       	pop %di
 269 01e4 5E       	pop %si
 270 01e5 5D       	pop %bp
 271 01e6 5B       	pop %bx
 272 01e7 5B       	pop %bx
 273 01e8 5A       	pop %dx
 274 01e9 59       	pop %cx
 275 01ea 58       	pop %ax
 276 01eb 07       		pop %es                          
 277 01ec 1F       		pop %ds                          
 278 01ed 2EA10000 		mov	    %cs:int15_reg_ax, %ax    
 279 01f1 50       	   push %ax                         
 280 01f2 55       	   push %bp                         
 281 01f3 89E5     	   mov  %sp, %bp                    
 282 01f5 8B4608   	   movw 8(%bp), %ax                 
 283 01f8 83E0FE   	   andw $0xfffe, %ax                
 284 01fb 894608   	   movw %ax, 8(%bp)                 
 285 01fe 5D       	   pop  %bp                         
 286 01ff 58       	   pop  %ax                         
 287              	                                    
 288 0200 CF       	   iret                             
 289              	
 290              		int15_handler_asm_ahc0:             
 291 0201 E8FEFF   		call int15_handler_ahc0                    
 292              	                                    
 293 0204 2E8B2600 	   mov %cs:int15_reg_sp, %sp        
 293      00
 294 0209 2E8E1600 	   mov %cs:int15_reg_ss, %ss        
 294      00
 295              	                                    
 296 020e 5F       	pop %di
 297 020f 5E       	pop %si
 298 0210 5D       	pop %bp
 299 0211 5B       	pop %bx
 300 0212 5B       	pop %bx
 301 0213 5A       	pop %dx
 302 0214 59       	pop %cx
 303 0215 58       	pop %ax
 304 0216 07       		pop %es                          
 305 0217 1F       		pop %ds                          
 306 0218 2E8E0600 		mov	    %cs:int15_reg_es, %es    
 306      00
 307 021d 2E8B1E00 		mov	    %cs:int15_reg_bx, %bx    
 307      00
 308 0222 2E8A2601 		movb    %cs:int15_reg_ax+1, %ah  
 308      00
 309 0227 50       	   push %ax                         
 310 0228 55       	   push %bp                         
 311 0229 89E5     	   mov  %sp, %bp                    
 312 022b 8B4608   	   movw 8(%bp), %ax                 
 313 022e 83E0FE   	   andw $0xfffe, %ax                
 314 0231 894608   	   movw %ax, 8(%bp)                 
 315 0234 5D       	   pop  %bp                         
 316 0235 58       	   pop  %ax                         
 317              	                                    
 318 0236 CF       	   iret                             
 319              	
 320              		.section	.rodata.str1.1,"aMS",@progbits,1
 321              	.LC0:
 322 0000 494E5420 		.string	"INT 0x15\n"
 322      30783135 
 322      0A00
 323              	.LC1:
 324 000a 41583A20 		.string	"AX: %04x BX: %04x CX: %04x DX: %04x ES: %04x DI: %04x \n"
 324      25303478 
 324      2042583A 
 324      20253034 
 324      78204358 
 325              	#NO_APP
 326              		.text
 327              		.global	int15_default_handler
 329              	int15_default_handler:
 330 0237 A10000   		movw	int15_reg_ax,	%ax
 331 023a 30C0     		xorb	%al,	%al
 332 023c 3D00BF   		cmpw	$-16640,	%ax
 333 023f 7501     		jne	.L13
 334 0241 C3       		ret
 335              	.L13:
 336 0242 56       		pushw	%si
 337 0243 57       		pushw	%di
 338 0244 06       		pushw	%es
 339 0245 55       		pushw	%bp
 340 0246 89E5     		movw	%sp,	%bp
 341 0248 83C480   		addw	$-128,	%sp
 342 024b B80000   		movw	$.LC0,	%ax
 343 024e 50       		pushw	%ax
 344 024f BF8000   		movw	$128,	%di
 345 0252 57       		pushw	%di
 346 0253 8D7680   		leaw	-128(%bp),	%si
 347 0256 56       		pushw	%si
 348 0257 E8FEFF   		call	s_snprintf
 349 025a 56       		pushw	%si
 350              	#APP
 351              	;# 189 "src/int15h.c" 1
   1              	#include <stdio.h>
   2              	#include "basicio.h"
   3              	
   4              	#include "system.h"
   5              	#include "asmfuncs.h"
   6              	#include "emu_interface.h"
   7              	
   8              	
   9              	unsigned int int15_reg_ax;
  10              	unsigned int int15_reg_bx;
  11              	unsigned int int15_reg_cx;
  12              	unsigned int int15_reg_dx;
  13              	unsigned int int15_reg_es;
  14              	
  15              	unsigned int int15_reg_di;
  16              	
  17              	unsigned int int15_reg_sp;
  18              	unsigned int int15_reg_ss;
  19              	
  20              	unsigned int int15_reg_ss2;
  21              	
  22              	#define PUSHA \
  23              	"mov %ss, %cs:int15_reg_ss2\n" \
  24              	"push %ax\n" \
  25              	"push %cx\n" \
  26              	"push %dx\n" \
  27              	"push %bx\n" \
  28              	"push %cs:int15_reg_ss2\n" \
  29              	"push %bp\n" \
  30              	"push %si\n" \
  31              	"push %di\n"
  32              	
  33              	#define POPA \
  34              	"pop %di\n" \
  35              	"pop %si\n" \
  36              	"pop %bp\n" \
  37              	"pop %bx\n"  /* skip next 2 bytes of stack */ \
  38              	"pop %bx\n" \
  39              	"pop %dx\n" \
  40              	"pop %cx\n" \
  41              	"pop %ax\n" 
  42              	
  43              	__asm__ (
  44              	"   .global int15_handler_asm        \n"
  45              	"int15_handler_asm:                  \n"
  46              	"	push %ds                         \n"
  47              	"	push %es                         \n"
  48              	PUSHA /*"	pusha                            \n"*/
  49              	"                                    \n"
  50              	"   mov %ax, %cs:int15_reg_ax        \n"
  51              	"   mov %bx, %cs:int15_reg_bx        \n"
  52              	"   mov %cx, %cs:int15_reg_cx        \n"
  53              	"   mov %dx, %cs:int15_reg_dx        \n"
  54              	"   mov %es, %cs:int15_reg_es        \n"
  55              	"   mov %di, %cs:int15_reg_di        \n"
  56              	"   mov %sp, %cs:int15_reg_sp        \n"
  57              	"   mov %ss, %cs:int15_reg_ss        \n"
  58              	"                                    \n"
  59              	"	mov	%cs, %ax                     \n"
  60              	"	mov	%ax, %ss                     \n"
  61              	"	mov	%ax, %ds                     \n"
  62              	"	mov	$0xffff, %sp                 \n"
  63              	"                                    \n"
  64              	"   mov int15_reg_ax, %ax            \n"
  65              	"	cmpw $0x2400, %ax                \n"
  66              	"	je	int15_handler_asm_ax2400     \n"
  67              	"	cmpw $0x2401, %ax                \n"
  68              	"	je	int15_handler_asm_ax2401     \n"
  69              	"	cmpw $0x2402, %ax                \n"
  70              	"	je	int15_handler_asm_ax2402     \n"
  71              	"	cmpw $0x2403, %ax                \n"
  72              	"	je	int15_handler_asm_ax2403     \n"
  73              	"	cmpw $0xe801, %ax                \n"
  74              	"	je	int15_handler_asm_axe801     \n"
  75              	"	cmpw $0xe820, %ax                \n"
  76              	"	je	int15_handler_asm_axe820     \n"
  77              	"	cmp  $0x86, %ah                  \n"
  78              	"	je	int15_handler_asm_ah86       \n"
  79              	"	cmp  $0x88, %ah                  \n"
  80              	"	je	int15_handler_asm_ah88       \n"
  81              	"	cmp  $0xc0, %ah                  \n"
  82              	"	je	int15_handler_asm_ahc0       \n"
  83              	"                                    \n"
  84              	"	call int15_default_handler       \n"
  85              	"                                    \n"
  86              	"   mov %cs:int15_reg_sp, %sp        \n"
  87              	"   mov %cs:int15_reg_ss, %ss        \n"
  88              	"                                    \n"
  89              	POPA/*"	popa                             \n"*/
  90              	"	pop %es                          \n"
  91              	"	pop %ds                          \n"
  92              	"	iret                             \n");
  93              	
  94              	#define HEAD_OF_ASM_HANDLER(func)  \
  95              	"	call " func "                    \n" \
  96              	"                                    \n" \
  97              	"   mov %cs:int15_reg_sp, %sp        \n" \
  98              	"   mov %cs:int15_reg_ss, %ss        \n" \
  99              	"                                    \n" \
 100              	POPA/*"	popa                             \n"*/ \
 101              	"	pop %es                          \n" \
 102              	"	pop %ds                          \n" 
 103              	
 104              	#define IRET_WITHOUT_CARRYFLAG  \
 105              	"   push %ax                         \n" \
 106              	"   push %bp                         \n" \
 107              	"   mov  %sp, %bp                    \n" \
 108              	"   movw 8(%bp), %ax                 \n" /* clear the carry flag */ \
 109              	"   andw $0xfffe, %ax                \n" \
 110              	"   movw %ax, 8(%bp)                 \n" \
 111              	"   pop  %bp                         \n" \
 112              	"   pop  %ax                         \n" \
 113              	"                                    \n" \
 114              	"   iret                             \n"
 115              	
 116              	
 117              	__asm__ (
 118              	"int15_handler_asm_ax2400:             \n"
 119              	HEAD_OF_ASM_HANDLER("int15_handler_ax2400")
 120              	"	movb    %cs:int15_reg_ax+1, %ah    \n"
 121              	IRET_WITHOUT_CARRYFLAG);
 122              	
 123              	__asm__ (
 124              	"int15_handler_asm_ax2401:             \n"
 125              	HEAD_OF_ASM_HANDLER("int15_handler_ax2401")
 126              	"	movb    %cs:int15_reg_ax+1, %ah    \n"
 127              	IRET_WITHOUT_CARRYFLAG);
 128              	
 129              	__asm__ (
 130              	"int15_handler_asm_ax2402:             \n"
 131              	HEAD_OF_ASM_HANDLER("int15_handler_ax2402")
 132              	"	mov     %cs:int15_reg_ax, %ax      \n"
 133              	"	mov     %cs:int15_reg_cx, %cx      \n"
 134              	IRET_WITHOUT_CARRYFLAG);
 135              	
 136              	__asm__ (
 137              	"int15_handler_asm_ax2403:             \n"
 138              	HEAD_OF_ASM_HANDLER("int15_handler_ax2403")
 139              	"	movb    %cs:int15_reg_ax+1, %ah    \n"
 140              	"	mov     %cs:int15_reg_bx, %bx      \n"
 141              	IRET_WITHOUT_CARRYFLAG);
 142              	
 143              	
 144              	__asm__ (
 145              	"int15_handler_asm_axe801:             \n"
 146              	HEAD_OF_ASM_HANDLER("int15_handler_axe801")
 147              	"	mov	    %cs:int15_reg_ax, %ax    \n"
 148              	"	mov	    %cs:int15_reg_bx, %bx    \n"
 149              	"	mov	    %cs:int15_reg_cx, %cx    \n"
 150              	"	mov	    %cs:int15_reg_dx, %dx    \n"
 151              	IRET_WITHOUT_CARRYFLAG);
 152              	
 153              	
 154              	__asm__ (
 155              	"int15_handler_asm_axe820:             \n"
 156              	HEAD_OF_ASM_HANDLER("int15_handler_axe820")
 157              	"   iret                             \n");
 158              	
 159              	__asm__ (
 160              	"int15_handler_asm_ah86:             \n"
 161              	HEAD_OF_ASM_HANDLER("int15_handler_ah86")
 162              	"	mov	    %cs:int15_reg_ax, %ax    \n"
 163              	IRET_WITHOUT_CARRYFLAG);
 164              	
 165              	__asm__ (
 166              	"int15_handler_asm_ah88:             \n"
 167              	HEAD_OF_ASM_HANDLER("int15_handler_ah88")
 168              	"	mov	    %cs:int15_reg_ax, %ax    \n"
 169              	IRET_WITHOUT_CARRYFLAG);
 170              	
 171              	__asm__ (
 172              	"int15_handler_asm_ahc0:             \n"
 173              	HEAD_OF_ASM_HANDLER("int15_handler_ahc0")
 174              	"	mov	    %cs:int15_reg_es, %es    \n"
 175              	"	mov	    %cs:int15_reg_bx, %bx    \n"
 176              	"	movb    %cs:int15_reg_ax+1, %ah  \n"
 177              	IRET_WITHOUT_CARRYFLAG);
 178              	
 179              	
 180              	void int15_default_handler(void){
 181              	    if( (int15_reg_ax & 0xff00) == 0xbf00 ){
 182              	        // DOS4GW related, not BIOS call
 183              	        return;
 184              	    }
 185              	
 186              	    char buf[128];
 187              		unsigned int reg_ss;
 188              	
 189 025b 8CD0     	    asm volatile("mov  %%ss, %w0" : "=a"(reg_ss) : );
 190              	
 352              		mov  %ss, %ax
 353              	;# 0 "" 2
 354              	#NO_APP
 355 025d 8EC0     		movw	%ax,	%es
 356 025f 50       		pushw	%ax
 357 0260 E8FEFF   		call	emuLogMessage
 358 0263 FF360000 		pushw	int15_reg_di
 359 0267 FF360000 		pushw	int15_reg_es
 360 026b FF360000 		pushw	int15_reg_dx
 361 026f FF360000 		pushw	int15_reg_cx
 362 0273 FF360000 		pushw	int15_reg_bx
 363 0277 FF360000 		pushw	int15_reg_ax
 364 027b B80A00   		movw	$.LC1,	%ax
 365 027e 50       		pushw	%ax
 366 027f 57       		pushw	%di
 367 0280 56       		pushw	%si
 368 0281 E8FEFF   		call	s_snprintf
 369 0284 56       		pushw	%si
 370 0285 06       		pushw	%es
 371 0286 E8FEFF   		call	emuLogMessage
 372 0289 89EC     		movw	%bp,	%sp
 373 028b 5D       		popw	%bp
 374 028c 07       		popw	%es
 375 028d 5F       		popw	%di
 376 028e 5E       		popw	%si
 377 028f C3       		ret
 379              		.global	int15_handler_ah86
 381              	int15_handler_ah86:
 382 0290 55       		pushw	%bp
 383 0291 89E5     		movw	%sp,	%bp
 384 0293 83EC02   		subw	$2,	%sp
 385 0296 8B0E0000 		movw	int15_reg_cx,	%cx
 386 029a 31C0     		xorw	%ax,	%ax
 387 029c 8B1E0000 		movw	int15_reg_dx,	%bx
 388 02a0 01C3     		addw	%ax,	%bx
 389 02a2 11C1     		adcw	%ax,	%cx
 390 02a4 8946FE   		movw	%ax,	-2(%bp)
 391 02a7 8B46FE   		movw	-2(%bp),	%ax
 392 02aa 99       		cwtd
 393 02ab 39D1     		cmpw	%dx,	%cx
 394 02ad 760F     		jbe	.L29
 395              	.L20:
 396 02af 8B46FE   		movw	-2(%bp),	%ax
 397 02b2 40       		incw	%ax
 398 02b3 8946FE   		movw	%ax,	-2(%bp)
 399 02b6 8B46FE   		movw	-2(%bp),	%ax
 400 02b9 99       		cwtd
 401 02ba 39D1     		cmpw	%dx,	%cx
 402 02bc 77F1     		ja	.L20
 403              	.L29:
 404 02be 7504     		jne	.L14
 405 02c0 39C3     		cmpw	%ax,	%bx
 406 02c2 77EB     		ja	.L20
 407              	.L14:
 408 02c4 89EC     		movw	%bp,	%sp
 409 02c6 5D       		popw	%bp
 410 02c7 C3       		ret
 412              		.global	int15_handler_ax2400
 414              	int15_handler_ax2400:
 415 02c8 B89200   		movw	$146,	%ax
 416 02cb 50       		pushw	%ax
 417 02cc B002     		movb	$2,	%al
 418 02ce 50       		pushw	%ax
 419 02cf E8FEFF   		call	systemOutByte
 420 02d2 C7060000 		movw	$0,	int15_a20_status
 420      0000
 421 02d8 C7060000 		movw	$0,	int15_reg_ax
 421      0000
 422 02de 83C404   		addw	$4,	%sp
 423 02e1 C3       		ret
 425              		.global	int15_handler_ax2401
 427              	int15_handler_ax2401:
 428 02e2 B89200   		movw	$146,	%ax
 429 02e5 50       		pushw	%ax
 430 02e6 B002     		movb	$2,	%al
 431 02e8 50       		pushw	%ax
 432 02e9 E8FEFF   		call	systemOutByte
 433 02ec C7060000 		movw	$1,	int15_a20_status
 433      0100
 434 02f2 C7060000 		movw	$0,	int15_reg_ax
 434      0000
 435 02f8 83C404   		addw	$4,	%sp
 436 02fb C3       		ret
 438              		.global	int15_handler_ax2402
 440              	int15_handler_ax2402:
 441 02fc B89200   		movw	$146,	%ax
 442 02ff 50       		pushw	%ax
 443 0300 E8FEFF   		call	systemInByte
 444 0303 D0E8     		shrb	$1,	%al
 445 0305 83E001   		andw	$1,	%ax
 446 0308 A30000   		movw	%ax,	int15_a20_status
 447 030b A30000   		movw	%ax,	int15_reg_ax
 448 030e C7060000 		movw	$0,	int15_reg_cx
 448      0000
 449 0314 83C402   		addw	$2,	%sp
 450 0317 C3       		ret
 452              		.global	int15_handler_ax2403
 454              	int15_handler_ax2403:
 455 0318 C7060000 		movw	$0,	int15_reg_ax
 455      0000
 456 031e C7060000 		movw	$1,	int15_reg_bx
 456      0100
 457 0324 C3       		ret
 459              		.global	int15_handler_axe801
 461              	int15_handler_axe801:
 462 0325 56       		pushw	%si
 463 0326 57       		pushw	%di
 464 0327 E8FEFF   		call	emuGetMemoryCapacity
 465 032a 89D7     		movw	%dx,	%di
 466 032c B106     		movb	$6,	%cl
 467 032e D3E7     		shlw	%cl,	%di
 468 0330 B10A     		movb	$10,	%cl
 469 0332 D3E8     		shrw	%cl,	%ax
 470 0334 89C3     		movw	%ax,	%bx
 471 0336 09FB     		orw	%di,	%bx
 472 0338 D3EA     		shrw	%cl,	%dx
 473 033a 89D6     		movw	%dx,	%si
 474 033c 85D2     		testw	%dx,	%dx
 475 033e 7506     		jne	.L35
 476 0340 81FB0040 		cmpw	$16384,	%bx
 477 0344 7629     		jbe	.L43
 478              	.L35:
 479 0346 C7060000 		movw	$15360,	int15_reg_ax
 479      003C
 480 034c 81C300C0 		addw	$-16384,	%bx
 481 0350 83D6FF   		adcw	$-1,	%si
 482 0353 B10A     		movb	$10,	%cl
 483 0355 D3E6     		shlw	%cl,	%si
 484 0357 B106     		movb	$6,	%cl
 485 0359 D3EB     		shrw	%cl,	%bx
 486 035b 09DE     		orw	%bx,	%si
 487 035d BB003C   		movw	$15360,	%bx
 488 0360 89360000 		movw	%si,	int15_reg_bx
 489 0364 891E0000 		movw	%bx,	int15_reg_cx
 490 0368 89360000 		movw	%si,	int15_reg_dx
 491 036c 5F       		popw	%di
 492 036d 5E       		popw	%si
 493 036e C3       		ret
 494              	.L43:
 495 036f 80C7FC   		addb	$-4,	%bh
 496 0372 891E0000 		movw	%bx,	int15_reg_ax
 497 0376 89360000 		movw	%si,	int15_reg_bx
 498 037a 891E0000 		movw	%bx,	int15_reg_cx
 499 037e 89360000 		movw	%si,	int15_reg_dx
 500 0382 5F       		popw	%di
 501 0383 5E       		popw	%si
 502 0384 C3       		ret
 504              		.global	int15_handler_axe820
 506              	int15_handler_axe820:
 507 0385 C3       		ret
 509              		.global	int15_handler_ah88
 511              	int15_handler_ah88:
 512 0386 E8FEFF   		call	emuGetMemoryCapacity
 513 0389 89D3     		movw	%dx,	%bx
 514 038b B106     		movb	$6,	%cl
 515 038d D3E3     		shlw	%cl,	%bx
 516 038f B10A     		movb	$10,	%cl
 517 0391 D3E8     		shrw	%cl,	%ax
 518 0393 09D8     		orw	%bx,	%ax
 519 0395 D3EA     		shrw	%cl,	%dx
 520 0397 750C     		jne	.L48
 521 0399 3D0040   		cmpw	$16384,	%ax
 522 039c 7707     		ja	.L48
 523 039e 80C4FC   		addb	$-4,	%ah
 524 03a1 A30000   		movw	%ax,	int15_reg_ax
 525 03a4 C3       		ret
 526              	.L48:
 527 03a5 B8003C   		movw	$15360,	%ax
 528 03a8 A30000   		movw	%ax,	int15_reg_ax
 529 03ab C3       		ret
 531              		.global	int15_handler_ahc0
 533              	int15_handler_ahc0:
 534              	#APP
 535              	;# 308 "src/int15h.c" 1
 191              	    s_snprintf(buf, sizeof(buf), "INT 0x15\n");
 192              	    emuLogMessage(reg_ss, (uint16_t)buf);
 193              	
 194              	    s_snprintf(buf, sizeof(buf), "AX: %04x BX: %04x CX: %04x DX: %04x ES: %04x DI: %04x \n", 
 195              	        int15_reg_ax, int15_reg_bx, int15_reg_cx, int15_reg_dx, int15_reg_es, int15_reg_di);
 196              	    emuLogMessage(reg_ss, (uint16_t)buf);
 197              	}
 198              	
 199              	void int15_handler_ah86(void){
 200              	    //  INT 15h / AH = 86h - BIOS wait function. 
 201              	
 202              	    unsigned long delay = (((unsigned long)int15_reg_cx)<<16) + int15_reg_dx;
 203              	
 204              	    // TODO: it is temporaly code
 205              	    volatile int i;
 206              	    for(i=0; i<delay; i++) ;
 207              	}
 208              	
 209              	
 210              	unsigned int int15_a20_status = 0;
 211              	
 212              	void int15_handler_ax2400(void){
 213              	    // Disable A20 GATE
 214              	
 215              	    /*
 216              	    if( processor_is_486_or_newer ){
 217              	        asm volatile(".byte 0x0f, 0x09\n");
 218              	    }
 219              	    */
 220              	
 221              	    // This BIOS call intends to disables A20. But a DOS app uses this to enable A20 line...
 222              	    systemOutByte(0x02, 0x92); // SystemControlPortA
 223              	
 224              	    int15_a20_status = 0;
 225              	    
 226              	    int15_reg_ax = 0;
 227              	    return ;
 228              	}
 229              	
 230              	void int15_handler_ax2401(void){
 231              	    // Enable A20 GATE
 232              	
 233              	    /*
 234              	    if( processor_is_486_or_newer ){
 235              	        asm volatile(".byte 0x0f, 0x09\n");
 236              	    }
 237              	    */
 238              	
 239              	    systemOutByte(0x02, 0x92); // SystemControlPortA
 240              	
 241              	    int15_a20_status = 1;
 242              	
 243              	    int15_reg_ax = 0;
 244              	    return ;
 245              	}
 246              	
 247              	void int15_handler_ax2402(void){
 248              	    // Return A20 GATE status
 249              	
 250              	    int15_a20_status = ( systemInByte(0x92) & 2 ) ? 1 : 0;
 251              	
 252              	    int15_reg_ax = int15_a20_status;
 253              	    int15_reg_cx = 0;
 254              	    return ;
 255              	}
 256              	
 257              	void int15_handler_ax2403(void){
 258              	    // Return A20 GATE support
 259              	
 260              	    int15_reg_ax = 0;
 261              	    int15_reg_bx = (1); // supported on keyboard controller
 262              	    return ;
 263              	}
 264              	
 265              	void int15_handler_axe801(void){
 266              	    /*
 267              	        Refer: http://mirror.cs.msu.ru/oldlinux.org/Linux.old/docs/interrupts/int-html/rb-1739.htm
 268              	
 269              	        Return:CF clear if successful
 270              	        AX = extended memory between 1M and 16M, in K (max 3C00h = 15MB)
 271              	        BX = extended memory above 16M, in 64K blocks
 272              	        CX = configured memory 1M to 16M, in K
 273              	        DX = configured memory above 16M, in 64K blocks
 274              	    */
 275              	    uint32_t memsize = (emuGetMemoryCapacity()>>10); // capacity in KiB
 276              	
 277              	    int15_reg_ax = (memsize <= 16*1024) ? (memsize - (1 << 10))    : 0x3c00;
 278              	    int15_reg_bx = (memsize  > 16*1024) ? (memsize - 16*1024) / 64 : 0;
 279              	    int15_reg_cx = (memsize <= 16*1024) ? (memsize - (1 << 10)) : 0x3c00;
 280              	    int15_reg_dx = (memsize  > 16*1024) ? (memsize - 16*1024) / 64 : 0;
 281              	}
 282              	
 283              	
 284              	void int15_handler_axe820(void){
 285              	    // This feature uses 32-bit regs
 286              	    // It is disabled
 287              	    /*
 288              	    s_printf("\n* INT 0x15\n");
 289              	    s_printf("AX: %04x BX: %04x CX: %04x DX: %04x ES: %04x DI: %04x \n", 
 290              	        int15_reg_ax, int15_reg_bx, int15_reg_cx, int15_reg_dx, int15_reg_es, int15_reg_di);
 291              	    */
 292              	    return ;
 293              	}
 294              	
 295              	void int15_handler_ah88(void){
 296              	    // Return memory size
 297              	
 298              	    // Obtain memory size from the emulator
 299              	    uint32_t memsize = (emuGetMemoryCapacity()>>10); // capacity in KiB
 300              	
 301              	    int15_reg_ax = (memsize <= 16*1024) ? (memsize - (1 << 10)) : 0x3c00;
 302              	}
 303              	
 304              	unsigned char int15_c0_buf[10];
 305              	
 306              	void int15_handler_ahc0(void){
 307              		unsigned int reg_cs;
 308 03ac 8CC8     		asm volatile("mov  %%cs, %w0" : "=a"(reg_cs) : );
 309              	
 536              		mov  %cs, %ax
 537              	;# 0 "" 2
 538              	#NO_APP
 539 03ae C7060000 		movw	$0,	int15_reg_ax
 539      0000
 540 03b4 C7060000 		movw	$int15_c0_buf,	int15_reg_bx
 540      0000
 541 03ba A30000   		movw	%ax,	int15_reg_es
 542 03bd C7060000 		movw	$8,	int15_c0_buf
 542      0800
 543 03c3 C7060200 		movw	$257,	int15_c0_buf+2
 543      0101
 544 03c9 C7060400 		movw	$1,	int15_c0_buf+4
 544      0100
 545 03cf C7060600 		movw	$0,	int15_c0_buf+6
 545      0000
 546 03d5 C7060800 		movw	$0,	int15_c0_buf+8
 546      0000
 547 03db C3       		ret
 549              		.comm	int15_c0_buf,10,1
 550              		.global	int15_a20_status
 551              		.bss
 552              		.p2align	1
 555              	int15_a20_status:
 556 0000 0000     		.skip	2,0
 557              		.comm	int15_reg_ss2,2,2
 558              		.comm	int15_reg_ss,2,2
 559              		.comm	int15_reg_sp,2,2
 560              		.comm	int15_reg_di,2,2
 561              		.comm	int15_reg_es,2,2
 562              		.comm	int15_reg_dx,2,2
 563              		.comm	int15_reg_cx,2,2
 564              		.comm	int15_reg_bx,2,2
 565              		.comm	int15_reg_ax,2,2
 566              		.ident	"GCC: (GNU) 6.3.0"
   1              		.arch i8086,jumps
   2              		.code16
   3              		.att_syntax prefix
   4              	#NO_APP
   5              	#APP
   6              		   .global int16_handler_asm        
   7              	int16_handler_asm:                  
   8 0000 1E       		push %ds                         
   9 0001 06       		push %es                         
  10 0002 2E8C1600 	mov %ss, %cs:int16_reg_ss2
  10      00
  11 0007 50       	push %ax
  12 0008 51       	push %cx
  13 0009 52       	push %dx
  14 000a 53       	push %bx
  15 000b 2EFF3600 	push %cs:int16_reg_ss2
  15      00
  16 0010 55       	push %bp
  17 0011 56       	push %si
  18 0012 57       	push %di
  19              	                                    
  20 0013 2EA30000 	   mov %ax, %cs:int16_reg_ax        
  21 0017 2E891E00 	   mov %bx, %cs:int16_reg_bx        
  21      00
  22 001c 2E890E00 	   mov %cx, %cs:int16_reg_cx        
  22      00
  23 0021 2E891600 	   mov %dx, %cs:int16_reg_dx        
  23      00
  24 0026 2E8C0600 	   mov %es, %cs:int16_reg_es        
  24      00
  25 002b 2E892600 	   mov %sp, %cs:int16_reg_sp        
  25      00
  26 0030 2E8C1600 	   mov %ss, %cs:int16_reg_ss        
  26      00
  27              	                                    
  28 0035 8CC8     		mov	%cs, %ax                     
  29 0037 8ED0     		mov	%ax, %ss                     
  30 0039 8ED8     		mov	%ax, %ds                     
  31 003b BCFFFF   		mov	$0xffff, %sp                 
  32              	                                    
  33 003e A10000   	   mov int16_reg_ax, %ax            
  34 0041 80FC00   		cmp	$0x00, %ah                   
  35 0044 7442     		je	int16_handler_asm_ah00       
  36 0046 80FC10   		cmp	$0x10, %ah                   
  37 0049 7459     		je	int16_handler_asm_ah10       
  38 004b 80FC01   		cmp	$0x01, %ah                   
  39 004e 7470     		je	int16_handler_asm_ah01       
  40 0050 80FC11   		cmp	$0x11, %ah                   
  41 0053 7503E9A4 		je	int16_handler_asm_ah11       
  41      00
  42 0058 80FC02   		cmp	$0x02, %ah                   
  43 005b 7503E9D8 		je	int16_handler_asm_ah02       
  43      00
  44 0060 80FC05   		cmp	$0x05, %ah                   
  45 0063 7503E9EC 		je	int16_handler_asm_ah05       
  45      00
  46 0068 80FC12   		cmp	$0x12, %ah                   
  47 006b 7503E900 		je	int16_handler_asm_ah12       
  47      01
  48              	                                    
  49 0070 E8FEFF   		call int16_default_handler       
  50              	                                    
  51 0073 2E8B2600 	   mov %cs:int16_reg_sp, %sp        
  51      00
  52 0078 2E8E1600 	   mov %cs:int16_reg_ss, %ss        
  52      00
  53              	                                    
  54 007d 5F       	pop %di
  55 007e 5E       	pop %si
  56 007f 5D       	pop %bp
  57 0080 5B       	pop %bx
  58 0081 5B       	pop %bx
  59 0082 5A       	pop %dx
  60 0083 59       	pop %cx
  61 0084 58       	pop %ax
  62 0085 07       		pop %es                          
  63 0086 1F       		pop %ds                          
  64 0087 CF       		iret                             
  65              	
  66              		int16_handler_asm_ah00:             
  67 0088 E8FEFF   		call int16_handler_ah00                    
  68              	                                    
  69 008b 2E8B2600 	   mov %cs:int16_reg_sp, %sp        
  69      00
  70 0090 2E8E1600 	   mov %cs:int16_reg_ss, %ss        
  70      00
  71              	                                    
  72 0095 5F       	pop %di
  73 0096 5E       	pop %si
  74 0097 5D       	pop %bp
  75 0098 5B       	pop %bx
  76 0099 5B       	pop %bx
  77 009a 5A       	pop %dx
  78 009b 59       	pop %cx
  79 009c 58       	pop %ax
  80 009d 07       		pop %es                          
  81 009e 1F       		pop %ds                          
  82 009f 2EA10000 		mov	%cs:int16_reg_ax, %ax        
  83 00a3 CF       	   iret                             
  84              	
  85              		int16_handler_asm_ah10:             
  86 00a4 E8FEFF   		call int16_handler_ah10                    
  87              	                                    
  88 00a7 2E8B2600 	   mov %cs:int16_reg_sp, %sp        
  88      00
  89 00ac 2E8E1600 	   mov %cs:int16_reg_ss, %ss        
  89      00
  90              	                                    
  91 00b1 5F       	pop %di
  92 00b2 5E       	pop %si
  93 00b3 5D       	pop %bp
  94 00b4 5B       	pop %bx
  95 00b5 5B       	pop %bx
  96 00b6 5A       	pop %dx
  97 00b7 59       	pop %cx
  98 00b8 58       	pop %ax
  99 00b9 07       		pop %es                          
 100 00ba 1F       		pop %ds                          
 101 00bb 2EA10000 		mov	%cs:int16_reg_ax, %ax        
 102 00bf CF       	   iret                             
 103              	
 104              		int16_handler_asm_ah01:             
 105 00c0 E8FEFF   		call int16_handler_ah01                    
 106              	                                    
 107 00c3 2E8B2600 	   mov %cs:int16_reg_sp, %sp        
 107      00
 108 00c8 2E8E1600 	   mov %cs:int16_reg_ss, %ss        
 108      00
 109              	                                    
 110 00cd 5F       	pop %di
 111 00ce 5E       	pop %si
 112 00cf 5D       	pop %bp
 113 00d0 5B       	pop %bx
 114 00d1 5B       	pop %bx
 115 00d2 5A       	pop %dx
 116 00d3 59       	pop %cx
 117 00d4 58       	pop %ax
 118 00d5 07       		pop %es                          
 119 00d6 1F       		pop %ds                          
 120 00d7 2EA10000 		mov	 %cs:int16_reg_ax, %ax        
 121 00db 2E833E00 		cmpw $1, %cs:int16_zf             
 121      0001
 122 00e1 50       	   push %ax                         
 123 00e2 55       	   push %bp                         
 124 00e3 89E5     	   mov  %sp, %bp                    
 125 00e5 8B4608   	   movw 8(%bp), %ax                 
 126              	                                    
 127 00e8 7409     	   jz 1f                            
 128              	                                    
 129 00ea 83E0BF   	   andw $0xffbf, %ax                
 130 00ed 894608   	   movw %ax, 8(%bp)                 
 131 00f0 5D       	   pop  %bp                         
 132 00f1 58       	   pop  %ax                         
 133 00f2 CF       	   iret                             
 134              	                                    
 135              	1:                                  
 136 00f3 83C840   	   orw  $0x0040, %ax                
 137 00f6 894608   	   movw %ax, 8(%bp)                 
 138 00f9 5D       	   pop  %bp                         
 139 00fa 58       	   pop  %ax                         
 140 00fb CF       	   iret                             
 141              	
 142              		int16_handler_asm_ah11:             
 143 00fc E8FEFF   		call int16_handler_ah11                    
 144              	                                    
 145 00ff 2E8B2600 	   mov %cs:int16_reg_sp, %sp        
 145      00
 146 0104 2E8E1600 	   mov %cs:int16_reg_ss, %ss        
 146      00
 147              	                                    
 148 0109 5F       	pop %di
 149 010a 5E       	pop %si
 150 010b 5D       	pop %bp
 151 010c 5B       	pop %bx
 152 010d 5B       	pop %bx
 153 010e 5A       	pop %dx
 154 010f 59       	pop %cx
 155 0110 58       	pop %ax
 156 0111 07       		pop %es                          
 157 0112 1F       		pop %ds                          
 158 0113 2EA10000 		mov	 %cs:int16_reg_ax, %ax        
 159 0117 2E833E00 		cmpw $1, %cs:int16_zf             
 159      0001
 160 011d 50       	   push %ax                         
 161 011e 55       	   push %bp                         
 162 011f 89E5     	   mov  %sp, %bp                    
 163 0121 8B4608   	   movw 8(%bp), %ax                 
 164              	                                    
 165 0124 7409     	   jz 1f                            
 166              	                                    
 167 0126 83E0BF   	   andw $0xffbf, %ax                
 168 0129 894608   	   movw %ax, 8(%bp)                 
 169 012c 5D       	   pop  %bp                         
 170 012d 58       	   pop  %ax                         
 171 012e CF       	   iret                             
 172              	                                    
 173              	1:                                  
 174 012f 83C840   	   orw  $0x0040, %ax                
 175 0132 894608   	   movw %ax, 8(%bp)                 
 176 0135 5D       	   pop  %bp                         
 177 0136 58       	   pop  %ax                         
 178 0137 CF       	   iret                             
 179              	
 180              		int16_handler_asm_ah02:             
 181 0138 E8FEFF   		call int16_handler_ah02                    
 182              	                                    
 183 013b 2E8B2600 	   mov %cs:int16_reg_sp, %sp        
 183      00
 184 0140 2E8E1600 	   mov %cs:int16_reg_ss, %ss        
 184      00
 185              	                                    
 186 0145 5F       	pop %di
 187 0146 5E       	pop %si
 188 0147 5D       	pop %bp
 189 0148 5B       	pop %bx
 190 0149 5B       	pop %bx
 191 014a 5A       	pop %dx
 192 014b 59       	pop %cx
 193 014c 58       	pop %ax
 194 014d 07       		pop %es                          
 195 014e 1F       		pop %ds                          
 196 014f 2EA00000 		movb %cs:int16_reg_ax, %al       
 197 0153 CF       	   iret                             
 198              	
 199              		int16_handler_asm_ah05:             
 200 0154 E8FEFF   		call int16_handler_ah05                    
 201              	                                    
 202 0157 2E8B2600 	   mov %cs:int16_reg_sp, %sp        
 202      00
 203 015c 2E8E1600 	   mov %cs:int16_reg_ss, %ss        
 203      00
 204              	                                    
 205 0161 5F       	pop %di
 206 0162 5E       	pop %si
 207 0163 5D       	pop %bp
 208 0164 5B       	pop %bx
 209 0165 5B       	pop %bx
 210 0166 5A       	pop %dx
 211 0167 59       	pop %cx
 212 0168 58       	pop %ax
 213 0169 07       		pop %es                          
 214 016a 1F       		pop %ds                          
 215 016b 2EA00000 		movb %cs:int16_reg_ax, %al       
 216 016f CF       	   iret                             
 217              	
 218              		int16_handler_asm_ah12:             
 219 0170 E8FEFF   		call int16_handler_ah12                    
 220              	                                    
 221 0173 2E8B2600 	   mov %cs:int16_reg_sp, %sp        
 221      00
 222 0178 2E8E1600 	   mov %cs:int16_reg_ss, %ss        
 222      00
 223              	                                    
 224 017d 5F       	pop %di
 225 017e 5E       	pop %si
 226 017f 5D       	pop %bp
 227 0180 5B       	pop %bx
 228 0181 5B       	pop %bx
 229 0182 5A       	pop %dx
 230 0183 59       	pop %cx
 231 0184 58       	pop %ax
 232 0185 07       		pop %es                          
 233 0186 1F       		pop %ds                          
 234 0187 2EA10000 		mov	 %cs:int16_reg_ax, %ax        
 235 018b CF       	   iret                             
 236              	
 237              		.section	.rodata.str1.1,"aMS",@progbits,1
 238              	.LC0:
 239 0000 494E5420 		.string	"INT 0x16\n"
 239      30783136 
 239      0A00
 240              	.LC1:
 241 000a 41583A20 		.string	"AX: %04x BX: %04x CX: %04x DX: %04x ES: %04x \n"
 241      25303478 
 241      2042583A 
 241      20253034 
 241      78204358 
 242              	#NO_APP
 243              		.text
 244              		.global	int16_default_handler
 246              	int16_default_handler:
 247 018c 56       		pushw	%si
 248 018d 57       		pushw	%di
 249 018e 06       		pushw	%es
 250 018f 55       		pushw	%bp
 251 0190 89E5     		movw	%sp,	%bp
 252 0192 83C480   		addw	$-128,	%sp
 253 0195 B80000   		movw	$.LC0,	%ax
 254 0198 50       		pushw	%ax
 255 0199 BF8000   		movw	$128,	%di
 256 019c 57       		pushw	%di
 257 019d 8D7680   		leaw	-128(%bp),	%si
 258 01a0 56       		pushw	%si
 259 01a1 E8FEFF   		call	s_snprintf
 260 01a4 56       		pushw	%si
 261              	#APP
 262              	;# 186 "src/int16h.c" 1
   1              	#include <stdio.h>
   2              	#include "basicio.h"
   3              	
   4              	#include "terminal.h"
   5              	#include "system.h"
   6              	#include "asmfuncs.h"
   7              	#include "emu_interface.h"
   8              	
   9              	unsigned int int16_reg_ax;
  10              	unsigned int int16_reg_bx;
  11              	unsigned int int16_reg_cx;
  12              	unsigned int int16_reg_dx;
  13              	unsigned int int16_reg_es;
  14              	
  15              	unsigned int int16_reg_sp;
  16              	unsigned int int16_reg_ss;
  17              	
  18              	unsigned int int16_zf;
  19              	
  20              	unsigned int int16_reg_ss2;
  21              	
  22              	#define PUSHA \
  23              	"mov %ss, %cs:int16_reg_ss2\n" \
  24              	"push %ax\n" \
  25              	"push %cx\n" \
  26              	"push %dx\n" \
  27              	"push %bx\n" \
  28              	"push %cs:int16_reg_ss2\n" \
  29              	"push %bp\n" \
  30              	"push %si\n" \
  31              	"push %di\n"
  32              	
  33              	#define POPA \
  34              	"pop %di\n" \
  35              	"pop %si\n" \
  36              	"pop %bp\n" \
  37              	"pop %bx\n"  /* skip next 2 bytes of stack */ \
  38              	"pop %bx\n" \
  39              	"pop %dx\n" \
  40              	"pop %cx\n" \
  41              	"pop %ax\n" 
  42              	
  43              	unsigned int keybuf;
  44              	int  keybuf_avail = 0;
  45              	
  46              	unsigned char convert_table[128] = {
  47              	//     0     1     2     3     4     5     6     7     8     9     a     b     c     d     e     f
  48              		0x00, 0x1E, 0x30, 0x2E, 0x20, 0x12, 0x21, 0x22, 0x23, 0x17, 0x24, 0x25, 0x26, 0x32, 0x31, 0x18,  /
  49              		0x19, 0x10, 0x13, 0x1F, 0x14, 0x16, 0x2F, 0x11, 0x2D, 0x15, 0x2C, 0x00, 0x00, 0x00, 0x00, 0x00,  /
  50              		0x00, 0x02, 0x00, 0x04, 0x05, 0x06, 0x08, 0x00, 0x0A, 0x0B, 0x09, 0x00, 0x00, 0x00, 0x53, 0x00,  /
  51              		0x0B, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /
  52              		0x03, 0x1E, 0x30, 0x2E, 0x20, 0x12, 0x21, 0x22, 0x23, 0x17, 0x24, 0x25, 0x26, 0x32, 0x31, 0x18,  /
  53              		0x19, 0x10, 0x13, 0x1F, 0x14, 0x16, 0x2F, 0x11, 0x2D, 0x15, 0x2C, 0x00, 0x00, 0x00, 0x07, 0x00,  /
  54              		0x00, 0x1E, 0x30, 0x2E, 0x20, 0x12, 0x21, 0x22, 0x23, 0x17, 0x24, 0x25, 0x26, 0x32, 0x31, 0x18,  /
  55              		0x19, 0x10, 0x13, 0x1F, 0x14, 0x16, 0x2F, 0x11, 0x2D, 0x15, 0x2C, 0x00, 0x00, 0x00, 0x00, 0x00   /
  56              	};
  57              	
  58              	__asm__ (
  59              	"   .global int16_handler_asm        \n"
  60              	"int16_handler_asm:                  \n"
  61              	"	push %ds                         \n"
  62              	"	push %es                         \n"
  63              	PUSHA /*"	pusha                            \n"*/
  64              	"                                    \n"
  65              	"   mov %ax, %cs:int16_reg_ax        \n"
  66              	"   mov %bx, %cs:int16_reg_bx        \n"
  67              	"   mov %cx, %cs:int16_reg_cx        \n"
  68              	"   mov %dx, %cs:int16_reg_dx        \n"
  69              	"   mov %es, %cs:int16_reg_es        \n"
  70              	"   mov %sp, %cs:int16_reg_sp        \n"
  71              	"   mov %ss, %cs:int16_reg_ss        \n"
  72              	"                                    \n"
  73              	"	mov	%cs, %ax                     \n"
  74              	"	mov	%ax, %ss                     \n"
  75              	"	mov	%ax, %ds                     \n"
  76              	"	mov	$0xffff, %sp                 \n"
  77              	"                                    \n"
  78              	"   mov int16_reg_ax, %ax            \n"
  79              	"	cmp	$0x00, %ah                   \n"
  80              	"	je	int16_handler_asm_ah00       \n"
  81              	"	cmp	$0x10, %ah                   \n"
  82              	"	je	int16_handler_asm_ah10       \n"
  83              	"	cmp	$0x01, %ah                   \n"
  84              	"	je	int16_handler_asm_ah01       \n"
  85              	"	cmp	$0x11, %ah                   \n"
  86              	"	je	int16_handler_asm_ah11       \n"
  87              	"	cmp	$0x02, %ah                   \n"
  88              	"	je	int16_handler_asm_ah02       \n"
  89              	"	cmp	$0x05, %ah                   \n"
  90              	"	je	int16_handler_asm_ah05       \n"
  91              	"	cmp	$0x12, %ah                   \n"
  92              	"	je	int16_handler_asm_ah12       \n"
  93              	"                                    \n"
  94              	"	call int16_default_handler       \n"
  95              	"                                    \n"
  96              	"   mov %cs:int16_reg_sp, %sp        \n"
  97              	"   mov %cs:int16_reg_ss, %ss        \n"
  98              	"                                    \n"
  99              	POPA /*"	popa                             \n"*/
 100              	"	pop %es                          \n"
 101              	"	pop %ds                          \n"
 102              	"	iret                             \n");
 103              	
 104              	#define HEAD_OF_ASM_HANDLER(func)  \
 105              	"	call " func "                    \n" \
 106              	"                                    \n" \
 107              	"   mov %cs:int16_reg_sp, %sp        \n" \
 108              	"   mov %cs:int16_reg_ss, %ss        \n" \
 109              	"                                    \n" \
 110              	POPA /*"	popa                             \n"*/ \
 111              	"	pop %es                          \n" \
 112              	"	pop %ds                          \n" 
 113              	
 114              	#define IRET_SAVE_ZEROFLAG  \
 115              	"   push %ax                         \n" \
 116              	"   push %bp                         \n" \
 117              	"   mov  %sp, %bp                    \n" \
 118              	"   movw 8(%bp), %ax                 \n" \
 119              	"                                    \n" \
 120              	"   jz 1f                            \n" \
 121              	"                                    \n" \
 122              	"   andw $0xffbf, %ax                \n" /* clear the zero flag */ \
 123              	"   movw %ax, 8(%bp)                 \n" \
 124              	"   pop  %bp                         \n" \
 125              	"   pop  %ax                         \n" \
 126              	"   iret                             \n" \
 127              	"                                    \n" \
 128              	"1:                                  \n" \
 129              	"   orw  $0x0040, %ax                \n" /* set the zero flag */ \
 130              	"   movw %ax, 8(%bp)                 \n" \
 131              	"   pop  %bp                         \n" \
 132              	"   pop  %ax                         \n" \
 133              	"   iret                             \n"
 134              	
 135              	
 136              	__asm__ (
 137              	"int16_handler_asm_ah00:             \n"
 138              	HEAD_OF_ASM_HANDLER("int16_handler_ah00")
 139              	"	mov	%cs:int16_reg_ax, %ax        \n"
 140              	"   iret                             \n");
 141              	
 142              	__asm__ (
 143              	"int16_handler_asm_ah10:             \n"
 144              	HEAD_OF_ASM_HANDLER("int16_handler_ah10")
 145              	"	mov	%cs:int16_reg_ax, %ax        \n"
 146              	"   iret                             \n");
 147              	
 148              	__asm__ (
 149              	"int16_handler_asm_ah01:             \n"
 150              	HEAD_OF_ASM_HANDLER("int16_handler_ah01")
 151              	"	mov	 %cs:int16_reg_ax, %ax        \n"
 152              	"	cmpw $1, %cs:int16_zf             \n"
 153              	IRET_SAVE_ZEROFLAG);
 154              	
 155              	__asm__ (
 156              	"int16_handler_asm_ah11:             \n"
 157              	HEAD_OF_ASM_HANDLER("int16_handler_ah11")
 158              	"	mov	 %cs:int16_reg_ax, %ax        \n"
 159              	"	cmpw $1, %cs:int16_zf             \n"
 160              	IRET_SAVE_ZEROFLAG);
 161              	
 162              	__asm__ (
 163              	"int16_handler_asm_ah02:             \n"
 164              	HEAD_OF_ASM_HANDLER("int16_handler_ah02")
 165              	"	movb %cs:int16_reg_ax, %al       \n"
 166              	"   iret                             \n");
 167              	
 168              	__asm__ (
 169              	"int16_handler_asm_ah05:             \n"
 170              	HEAD_OF_ASM_HANDLER("int16_handler_ah05")
 171              	"	movb %cs:int16_reg_ax, %al       \n"
 172              	"   iret                             \n");
 173              	
 174              	__asm__ (
 175              	"int16_handler_asm_ah12:             \n"
 176              	HEAD_OF_ASM_HANDLER("int16_handler_ah12")
 177              	"	mov	 %cs:int16_reg_ax, %ax        \n"
 178              	"   iret                             \n");
 179              	
 180              	unsigned int getKeyCodeNonBlocking(void);
 181              	
 182              	void int16_default_handler(void){
 183              		char buf[128];
 184              		unsigned int reg_ss;
 185              	
 186 01a5 8CD0     	    asm volatile("mov  %%ss, %w0" : "=a"(reg_ss) : );
 187              	
 263              		mov  %ss, %ax
 264              	;# 0 "" 2
 265              	#NO_APP
 266 01a7 8EC0     		movw	%ax,	%es
 267 01a9 50       		pushw	%ax
 268 01aa E8FEFF   		call	emuLogMessage
 269 01ad FF360000 		pushw	int16_reg_es
 270 01b1 FF360000 		pushw	int16_reg_dx
 271 01b5 FF360000 		pushw	int16_reg_cx
 272 01b9 FF360000 		pushw	int16_reg_bx
 273 01bd FF360000 		pushw	int16_reg_ax
 274 01c1 B80A00   		movw	$.LC1,	%ax
 275 01c4 50       		pushw	%ax
 276 01c5 57       		pushw	%di
 277 01c6 56       		pushw	%si
 278 01c7 E8FEFF   		call	s_snprintf
 279 01ca 56       		pushw	%si
 280 01cb 06       		pushw	%es
 281 01cc E8FEFF   		call	emuLogMessage
 282 01cf 89EC     		movw	%bp,	%sp
 283 01d1 5D       		popw	%bp
 284 01d2 07       		popw	%es
 285 01d3 5F       		popw	%di
 286 01d4 5E       		popw	%si
 287 01d5 C3       		ret
 289              		.global	int16_handler_ah02
 291              	int16_handler_ah02:
 292 01d6 C7060000 		movw	$0,	int16_reg_ax
 292      0000
 293 01dc C3       		ret
 295              		.global	int16_handler_ah12
 297              	int16_handler_ah12:
 298 01dd C7060000 		movw	$0,	int16_reg_ax
 298      0000
 299 01e3 C3       		ret
 301              		.global	insertKeyBuf
 303              	insertKeyBuf:
 304 01e4 56       		pushw	%si
 305 01e5 57       		pushw	%di
 306 01e6 06       		pushw	%es
 307 01e7 55       		pushw	%bp
 308 01e8 89E5     		movw	%sp,	%bp
 309 01ea 83EC02   		subw	$2,	%sp
 310 01ed 36C43E00 		lesw	%ss:pKeyBufHead,	%di
 310      00
 311 01f2 8C46FE   		movw	%es,	-2(%bp)
 312 01f5 36C53600 		ldsw	%ss:pKeyBufTail,	%si
 312      00
 313 01fa 8B14     		movw	(%si),	%dx
 314 01fc 89D0     		movw	%dx,	%ax
 315 01fe 83C0E2   		addw	$-30,	%ax
 316 0201 83F80F   		cmpw	$15,	%ax
 317 0204 7733     		ja	.L6
 318 0206 268B0D   		movw	%es:(%di),	%cx
 319 0209 D1E0     		shlw	$1,	%ax
 320 020b 36030600 		addw	%ss:pKeyBuf,	%ax
 320      00
 321 0210 89C3     		movw	%ax,	%bx
 322 0212 368E0602 		movw	%ss:pKeyBuf+2,	%es
 322      00
 323 0217 8B460A   		movw	10(%bp),	%ax
 324 021a 268907   		movw	%ax,	%es:(%bx)
 325 021d 89D0     		movw	%dx,	%ax
 326 021f 40       		incw	%ax
 327 0220 83FA2D   		cmpw	$45,	%dx
 328 0223 7503     		jne	.L8
 329 0225 B81E00   		movw	$30,	%ax
 330              	.L8:
 331 0228 8E46FE   		movw	-2(%bp),	%es
 332 022b 26890D   		movw	%cx,	%es:(%di)
 333 022e 8904     		movw	%ax,	(%si)
 334 0230 89EC     		movw	%bp,	%sp
 335 0232 5D       		popw	%bp
 336 0233 07       		popw	%es
 337 0234 5F       		popw	%di
 338 0235 5E       		popw	%si
 339 0236 16       		pushw	%ss
 340 0237 1F       		popw	%ds
 341 0238 C3       		ret
 342              	.L6:
 343 0239 36C41E00 		lesw	%ss:pKeyBuf,	%bx
 343      00
 344 023e 8B460A   		movw	10(%bp),	%ax
 345 0241 268907   		movw	%ax,	%es:(%bx)
 346 0244 B81F00   		movw	$31,	%ax
 347 0247 B91E00   		movw	$30,	%cx
 348 024a 8E46FE   		movw	-2(%bp),	%es
 349 024d 26890D   		movw	%cx,	%es:(%di)
 350 0250 8904     		movw	%ax,	(%si)
 351 0252 89EC     		movw	%bp,	%sp
 352 0254 5D       		popw	%bp
 353 0255 07       		popw	%es
 354 0256 5F       		popw	%di
 355 0257 5E       		popw	%si
 356 0258 16       		pushw	%ss
 357 0259 1F       		popw	%ds
 358 025a C3       		ret
 360              		.global	int16_handler_ah05
 362              	int16_handler_ah05:
 363 025b 36C51E00 		ldsw	%ss:pKeyBufHead,	%bx
 363      00
 364 0260 8B17     		movw	(%bx),	%dx
 365 0262 36C51E00 		ldsw	%ss:pKeyBufTail,	%bx
 365      00
 366 0267 8B07     		movw	(%bx),	%ax
 367 0269 83C0E2   		addw	$-30,	%ax
 368 026c 89D1     		movw	%dx,	%cx
 369 026e 83C1E1   		addw	$-31,	%cx
 370 0271 39C8     		cmpw	%cx,	%ax
 371 0273 741B     		je	.L14
 372 0275 83C2F1   		addw	$-15,	%dx
 373 0278 39D0     		cmpw	%dx,	%ax
 374 027a 7414     		je	.L14
 375 027c 36FF3600 		pushw	%ss:int16_reg_cx
 375      00
 376 0281 16       		pushw	%ss
 377 0282 1F       		popw	%ds
 378 0283 E8FEFF   		call	insertKeyBuf
 379 0286 C7060000 		movw	$0,	int16_reg_ax
 379      0000
 380 028c 83C402   		addw	$2,	%sp
 381 028f C3       		ret
 382              	.L14:
 383 0290 36C70600 		movw	$1,	%ss:int16_reg_ax
 383      000100
 384 0297 16       		pushw	%ss
 385 0298 1F       		popw	%ds
 386 0299 C3       		ret
 388              		.global	isKeyBufFull
 390              	isKeyBufFull:
 391 029a 36C51E00 		ldsw	%ss:pKeyBufHead,	%bx
 391      00
 392 029f 8B17     		movw	(%bx),	%dx
 393 02a1 36C51E00 		ldsw	%ss:pKeyBufTail,	%bx
 393      00
 394 02a6 8B07     		movw	(%bx),	%ax
 395 02a8 83C0E2   		addw	$-30,	%ax
 396 02ab 89D1     		movw	%dx,	%cx
 397 02ad 83C1E1   		addw	$-31,	%cx
 398 02b0 39C8     		cmpw	%cx,	%ax
 399 02b2 7412     		je	.L22
 400 02b4 83C2F1   		addw	$-15,	%dx
 401 02b7 39C2     		cmpw	%ax,	%dx
 402 02b9 9F       		lahf
 403 02ba D0E4     		shlb	%ah
 404 02bc 99       		cwtd
 405 02bd 88D0     		movb	%dl,	%al
 406 02bf F6D8     		negb	%al
 407 02c1 30E4     		xorb	%ah,	%ah
 408 02c3 16       		pushw	%ss
 409 02c4 1F       		popw	%ds
 410 02c5 C3       		ret
 411              	.L22:
 412 02c6 B001     		movb	$1,	%al
 413 02c8 30E4     		xorb	%ah,	%ah
 414 02ca 16       		pushw	%ss
 415 02cb 1F       		popw	%ds
 416 02cc C3       		ret
 418              		.global	isKeyBufEmpty
 420              	isKeyBufEmpty:
 421 02cd 56       		pushw	%si
 422 02ce 36C51E00 		ldsw	%ss:pKeyBufHead,	%bx
 422      00
 423 02d3 8B0F     		movw	(%bx),	%cx
 424 02d5 89C8     		movw	%cx,	%ax
 425 02d7 83C0E2   		addw	$-30,	%ax
 426 02da 36C51E00 		ldsw	%ss:pKeyBufTail,	%bx
 426      00
 427 02df 8B37     		movw	(%bx),	%si
 428 02e1 83C6E2   		addw	$-30,	%si
 429 02e4 39F0     		cmpw	%si,	%ax
 430 02e6 7431     		je	.L28
 431 02e8 D1E0     		shlw	$1,	%ax
 432 02ea 36030600 		addw	%ss:pKeyBuf,	%ax
 432      00
 433 02ef 89C3     		movw	%ax,	%bx
 434 02f1 31C0     		xorw	%ax,	%ax
 435 02f3 368E1E02 		movw	%ss:pKeyBuf+2,	%ds
 435      00
 436 02f8 803F1B   		cmpb	$27,	(%bx)
 437 02fb 7404     		je	.L33
 438 02fd 5E       		popw	%si
 439 02fe 16       		pushw	%ss
 440 02ff 1F       		popw	%ds
 441 0300 C3       		ret
 442              	.L33:
 443 0301 83C1E3   		addw	$-29,	%cx
 444 0304 83F90F   		cmpw	$15,	%cx
 445 0307 7602     		jbe	.L27
 446 0309 89C1     		movw	%ax,	%cx
 447              	.L27:
 448 030b 39F1     		cmpw	%si,	%cx
 449 030d 9F       		lahf
 450 030e D0E4     		shlb	%ah
 451 0310 99       		cwtd
 452 0311 89D0     		movw	%dx,	%ax
 453 0313 F7D8     		negw	%ax
 454 0315 5E       		popw	%si
 455 0316 16       		pushw	%ss
 456 0317 1F       		popw	%ds
 457 0318 C3       		ret
 458              	.L28:
 459 0319 B80100   		movw	$1,	%ax
 460 031c 5E       		popw	%si
 461 031d 16       		pushw	%ss
 462 031e 1F       		popw	%ds
 463 031f C3       		ret
 465              		.global	getKeyBufItem
 467              	getKeyBufItem:
 468 0320 56       		pushw	%si
 469 0321 57       		pushw	%di
 470 0322 06       		pushw	%es
 471 0323 55       		pushw	%bp
 472 0324 89E5     		movw	%sp,	%bp
 473 0326 83EC06   		subw	$6,	%sp
 474 0329 8E1E0000 		movw	pKeyBufHead,	%ds
 475 032d 368E0602 		movw	%ss:pKeyBufHead+2,	%es
 475      00
 476 0332 8C46FC   		movw	%es,	-4(%bp)
 477 0335 8CDB     		movw	%ds,	%bx
 478 0337 268B0F   		movw	%es:(%bx),	%cx
 479 033a 89CA     		movw	%cx,	%dx
 480 033c 83C2E2   		addw	$-30,	%dx
 481 033f 36C43E00 		lesw	%ss:pKeyBufTail,	%di
 481      00
 482 0344 8C46FE   		movw	%es,	-2(%bp)
 483 0347 268B05   		movw	%es:(%di),	%ax
 484 034a 8946FA   		movw	%ax,	-6(%bp)
 485 034d 89C8     		movw	%cx,	%ax
 486 034f 83C0E3   		addw	$-29,	%ax
 487 0352 36C43600 		lesw	%ss:pKeyBuf,	%si
 487      00
 488 0357 D1E2     		shlw	$1,	%dx
 489 0359 83F80F   		cmpw	$15,	%ax
 490 035c 7726     		ja	.L35
 491 035e 89D3     		movw	%dx,	%bx
 492 0360 01F3     		addw	%si,	%bx
 493 0362 268B07   		movw	%es:(%bx),	%ax
 494 0365 3C1B     		cmpb	$27,	%al
 495 0367 7469     		je	.L36
 496 0369 41       		incw	%cx
 497 036a 8E46FC   		movw	-4(%bp),	%es
 498 036d 8CDB     		movw	%ds,	%bx
 499 036f 26890F   		movw	%cx,	%es:(%bx)
 500 0372 8E46FE   		movw	-2(%bp),	%es
 501 0375 8B56FA   		movw	-6(%bp),	%dx
 502 0378 268915   		movw	%dx,	%es:(%di)
 503 037b 89EC     		movw	%bp,	%sp
 504 037d 5D       		popw	%bp
 505 037e 07       		popw	%es
 506 037f 5F       		popw	%di
 507 0380 5E       		popw	%si
 508 0381 16       		pushw	%ss
 509 0382 1F       		popw	%ds
 510 0383 C3       		ret
 511              	.L35:
 512 0384 01F2     		addw	%si,	%dx
 513 0386 89D3     		movw	%dx,	%bx
 514 0388 268B07   		movw	%es:(%bx),	%ax
 515 038b 3C1B     		cmpb	$27,	%al
 516 038d 741D     		je	.L40
 517 038f B91E00   		movw	$30,	%cx
 518 0392 8E46FC   		movw	-4(%bp),	%es
 519 0395 8CDB     		movw	%ds,	%bx
 520 0397 26890F   		movw	%cx,	%es:(%bx)
 521 039a 8E46FE   		movw	-2(%bp),	%es
 522 039d 8B56FA   		movw	-6(%bp),	%dx
 523 03a0 268915   		movw	%dx,	%es:(%di)
 524 03a3 89EC     		movw	%bp,	%sp
 525 03a5 5D       		popw	%bp
 526 03a6 07       		popw	%es
 527 03a7 5F       		popw	%di
 528 03a8 5E       		popw	%si
 529 03a9 16       		pushw	%ss
 530 03aa 1F       		popw	%ds
 531 03ab C3       		ret
 532              	.L40:
 533 03ac B91F00   		movw	$31,	%cx
 534 03af 31D2     		xorw	%dx,	%dx
 535 03b1 01F2     		addw	%si,	%dx
 536 03b3 89D3     		movw	%dx,	%bx
 537 03b5 268B07   		movw	%es:(%bx),	%ax
 538              	.L45:
 539 03b8 8E46FC   		movw	-4(%bp),	%es
 540 03bb 8CDB     		movw	%ds,	%bx
 541 03bd 26890F   		movw	%cx,	%es:(%bx)
 542 03c0 8E46FE   		movw	-2(%bp),	%es
 543 03c3 8B56FA   		movw	-6(%bp),	%dx
 544 03c6 268915   		movw	%dx,	%es:(%di)
 545 03c9 89EC     		movw	%bp,	%sp
 546 03cb 5D       		popw	%bp
 547 03cc 07       		popw	%es
 548 03cd 5F       		popw	%di
 549 03ce 5E       		popw	%si
 550 03cf 16       		pushw	%ss
 551 03d0 1F       		popw	%ds
 552 03d1 C3       		ret
 553              	.L36:
 554 03d2 83C202   		addw	$2,	%dx
 555 03d5 83F92C   		cmpw	$44,	%cx
 556 03d8 750C     		jne	.L38
 557 03da B91E00   		movw	$30,	%cx
 558 03dd 01F2     		addw	%si,	%dx
 559 03df 89D3     		movw	%dx,	%bx
 560 03e1 268B07   		movw	%es:(%bx),	%ax
 561 03e4 EBD2     		jmp	.L45
 562              	.L38:
 563 03e6 83C102   		addw	$2,	%cx
 564 03e9 01F2     		addw	%si,	%dx
 565 03eb 89D3     		movw	%dx,	%bx
 566 03ed 268B07   		movw	%es:(%bx),	%ax
 567 03f0 EBC6     		jmp	.L45
 569              		.section	.rodata.str1.1
 570              	.LC2:
 571 0039 20307825 		.string	" 0x%02x"
 571      30327800 
 572              	.LC3:
 573 0041 30782530 		.string	"0x%02x"
 573      327800
 574              		.text
 575              		.global	updateKeyInput
 577              	updateKeyInput:
 578 03f2 56       		pushw	%si
 579 03f3 57       		pushw	%di
 580 03f4 06       		pushw	%es
 581 03f5 55       		pushw	%bp
 582 03f6 89E5     		movw	%sp,	%bp
 583 03f8 83EC30   		subw	$48,	%sp
 584 03fb E8FEFF   		call	systemIsUSARTDataAvailable
 585 03fe 85C0     		testw	%ax,	%ax
 586 0400 7454     		je	.L46
 587 0402 C41E0000 		lesw	pKeyBufHead,	%bx
 588 0406 268B17   		movw	%es:(%bx),	%dx
 589 0409 C41E0000 		lesw	pKeyBufTail,	%bx
 590 040d 268B07   		movw	%es:(%bx),	%ax
 591 0410 83C0E2   		addw	$-30,	%ax
 592 0413 89D1     		movw	%dx,	%cx
 593 0415 83C1E1   		addw	$-31,	%cx
 594 0418 39C1     		cmpw	%ax,	%cx
 595 041a 743A     		je	.L46
 596 041c 83C2F1   		addw	$-15,	%dx
 597 041f 39C2     		cmpw	%ax,	%dx
 598 0421 7433     		je	.L46
 599 0423 E8FEFF   		call	systemSerialGetc
 600 0426 8846D2   		movb	%al,	-46(%bp)
 601 0429 3C1B     		cmpb	$27,	%al
 602 042b 7430     		je	.L132
 603              	.L98:
 604 042d 8A46D2   		movb	-46(%bp),	%al
 605 0430 30E4     		xorb	%ah,	%ah
 606 0432 89C6     		movw	%ax,	%si
 607 0434 50       		pushw	%ax
 608 0435 B84100   		movw	$.LC3,	%ax
 609 0438 50       		pushw	%ax
 610 0439 8D46E0   		leaw	-32(%bp),	%ax
 611 043c 50       		pushw	%ax
 612 043d E8FEFF   		call	s_sprintf
 613 0440 83C406   		addw	$6,	%sp
 614 0443 807ED27F 		cmpb	$127,	-46(%bp)
 615 0447 7403E9A4 		jne	.L99
 615      00
 616 044c B80053   		movw	$21248,	%ax
 617 044f 50       		pushw	%ax
 618 0450 E8FEFF   		call	insertKeyBuf
 619 0453 83C402   		addw	$2,	%sp
 620              	.L46:
 621 0456 89EC     		movw	%bp,	%sp
 622 0458 5D       		popw	%bp
 623 0459 07       		popw	%es
 624 045a 5F       		popw	%di
 625 045b 5E       		popw	%si
 626 045c C3       		ret
 627              	.L132:
 628 045d C746D400 		movw	$0,	-44(%bp)
 628      00
 629 0462 8B46D4   		movw	-44(%bp),	%ax
 630 0465 83F863   		cmpw	$99,	%ax
 631 0468 7F12     		jg	.L52
 632              	.L110:
 633 046a E8FEFF   		call	systemIsUSARTDataAvailable
 634 046d 85C0     		testw	%ax,	%ax
 635 046f 750B     		jne	.L52
 636 0471 FF46D4   		incw	-44(%bp)
 637 0474 8B46D4   		movw	-44(%bp),	%ax
 638 0477 83F863   		cmpw	$99,	%ax
 639 047a 7EEE     		jle	.L110
 640              	.L52:
 641 047c 8B46D4   		movw	-44(%bp),	%ax
 642 047f 83F864   		cmpw	$100,	%ax
 643 0482 745A     		je	.L133
 644 0484 B01B     		movb	$27,	%al
 645 0486 50       		pushw	%ax
 646 0487 E8FEFF   		call	systemSerialPutc
 647 048a E8FEFF   		call	systemSerialGetc
 648 048d 83C402   		addw	$2,	%sp
 649 0490 3C5B     		cmpb	$91,	%al
 650 0492 7503E9F2 		je	.L134
 650      00
 651 0497 8846D6   		movb	%al,	-42(%bp)
 652 049a BE0100   		movw	$1,	%si
 653 049d 31C0     		xorw	%ax,	%ax
 654 049f 8EC0     		movw	%ax,	%es
 655 04a1 8C46D4   		movw	%es,	-44(%bp)
 656 04a4 8B46D4   		movw	-44(%bp),	%ax
 657 04a7 83F863   		cmpw	$99,	%ax
 658 04aa 7F12     		jg	.L91
 659              	.L109:
 660 04ac E8FEFF   		call	systemIsUSARTDataAvailable
 661 04af 85C0     		testw	%ax,	%ax
 662 04b1 750B     		jne	.L91
 663 04b3 FF46D4   		incw	-44(%bp)
 664 04b6 8B46D4   		movw	-44(%bp),	%ax
 665 04b9 83F863   		cmpw	$99,	%ax
 666 04bc 7EEE     		jle	.L109
 667              	.L91:
 668 04be 8B46D4   		movw	-44(%bp),	%ax
 669 04c1 83F864   		cmpw	$100,	%ax
 670 04c4 7447     		je	.L135
 671 04c6 E8FEFF   		call	systemSerialGetc
 672 04c9 89EF     		movw	%bp,	%di
 673 04cb 89F3     		movw	%si,	%bx
 674 04cd 8841D6   		movb	%al,	-42(%bx,%di)
 675 04d0 46       		incw	%si
 676 04d1 8C46D4   		movw	%es,	-44(%bp)
 677 04d4 8B46D4   		movw	-44(%bp),	%ax
 678 04d7 83F863   		cmpw	$99,	%ax
 679 04da 7ED0     		jle	.L109
 680 04dc EBE0     		jmp	.L91
 681              	.L133:
 682 04de BE1B00   		movw	$27,	%si
 683 04e1 56       		pushw	%si
 684 04e2 BA4100   		movw	$.LC3,	%dx
 685 04e5 52       		pushw	%dx
 686 04e6 8D56E0   		leaw	-32(%bp),	%dx
 687 04e9 52       		pushw	%dx
 688 04ea E8FEFF   		call	s_sprintf
 689 04ed 83C406   		addw	$6,	%sp
 690              	.L99:
 691 04f0 8A46D2   		movb	-46(%bp),	%al
 692 04f3 247F     		andb	$127,	%al
 693 04f5 BB0000   		movw	$convert_table,	%bx
 694 04f8 D7       		xlat	(%bx)
 695 04f9 B108     		movb	$8,	%cl
 696 04fb D3E0     		shlw	%cl,	%ax
 697 04fd 01F0     		addw	%si,	%ax
 698 04ff 50       		pushw	%ax
 699 0500 E8FEFF   		call	insertKeyBuf
 700 0503 83C402   		addw	$2,	%sp
 701 0506 89EC     		movw	%bp,	%sp
 702 0508 5D       		popw	%bp
 703 0509 07       		popw	%es
 704 050a 5F       		popw	%di
 705 050b 5E       		popw	%si
 706 050c C3       		ret
 707              	.L135:
 708 050d B05B     		movb	$91,	%al
 709 050f 50       		pushw	%ax
 710 0510 E8FEFF   		call	systemSerialPutc
 711 0513 B031     		movb	$49,	%al
 712 0515 50       		pushw	%ax
 713 0516 E8FEFF   		call	systemSerialPutc
 714 0519 B07E     		movb	$126,	%al
 715 051b 50       		pushw	%ax
 716 051c E8FEFF   		call	systemSerialPutc
 717 051f 83C406   		addw	$6,	%sp
 718 0522 8A46D6   		movb	-42(%bp),	%al
 719 0525 83FE02   		cmpw	$2,	%si
 720 0528 742A     		je	.L136
 721              	.L94:
 722 052a 8D7ED6   		leaw	-42(%bp),	%di
 723 052d 01FE     		addw	%di,	%si
 724 052f 8976D2   		movw	%si,	-46(%bp)
 725 0532 BE3900   		movw	$.LC2,	%si
 726 0535 89EA     		movw	%bp,	%dx
 727 0537 83C2E0   		addw	$-32,	%dx
 728 053a 8EC2     		movw	%dx,	%es
 729              	.L97:
 730 053c 30E4     		xorb	%ah,	%ah
 731 053e 50       		pushw	%ax
 732 053f 56       		pushw	%si
 733 0540 06       		pushw	%es
 734 0541 E8FEFF   		call	s_sprintf
 735 0544 47       		incw	%di
 736 0545 83C406   		addw	$6,	%sp
 737 0548 397ED2   		cmpw	%di,	-46(%bp)
 738 054b 7503E906 		je	.L46
 738      FF
 739 0550 8A05     		movb	(%di),	%al
 740 0552 EBE8     		jmp	.L97
 741              	.L136:
 742 0554 3C4F     		cmpb	$79,	%al
 743 0556 75D2     		jne	.L94
 744 0558 8A66D7   		movb	-41(%bp),	%ah
 745 055b 80FC50   		cmpb	$80,	%ah
 746 055e 7503E9F3 		je	.L46
 746      FE
 747 0563 80FC51   		cmpb	$81,	%ah
 748 0566 7503E99C 		je	.L137
 748      01
 749 056b 80FC52   		cmpb	$82,	%ah
 750 056e 7503E983 		je	.L138
 750      01
 751 0573 80FC53   		cmpb	$83,	%ah
 752 0576 75B2     		jne	.L94
 753 0578 B82D4A   		movw	$18989,	%ax
 754 057b 50       		pushw	%ax
 755 057c E8FEFF   		call	insertKeyBuf
 756 057f 83C402   		addw	$2,	%sp
 757 0582 89EC     		movw	%bp,	%sp
 758 0584 5D       		popw	%bp
 759 0585 07       		popw	%es
 760 0586 5F       		popw	%di
 761 0587 5E       		popw	%si
 762 0588 C3       		ret
 763              	.L134:
 764 0589 50       		pushw	%ax
 765 058a E8FEFF   		call	systemSerialPutc
 766 058d 83C402   		addw	$2,	%sp
 767 0590 31C0     		xorw	%ax,	%ax
 768 0592 8946D2   		movw	%ax,	-46(%bp)
 769 0595 89C7     		movw	%ax,	%di
 770 0597 897ED4   		movw	%di,	-44(%bp)
 771 059a 8B46D4   		movw	-44(%bp),	%ax
 772 059d 83F863   		cmpw	$99,	%ax
 773 05a0 7F12     		jg	.L57
 774              	.L108:
 775 05a2 E8FEFF   		call	systemIsUSARTDataAvailable
 776 05a5 85C0     		testw	%ax,	%ax
 777 05a7 750B     		jne	.L57
 778 05a9 FF46D4   		incw	-44(%bp)
 779 05ac 8B46D4   		movw	-44(%bp),	%ax
 780 05af 83F863   		cmpw	$99,	%ax
 781 05b2 7EEE     		jle	.L108
 782              	.L57:
 783 05b4 8B46D4   		movw	-44(%bp),	%ax
 784 05b7 83F864   		cmpw	$100,	%ax
 785 05ba 741C     		je	.L139
 786 05bc E8FEFF   		call	systemSerialGetc
 787 05bf 89EE     		movw	%bp,	%si
 788 05c1 8B5ED2   		movw	-46(%bp),	%bx
 789 05c4 8840D6   		movb	%al,	-42(%bx,%si)
 790 05c7 43       		incw	%bx
 791 05c8 895ED2   		movw	%bx,	-46(%bp)
 792 05cb 897ED4   		movw	%di,	-44(%bp)
 793 05ce 8B46D4   		movw	-44(%bp),	%ax
 794 05d1 83F863   		cmpw	$99,	%ax
 795 05d4 7ECC     		jle	.L108
 796 05d6 EBDC     		jmp	.L57
 797              	.L139:
 798 05d8 B031     		movb	$49,	%al
 799 05da 50       		pushw	%ax
 800 05db E8FEFF   		call	systemSerialPutc
 801 05de B07E     		movb	$126,	%al
 802 05e0 50       		pushw	%ax
 803 05e1 E8FEFF   		call	systemSerialPutc
 804 05e4 83C404   		addw	$4,	%sp
 805 05e7 837ED201 		cmpw	$1,	-46(%bp)
 806 05eb 744A     		je	.L140
 807 05ed 837ED202 		cmpw	$2,	-46(%bp)
 808 05f1 7503E9C0 		je	.L141
 808      00
 809 05f6 837ED203 		cmpw	$3,	-46(%bp)
 810 05fa 7472     		je	.L142
 811 05fc 837ED200 		cmpw	$0,	-46(%bp)
 812 0600 7503E951 		je	.L46
 812      FE
 813              	.L69:
 814 0605 8A46D6   		movb	-42(%bp),	%al
 815              	.L66:
 816 0608 31D2     		xorw	%dx,	%dx
 817 060a BE3900   		movw	$.LC2,	%si
 818 060d 89E9     		movw	%bp,	%cx
 819 060f 83C1E0   		addw	$-32,	%cx
 820 0612 8EC1     		movw	%cx,	%es
 821              	.L70:
 822 0614 8956D0   		movw	%dx,	-48(%bp)
 823 0617 30E4     		xorb	%ah,	%ah
 824 0619 50       		pushw	%ax
 825 061a 56       		pushw	%si
 826 061b 06       		pushw	%es
 827 061c E8FEFF   		call	s_sprintf
 828 061f 8B56D0   		movw	-48(%bp),	%dx
 829 0622 42       		incw	%dx
 830 0623 83C406   		addw	$6,	%sp
 831 0626 3956D2   		cmpw	%dx,	-46(%bp)
 832 0629 7F03E928 		jle	.L46
 832      FE
 833 062e 89EF     		movw	%bp,	%di
 834 0630 89D3     		movw	%dx,	%bx
 835 0632 8A41D6   		movb	-42(%bx,%di),	%al
 836 0635 EBDD     		jmp	.L70
 837              	.L140:
 838 0637 8A46D6   		movb	-42(%bp),	%al
 839 063a 3C41     		cmpb	$65,	%al
 840 063c 7503E9D7 		je	.L143
 840      00
 841 0641 3C42     		cmpb	$66,	%al
 842 0643 7503E9E1 		je	.L144
 842      00
 843 0648 3C43     		cmpb	$67,	%al
 844 064a 7503E9FC 		je	.L145
 844      00
 845 064f 3C44     		cmpb	$68,	%al
 846 0651 7503E9E4 		je	.L146
 846      00
 847 0656 30E4     		xorb	%ah,	%ah
 848 0658 50       		pushw	%ax
 849 0659 B83900   		movw	$.LC2,	%ax
 850 065c 50       		pushw	%ax
 851 065d 8D46E0   		leaw	-32(%bp),	%ax
 852 0660 50       		pushw	%ax
 853 0661 E8FEFF   		call	s_sprintf
 854 0664 83C406   		addw	$6,	%sp
 855 0667 89EC     		movw	%bp,	%sp
 856 0669 5D       		popw	%bp
 857 066a 07       		popw	%es
 858 066b 5F       		popw	%di
 859 066c 5E       		popw	%si
 860 066d C3       		ret
 861              	.L142:
 862 066e 807ED87E 		cmpb	$126,	-40(%bp)
 863 0672 7591     		jne	.L69
 864 0674 8A46D6   		movb	-42(%bp),	%al
 865 0677 3C31     		cmpb	$49,	%al
 866 0679 7503E911 		je	.L147
 866      01
 867 067e 3C32     		cmpb	$50,	%al
 868 0680 7586     		jne	.L66
 869 0682 8A66D7   		movb	-41(%bp),	%ah
 870 0685 80FC30   		cmpb	$48,	%ah
 871 0688 7503E9F1 		je	.L148
 871      00
 872 068d 80FC31   		cmpb	$49,	%ah
 873 0690 7503E9D8 		je	.L149
 873      00
 874 0695 80FC33   		cmpb	$51,	%ah
 875 0698 7503E9BF 		je	.L150
 875      00
 876 069d 80FC34   		cmpb	$52,	%ah
 877 06a0 7403E963 		jne	.L66
 877      FF
 878 06a5 B80086   		movw	$-31232,	%ax
 879 06a8 50       		pushw	%ax
 880 06a9 E8FEFF   		call	insertKeyBuf
 881 06ac 83C402   		addw	$2,	%sp
 882 06af 89EC     		movw	%bp,	%sp
 883 06b1 5D       		popw	%bp
 884 06b2 07       		popw	%es
 885 06b3 5F       		popw	%di
 886 06b4 5E       		popw	%si
 887 06b5 C3       		ret
 888              	.L141:
 889 06b6 807ED77E 		cmpb	$126,	-41(%bp)
 890 06ba 7403E946 		jne	.L69
 890      FF
 891 06bf 8A46D6   		movb	-42(%bp),	%al
 892 06c2 3C31     		cmpb	$49,	%al
 893 06c4 7503E936 		je	.L151
 893      01
 894 06c9 3C32     		cmpb	$50,	%al
 895 06cb 7503E91E 		je	.L152
 895      01
 896 06d0 3C34     		cmpb	$52,	%al
 897 06d2 7503E939 		je	.L153
 897      01
 898 06d7 3C35     		cmpb	$53,	%al
 899 06d9 7503E9FF 		je	.L154
 899      00
 900 06de 3C36     		cmpb	$54,	%al
 901 06e0 7403E923 		jne	.L66
 901      FF
 902 06e5 B80051   		movw	$20736,	%ax
 903 06e8 50       		pushw	%ax
 904 06e9 E8FEFF   		call	insertKeyBuf
 905 06ec 83C402   		addw	$2,	%sp
 906 06ef 89EC     		movw	%bp,	%sp
 907 06f1 5D       		popw	%bp
 908 06f2 07       		popw	%es
 909 06f3 5F       		popw	%di
 910 06f4 5E       		popw	%si
 911 06f5 C3       		ret
 912              	.L138:
 913 06f6 B82A37   		movw	$14122,	%ax
 914 06f9 50       		pushw	%ax
 915 06fa E8FEFF   		call	insertKeyBuf
 916 06fd 83C402   		addw	$2,	%sp
 917 0700 89EC     		movw	%bp,	%sp
 918 0702 5D       		popw	%bp
 919 0703 07       		popw	%es
 920 0704 5F       		popw	%di
 921 0705 5E       		popw	%si
 922 0706 C3       		ret
 923              	.L137:
 924 0707 B82F35   		movw	$13615,	%ax
 925 070a 50       		pushw	%ax
 926 070b E8FEFF   		call	insertKeyBuf
 927 070e 83C402   		addw	$2,	%sp
 928 0711 89EC     		movw	%bp,	%sp
 929 0713 5D       		popw	%bp
 930 0714 07       		popw	%es
 931 0715 5F       		popw	%di
 932 0716 5E       		popw	%si
 933 0717 C3       		ret
 934              	.L143:
 935 0718 B80048   		movw	$18432,	%ax
 936 071b 50       		pushw	%ax
 937 071c E8FEFF   		call	insertKeyBuf
 938 071f 83C402   		addw	$2,	%sp
 939 0722 89EC     		movw	%bp,	%sp
 940 0724 5D       		popw	%bp
 941 0725 07       		popw	%es
 942 0726 5F       		popw	%di
 943 0727 5E       		popw	%si
 944 0728 C3       		ret
 945              	.L144:
 946 0729 B80050   		movw	$20480,	%ax
 947 072c 50       		pushw	%ax
 948 072d E8FEFF   		call	insertKeyBuf
 949 0730 83C402   		addw	$2,	%sp
 950 0733 89EC     		movw	%bp,	%sp
 951 0735 5D       		popw	%bp
 952 0736 07       		popw	%es
 953 0737 5F       		popw	%di
 954 0738 5E       		popw	%si
 955 0739 C3       		ret
 956              	.L146:
 957 073a B8004B   		movw	$19200,	%ax
 958 073d 50       		pushw	%ax
 959 073e E8FEFF   		call	insertKeyBuf
 960 0741 83C402   		addw	$2,	%sp
 961 0744 89EC     		movw	%bp,	%sp
 962 0746 5D       		popw	%bp
 963 0747 07       		popw	%es
 964 0748 5F       		popw	%di
 965 0749 5E       		popw	%si
 966 074a C3       		ret
 967              	.L145:
 968 074b B8004D   		movw	$19712,	%ax
 969 074e 50       		pushw	%ax
 970 074f E8FEFF   		call	insertKeyBuf
 971 0752 83C402   		addw	$2,	%sp
 972 0755 89EC     		movw	%bp,	%sp
 973 0757 5D       		popw	%bp
 974 0758 07       		popw	%es
 975 0759 5F       		popw	%di
 976 075a 5E       		popw	%si
 977 075b C3       		ret
 978              	.L150:
 979 075c B80085   		movw	$-31488,	%ax
 980 075f 50       		pushw	%ax
 981 0760 E8FEFF   		call	insertKeyBuf
 982 0763 83C402   		addw	$2,	%sp
 983 0766 89EC     		movw	%bp,	%sp
 984 0768 5D       		popw	%bp
 985 0769 07       		popw	%es
 986 076a 5F       		popw	%di
 987 076b 5E       		popw	%si
 988 076c C3       		ret
 989              	.L149:
 990 076d B80044   		movw	$17408,	%ax
 991 0770 50       		pushw	%ax
 992 0771 E8FEFF   		call	insertKeyBuf
 993 0774 83C402   		addw	$2,	%sp
 994 0777 89EC     		movw	%bp,	%sp
 995 0779 5D       		popw	%bp
 996 077a 07       		popw	%es
 997 077b 5F       		popw	%di
 998 077c 5E       		popw	%si
 999 077d C3       		ret
 1000              	.L148:
 1001 077e B80043   		movw	$17152,	%ax
 1002 0781 50       		pushw	%ax
 1003 0782 E8FEFF   		call	insertKeyBuf
 1004 0785 83C402   		addw	$2,	%sp
 1005 0788 89EC     		movw	%bp,	%sp
 1006 078a 5D       		popw	%bp
 1007 078b 07       		popw	%es
 1008 078c 5F       		popw	%di
 1009 078d 5E       		popw	%si
 1010 078e C3       		ret
 1011              	.L147:
 1012 078f 8A66D7   		movb	-41(%bp),	%ah
 1013 0792 80FC31   		cmpb	$49,	%ah
 1014 0795 7503E9ED 		je	.L155
 1014      00
 1015 079a 80FC32   		cmpb	$50,	%ah
 1016 079d 7503E9D4 		je	.L156
 1016      00
 1017 07a2 80FC33   		cmpb	$51,	%ah
 1018 07a5 7503E9BB 		je	.L157
 1018      00
 1019 07aa 80FC34   		cmpb	$52,	%ah
 1020 07ad 7503E9A2 		je	.L158
 1020      00
 1021 07b2 80FC35   		cmpb	$53,	%ah
 1022 07b5 7503E989 		je	.L159
 1022      00
 1023 07ba 80FC37   		cmpb	$55,	%ah
 1024 07bd 7473     		je	.L160
 1025 07bf 80FC38   		cmpb	$56,	%ah
 1026 07c2 745D     		je	.L161
 1027 07c4 80FC39   		cmpb	$57,	%ah
 1028 07c7 7403E93C 		jne	.L66
 1028      FE
 1029 07cc B80042   		movw	$16896,	%ax
 1030 07cf 50       		pushw	%ax
 1031 07d0 E8FEFF   		call	insertKeyBuf
 1032 07d3 83C402   		addw	$2,	%sp
 1033 07d6 89EC     		movw	%bp,	%sp
 1034 07d8 5D       		popw	%bp
 1035 07d9 07       		popw	%es
 1036 07da 5F       		popw	%di
 1037 07db 5E       		popw	%si
 1038 07dc C3       		ret
 1039              	.L154:
 1040 07dd B80049   		movw	$18688,	%ax
 1041 07e0 50       		pushw	%ax
 1042 07e1 E8FEFF   		call	insertKeyBuf
 1043 07e4 83C402   		addw	$2,	%sp
 1044 07e7 89EC     		movw	%bp,	%sp
 1045 07e9 5D       		popw	%bp
 1046 07ea 07       		popw	%es
 1047 07eb 5F       		popw	%di
 1048 07ec 5E       		popw	%si
 1049 07ed C3       		ret
 1050              	.L152:
 1051 07ee B80052   		movw	$20992,	%ax
 1052 07f1 50       		pushw	%ax
 1053 07f2 E8FEFF   		call	insertKeyBuf
 1054 07f5 83C402   		addw	$2,	%sp
 1055 07f8 89EC     		movw	%bp,	%sp
 1056 07fa 5D       		popw	%bp
 1057 07fb 07       		popw	%es
 1058 07fc 5F       		popw	%di
 1059 07fd 5E       		popw	%si
 1060 07fe C3       		ret
 1061              	.L151:
 1062 07ff B80047   		movw	$18176,	%ax
 1063 0802 50       		pushw	%ax
 1064 0803 E8FEFF   		call	insertKeyBuf
 1065 0806 83C402   		addw	$2,	%sp
 1066 0809 89EC     		movw	%bp,	%sp
 1067 080b 5D       		popw	%bp
 1068 080c 07       		popw	%es
 1069 080d 5F       		popw	%di
 1070 080e 5E       		popw	%si
 1071 080f C3       		ret
 1072              	.L153:
 1073 0810 B8004F   		movw	$20224,	%ax
 1074 0813 50       		pushw	%ax
 1075 0814 E8FEFF   		call	insertKeyBuf
 1076 0817 83C402   		addw	$2,	%sp
 1077 081a 89EC     		movw	%bp,	%sp
 1078 081c 5D       		popw	%bp
 1079 081d 07       		popw	%es
 1080 081e 5F       		popw	%di
 1081 081f 5E       		popw	%si
 1082 0820 C3       		ret
 1083              	.L161:
 1084 0821 B80041   		movw	$16640,	%ax
 1085 0824 50       		pushw	%ax
 1086 0825 E8FEFF   		call	insertKeyBuf
 1087 0828 83C402   		addw	$2,	%sp
 1088 082b 89EC     		movw	%bp,	%sp
 1089 082d 5D       		popw	%bp
 1090 082e 07       		popw	%es
 1091 082f 5F       		popw	%di
 1092 0830 5E       		popw	%si
 1093 0831 C3       		ret
 1094              	.L160:
 1095 0832 B80040   		movw	$16384,	%ax
 1096 0835 50       		pushw	%ax
 1097 0836 E8FEFF   		call	insertKeyBuf
 1098 0839 83C402   		addw	$2,	%sp
 1099 083c 89EC     		movw	%bp,	%sp
 1100 083e 5D       		popw	%bp
 1101 083f 07       		popw	%es
 1102 0840 5F       		popw	%di
 1103 0841 5E       		popw	%si
 1104 0842 C3       		ret
 1105              	.L159:
 1106 0843 B8003F   		movw	$16128,	%ax
 1107 0846 50       		pushw	%ax
 1108 0847 E8FEFF   		call	insertKeyBuf
 1109 084a 83C402   		addw	$2,	%sp
 1110 084d 89EC     		movw	%bp,	%sp
 1111 084f 5D       		popw	%bp
 1112 0850 07       		popw	%es
 1113 0851 5F       		popw	%di
 1114 0852 5E       		popw	%si
 1115 0853 C3       		ret
 1116              	.L158:
 1117 0854 B8003E   		movw	$15872,	%ax
 1118 0857 50       		pushw	%ax
 1119 0858 E8FEFF   		call	insertKeyBuf
 1120 085b 83C402   		addw	$2,	%sp
 1121 085e 89EC     		movw	%bp,	%sp
 1122 0860 5D       		popw	%bp
 1123 0861 07       		popw	%es
 1124 0862 5F       		popw	%di
 1125 0863 5E       		popw	%si
 1126 0864 C3       		ret
 1127              	.L157:
 1128 0865 B8003D   		movw	$15616,	%ax
 1129 0868 50       		pushw	%ax
 1130 0869 E8FEFF   		call	insertKeyBuf
 1131 086c 83C402   		addw	$2,	%sp
 1132 086f 89EC     		movw	%bp,	%sp
 1133 0871 5D       		popw	%bp
 1134 0872 07       		popw	%es
 1135 0873 5F       		popw	%di
 1136 0874 5E       		popw	%si
 1137 0875 C3       		ret
 1138              	.L156:
 1139 0876 B8003C   		movw	$15360,	%ax
 1140 0879 50       		pushw	%ax
 1141 087a E8FEFF   		call	insertKeyBuf
 1142 087d 83C402   		addw	$2,	%sp
 1143 0880 89EC     		movw	%bp,	%sp
 1144 0882 5D       		popw	%bp
 1145 0883 07       		popw	%es
 1146 0884 5F       		popw	%di
 1147 0885 5E       		popw	%si
 1148 0886 C3       		ret
 1149              	.L155:
 1150 0887 B8003B   		movw	$15104,	%ax
 1151 088a 50       		pushw	%ax
 1152 088b E8FEFF   		call	insertKeyBuf
 1153 088e 83C402   		addw	$2,	%sp
 1154 0891 89EC     		movw	%bp,	%sp
 1155 0893 5D       		popw	%bp
 1156 0894 07       		popw	%es
 1157 0895 5F       		popw	%di
 1158 0896 5E       		popw	%si
 1159 0897 C3       		ret
 1161              		.global	getKeyCodeNonBlocking
 1163              	getKeyCodeNonBlocking:
 1164 0898 E8FEFF   		call	updateKeyInput
 1165 089b E8FEFF   		call	isKeyBufEmpty
 1166 089e 85C0     		testw	%ax,	%ax
 1167 08a0 7403     		je	.L166
 1168 08a2 31C0     		xorw	%ax,	%ax
 1169 08a4 C3       		ret
 1170              	.L166:
 1171 08a5 E978FA   		jmp	getKeyBufItem
 1173              		.global	int16_handler_ah10
 1175              	int16_handler_ah10:
 1176 08a8 833E0000 		cmpw	$0,	keybuf_avail
 1176      00
 1177 08ad 751A     		jne	.L175
 1178              	.L171:
 1179 08af E8FEFF   		call	getKeyCodeNonBlocking
 1180 08b2 A30000   		movw	%ax,	keybuf
 1181 08b5 85C0     		testw	%ax,	%ax
 1182 08b7 74F6     		je	.L171
 1183 08b9 C7060000 		movw	$0,	int16_zf
 1183      0000
 1184 08bf A30000   		movw	%ax,	int16_reg_ax
 1185 08c2 C7060000 		movw	$0,	keybuf_avail
 1185      0000
 1186 08c8 C3       		ret
 1187              	.L175:
 1188 08c9 A10000   		movw	keybuf,	%ax
 1189 08cc C7060000 		movw	$0,	int16_zf
 1189      0000
 1190 08d2 A30000   		movw	%ax,	int16_reg_ax
 1191 08d5 C7060000 		movw	$0,	keybuf_avail
 1191      0000
 1192 08db C3       		ret
 1194              		.global	int16_handler_ah00
 1196              	int16_handler_ah00:
 1197 08dc EBCA     		jmp	int16_handler_ah10
 1199              		.global	int16_handler_ah11
 1201              	int16_handler_ah11:
 1202 08de 833E0000 		cmpw	$0,	keybuf_avail
 1202      00
 1203 08e3 740D     		je	.L189
 1204 08e5 A10000   		movw	keybuf,	%ax
 1205 08e8 C7060000 		movw	$0,	int16_zf
 1205      0000
 1206              	.L181:
 1207 08ee A30000   		movw	%ax,	int16_reg_ax
 1208 08f1 C3       		ret
 1209              	.L189:
 1210 08f2 E8FEFF   		call	getKeyCodeNonBlocking
 1211 08f5 85C0     		testw	%ax,	%ax
 1212 08f7 7411     		je	.L179
 1213 08f9 A30000   		movw	%ax,	keybuf
 1214 08fc C7060000 		movw	$1,	keybuf_avail
 1214      0100
 1215 0902 C7060000 		movw	$0,	int16_zf
 1215      0000
 1216 0908 EBE4     		jmp	.L181
 1217              	.L179:
 1218 090a 8B0E0000 		movw	keybuf_avail,	%cx
 1219 090e 83F901   		cmpw	$1,	%cx
 1220 0911 19D2     		sbbw	%dx,	%dx
 1221 0913 F7DA     		negw	%dx
 1222 0915 89160000 		movw	%dx,	int16_zf
 1223 0919 85C9     		testw	%cx,	%cx
 1224 091b 74D1     		je	.L181
 1225 091d A10000   		movw	keybuf,	%ax
 1226 0920 A30000   		movw	%ax,	int16_reg_ax
 1227 0923 C3       		ret
 1229              		.global	int16_handler_ah01
 1231              	int16_handler_ah01:
 1232 0924 EBB8     		jmp	int16_handler_ah11
 1234              		.global	pKeyBuf
 1235              		.data
 1236              		.p2align	1
 1239              	pKeyBuf:
 1240 0000 1E00     		.hword	30
 1241 0002 4000     		.hword	64
 1242              		.global	pKeyBufTail
 1243              		.p2align	1
 1246              	pKeyBufTail:
 1247 0004 1C00     		.hword	28
 1248 0006 4000     		.hword	64
 1249              		.global	pKeyBufHead
 1250              		.p2align	1
 1253              	pKeyBufHead:
 1254 0008 1A00     		.hword	26
 1255 000a 4000     		.hword	64
 1256              		.global	convert_table
 1259              	convert_table:
 1260 000c 00       		.byte	0
 1261 000d 1E       		.byte	30
 1262 000e 30       		.byte	48
 1263 000f 2E       		.byte	46
 1264 0010 20       		.byte	32
 1265 0011 12       		.byte	18
 1266 0012 21       		.byte	33
 1267 0013 22       		.byte	34
 1268 0014 23       		.byte	35
 1269 0015 17       		.byte	23
 1270 0016 24       		.byte	36
 1271 0017 25       		.byte	37
 1272 0018 26       		.byte	38
 1273 0019 32       		.byte	50
 1274 001a 31       		.byte	49
 1275 001b 18       		.byte	24
 1276 001c 19       		.byte	25
 1277 001d 10       		.byte	16
 1278 001e 13       		.byte	19
 1279 001f 1F       		.byte	31
 1280 0020 14       		.byte	20
 1281 0021 16       		.byte	22
 1282 0022 2F       		.byte	47
 1283 0023 11       		.byte	17
 1284 0024 2D       		.byte	45
 1285 0025 15       		.byte	21
 1286 0026 2C       		.byte	44
 1287 0027 00       		.byte	0
 1288 0028 00       		.byte	0
 1289 0029 00       		.byte	0
 1290 002a 00       		.byte	0
 1291 002b 00       		.byte	0
 1292 002c 00       		.byte	0
 1293 002d 02       		.byte	2
 1294 002e 00       		.byte	0
 1295 002f 04       		.byte	4
 1296 0030 05       		.byte	5
 1297 0031 06       		.byte	6
 1298 0032 08       		.byte	8
 1299 0033 00       		.byte	0
 1300 0034 0A       		.byte	10
 1301 0035 0B       		.byte	11
 1302 0036 09       		.byte	9
 1303 0037 00       		.byte	0
 1304 0038 00       		.byte	0
 1305 0039 00       		.byte	0
 1306 003a 53       		.byte	83
 1307 003b 00       		.byte	0
 1308 003c 0B       		.byte	11
 1309 003d 02       		.byte	2
 1310 003e 03       		.byte	3
 1311 003f 04       		.byte	4
 1312 0040 05       		.byte	5
 1313 0041 06       		.byte	6
 1314 0042 07       		.byte	7
 1315 0043 08       		.byte	8
 1316 0044 09       		.byte	9
 1317 0045 0A       		.byte	10
 1318 0046 00       		.byte	0
 1319 0047 00       		.byte	0
 1320 0048 00       		.byte	0
 1321 0049 00       		.byte	0
 1322 004a 00       		.byte	0
 1323 004b 00       		.byte	0
 1324 004c 03       		.byte	3
 1325 004d 1E       		.byte	30
 1326 004e 30       		.byte	48
 1327 004f 2E       		.byte	46
 1328 0050 20       		.byte	32
 1329 0051 12       		.byte	18
 1330 0052 21       		.byte	33
 1331 0053 22       		.byte	34
 1332 0054 23       		.byte	35
 1333 0055 17       		.byte	23
 1334 0056 24       		.byte	36
 1335 0057 25       		.byte	37
 1336 0058 26       		.byte	38
 1337 0059 32       		.byte	50
 1338 005a 31       		.byte	49
 1339 005b 18       		.byte	24
 1340 005c 19       		.byte	25
 1341 005d 10       		.byte	16
 1342 005e 13       		.byte	19
 1343 005f 1F       		.byte	31
 1344 0060 14       		.byte	20
 1345 0061 16       		.byte	22
 1346 0062 2F       		.byte	47
 1347 0063 11       		.byte	17
 1348 0064 2D       		.byte	45
 1349 0065 15       		.byte	21
 1350 0066 2C       		.byte	44
 1351 0067 00       		.byte	0
 1352 0068 00       		.byte	0
 1353 0069 00       		.byte	0
 1354 006a 07       		.byte	7
 1355 006b 00       		.byte	0
 1356 006c 00       		.byte	0
 1357 006d 1E       		.byte	30
 1358 006e 30       		.byte	48
 1359 006f 2E       		.byte	46
 1360 0070 20       		.byte	32
 1361 0071 12       		.byte	18
 1362 0072 21       		.byte	33
 1363 0073 22       		.byte	34
 1364 0074 23       		.byte	35
 1365 0075 17       		.byte	23
 1366 0076 24       		.byte	36
 1367 0077 25       		.byte	37
 1368 0078 26       		.byte	38
 1369 0079 32       		.byte	50
 1370 007a 31       		.byte	49
 1371 007b 18       		.byte	24
 1372 007c 19       		.byte	25
 1373 007d 10       		.byte	16
 1374 007e 13       		.byte	19
 1375 007f 1F       		.byte	31
 1376 0080 14       		.byte	20
 1377 0081 16       		.byte	22
 1378 0082 2F       		.byte	47
 1379 0083 11       		.byte	17
 1380 0084 2D       		.byte	45
 1381 0085 15       		.byte	21
 1382 0086 2C       		.byte	44
 1383 0087 00       		.byte	0
 1384 0088 00       		.byte	0
 1385 0089 00       		.byte	0
 1386 008a 00       		.byte	0
 1387 008b 00       		.byte	0
 1388              		.global	keybuf_avail
 1389              		.bss
 1390              		.p2align	1
 1393              	keybuf_avail:
 1394 0000 0000     		.skip	2,0
 1395              		.comm	keybuf,2,2
 1396              		.comm	int16_reg_ss2,2,2
 1397              		.comm	int16_zf,2,2
 1398              		.comm	int16_reg_ss,2,2
 1399              		.comm	int16_reg_sp,2,2
 1400              		.comm	int16_reg_es,2,2
 1401              		.comm	int16_reg_dx,2,2
 1402              		.comm	int16_reg_cx,2,2
 1403              		.comm	int16_reg_bx,2,2
 1404              		.comm	int16_reg_ax,2,2
 1405              		.ident	"GCC: (GNU) 6.3.0"
   1              		.arch i8086,jumps
   2              		.code16
   3              		.att_syntax prefix
   4              	#NO_APP
   5              	#APP
   6              		   .global int1a_handler_asm        
   7              	int1a_handler_asm:                  
   8 0000 1E       		push %ds                         
   9 0001 06       		push %es                         
  10 0002 2E8C1600 	mov %ss, %cs:int1a_reg_ss2
  10      00
  11 0007 50       	push %ax
  12 0008 51       	push %cx
  13 0009 52       	push %dx
  14 000a 53       	push %bx
  15 000b 2EFF3600 	push %cs:int1a_reg_ss2
  15      00
  16 0010 55       	push %bp
  17 0011 56       	push %si
  18 0012 57       	push %di
  19              	                                    
  20 0013 2EA30000 	   mov %ax, %cs:int1a_reg_ax        
  21 0017 2E891E00 	   mov %bx, %cs:int1a_reg_bx        
  21      00
  22 001c 2E890E00 	   mov %cx, %cs:int1a_reg_cx        
  22      00
  23 0021 2E891600 	   mov %dx, %cs:int1a_reg_dx        
  23      00
  24 0026 2E8C0600 	   mov %es, %cs:int1a_reg_es        
  24      00
  25 002b 2E892600 	   mov %sp, %cs:int1a_reg_sp        
  25      00
  26 0030 2E8C1600 	   mov %ss, %cs:int1a_reg_ss        
  26      00
  27              	                                    
  28 0035 8CC8     		mov	%cs, %ax                     
  29 0037 8ED0     		mov	%ax, %ss                     
  30 0039 8ED8     		mov	%ax, %ds                     
  31 003b BCFFFF   		mov	$0xffff, %sp                 
  32              	                                    
  33 003e A10000   	   mov int1a_reg_ax, %ax            
  34 0041 80FC00   		cmp	$0x00, %ah                   
  35 0044 743A     		je	int1a_handler_asm_ah00       
  36 0046 80FC01   		cmp	$0x01, %ah                   
  37 0049 745B     		je	int1a_handler_asm_ah01       
  38 004b 80FC02   		cmp	$0x02, %ah                   
  39 004e 746E     		je	int1a_handler_asm_ah02       
  40 0050 80FC03   		cmp	$0x03, %ah                   
  41 0053 7503E997 		je	int1a_handler_asm_ah03       
  41      00
  42 0058 80FC04   		cmp	$0x04, %ah                   
  43 005b 7503E9A7 		je	int1a_handler_asm_ah04       
  43      00
  44 0060 80FC05   		cmp	$0x05, %ah                   
  45 0063 7503E9D0 		je	int1a_handler_asm_ah05       
  45      00
  46              	                                    
  47 0068 E8FEFF   		call int1a_default_handler       
  48              	                                    
  49 006b 2E8B2600 	   mov %cs:int1a_reg_sp, %sp        
  49      00
  50 0070 2E8E1600 	   mov %cs:int1a_reg_ss, %ss        
  50      00
  51              	                                    
  52 0075 5F       	pop %di
  53 0076 5E       	pop %si
  54 0077 5D       	pop %bp
  55 0078 5B       	pop %bx
  56 0079 5B       	pop %bx
  57 007a 5A       	pop %dx
  58 007b 59       	pop %cx
  59 007c 58       	pop %ax
  60 007d 07       		pop %es                          
  61 007e 1F       		pop %ds                          
  62 007f CF       		iret                             
  63              	
  64              		int1a_handler_asm_ah00:             
  65 0080 E8FEFF   		call int1a_handler_ah00                    
  66              	                                    
  67 0083 2E8B2600 	   mov %cs:int1a_reg_sp, %sp        
  67      00
  68 0088 2E8E1600 	   mov %cs:int1a_reg_ss, %ss        
  68      00
  69              	                                    
  70 008d 5F       	pop %di
  71 008e 5E       	pop %si
  72 008f 5D       	pop %bp
  73 0090 5B       	pop %bx
  74 0091 5B       	pop %bx
  75 0092 5A       	pop %dx
  76 0093 59       	pop %cx
  77 0094 58       	pop %ax
  78 0095 07       		pop %es                          
  79 0096 1F       		pop %ds                          
  80 0097 2E8B0E00 		mov	    %cs:int1a_reg_cx, %cx    
  80      00
  81 009c 2E8B1600 		mov	    %cs:int1a_reg_dx, %dx    
  81      00
  82 00a1 2EA00000 		movb	%cs:int1a_reg_ax, %al    
  83 00a5 CF       		iret                             
  84              	
  85              		int1a_handler_asm_ah01:             
  86 00a6 E8FEFF   		call int1a_handler_ah01                    
  87              	                                    
  88 00a9 2E8B2600 	   mov %cs:int1a_reg_sp, %sp        
  88      00
  89 00ae 2E8E1600 	   mov %cs:int1a_reg_ss, %ss        
  89      00
  90              	                                    
  91 00b3 5F       	pop %di
  92 00b4 5E       	pop %si
  93 00b5 5D       	pop %bp
  94 00b6 5B       	pop %bx
  95 00b7 5B       	pop %bx
  96 00b8 5A       	pop %dx
  97 00b9 59       	pop %cx
  98 00ba 58       	pop %ax
  99 00bb 07       		pop %es                          
 100 00bc 1F       		pop %ds                          
 101 00bd CF       		iret                             
 102              	
 103              		int1a_handler_asm_ah02:             
 104 00be E8FEFF   		call int1a_handler_ah02                    
 105              	                                    
 106 00c1 2E8B2600 	   mov %cs:int1a_reg_sp, %sp        
 106      00
 107 00c6 2E8E1600 	   mov %cs:int1a_reg_ss, %ss        
 107      00
 108              	                                    
 109 00cb 5F       	pop %di
 110 00cc 5E       	pop %si
 111 00cd 5D       	pop %bp
 112 00ce 5B       	pop %bx
 113 00cf 5B       	pop %bx
 114 00d0 5A       	pop %dx
 115 00d1 59       	pop %cx
 116 00d2 58       	pop %ax
 117 00d3 07       		pop %es                          
 118 00d4 1F       		pop %ds                          
 119 00d5 2E8B0E00 		mov	    %cs:int1a_reg_cx, %cx    
 119      00
 120 00da 2E8B1600 		mov	    %cs:int1a_reg_dx, %dx    
 120      00
 121 00df 50       	   push %ax                         
 122 00e0 55       	   push %bp                         
 123 00e1 89E5     	   mov  %sp, %bp                    
 124 00e3 8B4608   	   movw 8(%bp), %ax                 
 125 00e6 83E0FE   	   andw $0xfffe, %ax                
 126 00e9 894608   	   movw %ax, 8(%bp)                 
 127 00ec 5D       	   pop  %bp                         
 128 00ed 58       	   pop  %ax                         
 129 00ee CF       	   iret                             
 130              	
 131              		int1a_handler_asm_ah03:             
 132 00ef E8FEFF   		call int1a_handler_ah03                    
 133              	                                    
 134 00f2 2E8B2600 	   mov %cs:int1a_reg_sp, %sp        
 134      00
 135 00f7 2E8E1600 	   mov %cs:int1a_reg_ss, %ss        
 135      00
 136              	                                    
 137 00fc 5F       	pop %di
 138 00fd 5E       	pop %si
 139 00fe 5D       	pop %bp
 140 00ff 5B       	pop %bx
 141 0100 5B       	pop %bx
 142 0101 5A       	pop %dx
 143 0102 59       	pop %cx
 144 0103 58       	pop %ax
 145 0104 07       		pop %es                          
 146 0105 1F       		pop %ds                          
 147 0106 CF       		iret                             
 148              	
 149              		int1a_handler_asm_ah04:             
 150 0107 E8FEFF   		call int1a_handler_ah04                    
 151              	                                    
 152 010a 2E8B2600 	   mov %cs:int1a_reg_sp, %sp        
 152      00
 153 010f 2E8E1600 	   mov %cs:int1a_reg_ss, %ss        
 153      00
 154              	                                    
 155 0114 5F       	pop %di
 156 0115 5E       	pop %si
 157 0116 5D       	pop %bp
 158 0117 5B       	pop %bx
 159 0118 5B       	pop %bx
 160 0119 5A       	pop %dx
 161 011a 59       	pop %cx
 162 011b 58       	pop %ax
 163 011c 07       		pop %es                          
 164 011d 1F       		pop %ds                          
 165 011e 2E8B0E00 		mov	    %cs:int1a_reg_cx, %cx    
 165      00
 166 0123 2E8B1600 		mov	    %cs:int1a_reg_dx, %dx    
 166      00
 167 0128 50       	   push %ax                         
 168 0129 55       	   push %bp                         
 169 012a 89E5     	   mov  %sp, %bp                    
 170 012c 8B4608   	   movw 8(%bp), %ax                 
 171 012f 83E0FE   	   andw $0xfffe, %ax                
 172 0132 894608   	   movw %ax, 8(%bp)                 
 173 0135 5D       	   pop  %bp                         
 174 0136 58       	   pop  %ax                         
 175 0137 CF       	   iret                             
 176              	
 177              		int1a_handler_asm_ah05:             
 178 0138 E8FEFF   		call int1a_handler_ah05                    
 179              	                                    
 180 013b 2E8B2600 	   mov %cs:int1a_reg_sp, %sp        
 180      00
 181 0140 2E8E1600 	   mov %cs:int1a_reg_ss, %ss        
 181      00
 182              	                                    
 183 0145 5F       	pop %di
 184 0146 5E       	pop %si
 185 0147 5D       	pop %bp
 186 0148 5B       	pop %bx
 187 0149 5B       	pop %bx
 188 014a 5A       	pop %dx
 189 014b 59       	pop %cx
 190 014c 58       	pop %ax
 191 014d 07       		pop %es                          
 192 014e 1F       		pop %ds                          
 193 014f CF       		iret                             
 194              	
 195              		.section	.rodata.str1.1,"aMS",@progbits,1
 196              	.LC0:
 197 0000 494E5420 		.string	"INT 0x1A\n"
 197      30783141 
 197      0A00
 198              	.LC1:
 199 000a 41583A20 		.string	"AX: %04x BX: %04x CX: %04x DX: %04x ES: %04x \n"
 199      25303478 
 199      2042583A 
 199      20253034 
 199      78204358 
 200              	#NO_APP
 201              		.text
 202              		.global	int1a_default_handler
 204              	int1a_default_handler:
 205 0150 56       		pushw	%si
 206 0151 57       		pushw	%di
 207 0152 06       		pushw	%es
 208 0153 55       		pushw	%bp
 209 0154 89E5     		movw	%sp,	%bp
 210 0156 83C480   		addw	$-128,	%sp
 211 0159 B80000   		movw	$.LC0,	%ax
 212 015c 50       		pushw	%ax
 213 015d BF8000   		movw	$128,	%di
 214 0160 57       		pushw	%di
 215 0161 8D7680   		leaw	-128(%bp),	%si
 216 0164 56       		pushw	%si
 217 0165 E8FEFF   		call	s_snprintf
 218 0168 56       		pushw	%si
 219              	#APP
 220              	;# 151 "src/int1ah.c" 1
   1              	#include <stdio.h>
   2              	#include "basicio.h"
   3              	
   4              	#include "terminal.h"
   5              	#include "system.h"
   6              	
   7              	#include "asmfuncs.h"
   8              	#include "timer.h"
   9              	#include "emu_interface.h"
  10              	
  11              	unsigned int int1a_reg_ax;
  12              	unsigned int int1a_reg_bx;
  13              	unsigned int int1a_reg_cx;
  14              	unsigned int int1a_reg_dx;
  15              	unsigned int int1a_reg_es;
  16              	
  17              	unsigned int int1a_reg_sp;
  18              	unsigned int int1a_reg_ss;
  19              	
  20              	unsigned int int1a_reg_ss2;
  21              	
  22              	#define PUSHA \
  23              	"mov %ss, %cs:int1a_reg_ss2\n" \
  24              	"push %ax\n" \
  25              	"push %cx\n" \
  26              	"push %dx\n" \
  27              	"push %bx\n" \
  28              	"push %cs:int1a_reg_ss2\n" \
  29              	"push %bp\n" \
  30              	"push %si\n" \
  31              	"push %di\n"
  32              	
  33              	#define POPA \
  34              	"pop %di\n" \
  35              	"pop %si\n" \
  36              	"pop %bp\n" \
  37              	"pop %bx\n"  /* skip next 2 bytes of stack */ \
  38              	"pop %bx\n" \
  39              	"pop %dx\n" \
  40              	"pop %cx\n" \
  41              	"pop %ax\n" 
  42              	
  43              	__asm__ (
  44              	"   .global int1a_handler_asm        \n"
  45              	"int1a_handler_asm:                  \n"
  46              	"	push %ds                         \n"
  47              	"	push %es                         \n"
  48              	PUSHA /*"	pusha                            \n"*/
  49              	"                                    \n"
  50              	"   mov %ax, %cs:int1a_reg_ax        \n"
  51              	"   mov %bx, %cs:int1a_reg_bx        \n"
  52              	"   mov %cx, %cs:int1a_reg_cx        \n"
  53              	"   mov %dx, %cs:int1a_reg_dx        \n"
  54              	"   mov %es, %cs:int1a_reg_es        \n"
  55              	"   mov %sp, %cs:int1a_reg_sp        \n"
  56              	"   mov %ss, %cs:int1a_reg_ss        \n"
  57              	"                                    \n"
  58              	"	mov	%cs, %ax                     \n"
  59              	"	mov	%ax, %ss                     \n"
  60              	"	mov	%ax, %ds                     \n"
  61              	"	mov	$0xffff, %sp                 \n"
  62              	"                                    \n"
  63              	"   mov int1a_reg_ax, %ax            \n"
  64              	"	cmp	$0x00, %ah                   \n"
  65              	"	je	int1a_handler_asm_ah00       \n"
  66              	"	cmp	$0x01, %ah                   \n"
  67              	"	je	int1a_handler_asm_ah01       \n"
  68              	"	cmp	$0x02, %ah                   \n"
  69              	"	je	int1a_handler_asm_ah02       \n"
  70              	"	cmp	$0x03, %ah                   \n"
  71              	"	je	int1a_handler_asm_ah03       \n"
  72              	"	cmp	$0x04, %ah                   \n"
  73              	"	je	int1a_handler_asm_ah04       \n"
  74              	"	cmp	$0x05, %ah                   \n"
  75              	"	je	int1a_handler_asm_ah05       \n"
  76              	"                                    \n"
  77              	"	call int1a_default_handler       \n"
  78              	"                                    \n"
  79              	"   mov %cs:int1a_reg_sp, %sp        \n"
  80              	"   mov %cs:int1a_reg_ss, %ss        \n"
  81              	"                                    \n"
  82              	POPA /*"	popa                             \n"*/
  83              	"	pop %es                          \n"
  84              	"	pop %ds                          \n"
  85              	"	iret                             \n");
  86              	
  87              	#define HEAD_OF_ASM_HANDLER(func)  \
  88              	"	call " func "                    \n" \
  89              	"                                    \n" \
  90              	"   mov %cs:int1a_reg_sp, %sp        \n" \
  91              	"   mov %cs:int1a_reg_ss, %ss        \n" \
  92              	"                                    \n" \
  93              	POPA /*"	popa                             \n"*/ \
  94              	"	pop %es                          \n" \
  95              	"	pop %ds                          \n" 
  96              	
  97              	#define IRET_WITHOUT_CARRYFLAG  \
  98              	"   push %ax                         \n" \
  99              	"   push %bp                         \n" \
 100              	"   mov  %sp, %bp                    \n" \
 101              	"   movw 8(%bp), %ax                 \n" /* clear the carry flag */ \
 102              	"   andw $0xfffe, %ax                \n" \
 103              	"   movw %ax, 8(%bp)                 \n" \
 104              	"   pop  %bp                         \n" \
 105              	"   pop  %ax                         \n" \
 106              	"   iret                             \n"
 107              	
 108              	__asm__ (
 109              	"int1a_handler_asm_ah00:             \n"
 110              	HEAD_OF_ASM_HANDLER("int1a_handler_ah00")
 111              	"	mov	    %cs:int1a_reg_cx, %cx    \n"
 112              	"	mov	    %cs:int1a_reg_dx, %dx    \n"
 113              	"	movb	%cs:int1a_reg_ax, %al    \n"
 114              	"	iret                             \n");
 115              	
 116              	__asm__ (
 117              	"int1a_handler_asm_ah01:             \n"
 118              	HEAD_OF_ASM_HANDLER("int1a_handler_ah01")
 119              	"	iret                             \n");
 120              	
 121              	__asm__ (
 122              	"int1a_handler_asm_ah02:             \n"
 123              	HEAD_OF_ASM_HANDLER("int1a_handler_ah02")
 124              	"	mov	    %cs:int1a_reg_cx, %cx    \n"
 125              	"	mov	    %cs:int1a_reg_dx, %dx    \n"
 126              	IRET_WITHOUT_CARRYFLAG);
 127              	
 128              	__asm__ (
 129              	"int1a_handler_asm_ah03:             \n"
 130              	HEAD_OF_ASM_HANDLER("int1a_handler_ah03")
 131              	"	iret                             \n");
 132              	
 133              	__asm__ (
 134              	"int1a_handler_asm_ah04:             \n"
 135              	HEAD_OF_ASM_HANDLER("int1a_handler_ah04")
 136              	"	mov	    %cs:int1a_reg_cx, %cx    \n"
 137              	"	mov	    %cs:int1a_reg_dx, %dx    \n"
 138              	IRET_WITHOUT_CARRYFLAG);
 139              	
 140              	__asm__ (
 141              	"int1a_handler_asm_ah05:             \n"
 142              	HEAD_OF_ASM_HANDLER("int1a_handler_ah05")
 143              	"	iret                             \n");
 144              	
 145              	
 146              	
 147              	void int1a_default_handler(void){
 148              	    char buf[128];
 149              		unsigned int reg_ss;
 150              	
 151 0169 8CD0     	    asm volatile("mov  %%ss, %w0" : "=a"(reg_ss) : );
 152              	
 221              		mov  %ss, %ax
 222              	;# 0 "" 2
 223              	#NO_APP
 224 016b 8EC0     		movw	%ax,	%es
 225 016d 50       		pushw	%ax
 226 016e E8FEFF   		call	emuLogMessage
 227 0171 FF360000 		pushw	int1a_reg_es
 228 0175 FF360000 		pushw	int1a_reg_dx
 229 0179 FF360000 		pushw	int1a_reg_cx
 230 017d FF360000 		pushw	int1a_reg_bx
 231 0181 FF360000 		pushw	int1a_reg_ax
 232 0185 B80A00   		movw	$.LC1,	%ax
 233 0188 50       		pushw	%ax
 234 0189 57       		pushw	%di
 235 018a 56       		pushw	%si
 236 018b E8FEFF   		call	s_snprintf
 237 018e 56       		pushw	%si
 238 018f 06       		pushw	%es
 239 0190 E8FEFF   		call	emuLogMessage
 240 0193 89EC     		movw	%bp,	%sp
 241 0195 5D       		popw	%bp
 242 0196 07       		popw	%es
 243 0197 5F       		popw	%di
 244 0198 5E       		popw	%si
 245 0199 C3       		ret
 247              		.global	int1a_handler_ah00
 249              	int1a_handler_ah00:
 250 019a 56       		pushw	%si
 251 019b 57       		pushw	%di
 252 019c 06       		pushw	%es
 253 019d 55       		pushw	%bp
 254 019e 89E5     		movw	%sp,	%bp
 255 01a0 83EC02   		subw	$2,	%sp
 256 01a3 C646FF00 		movb	$0,	-1(%bp)
 257 01a7 BF0200   		movw	$2,	%di
 258 01aa 57       		pushw	%di
 259 01ab B80000   		movw	$int1a_reg_dx,	%ax
 260 01ae 50       		pushw	%ax
 261 01af B86C00   		movw	$108,	%ax
 262 01b2 50       		pushw	%ax
 263 01b3 BE4000   		movw	$64,	%si
 264 01b6 56       		pushw	%si
 265 01b7 E8FEFF   		call	fetch_data
 266 01ba 57       		pushw	%di
 267 01bb B80000   		movw	$int1a_reg_cx,	%ax
 268 01be 50       		pushw	%ax
 269 01bf B86E00   		movw	$110,	%ax
 270 01c2 50       		pushw	%ax
 271 01c3 56       		pushw	%si
 272 01c4 E8FEFF   		call	fetch_data
 273 01c7 C7060000 		movw	$0,	int1a_reg_ax
 273      0000
 274 01cd B80100   		movw	$1,	%ax
 275 01d0 8EC0     		movw	%ax,	%es
 276 01d2 50       		pushw	%ax
 277 01d3 B80000   		movw	$int1a_reg_ax,	%ax
 278 01d6 50       		pushw	%ax
 279 01d7 8D7D6E   		leaw	110(%di),	%di
 280 01da 57       		pushw	%di
 281 01db 56       		pushw	%si
 282 01dc E8FEFF   		call	fetch_data
 283 01df 06       		pushw	%es
 284 01e0 57       		pushw	%di
 285 01e1 56       		pushw	%si
 286 01e2 8D46FF   		leaw	-1(%bp),	%ax
 287 01e5 50       		pushw	%ax
 288 01e6 E8FEFF   		call	copy_data
 289 01e9 89EC     		movw	%bp,	%sp
 290 01eb 5D       		popw	%bp
 291 01ec 07       		popw	%es
 292 01ed 5F       		popw	%di
 293 01ee 5E       		popw	%si
 294 01ef C3       		ret
 296              		.global	int1a_handler_ah01
 298              	int1a_handler_ah01:
 299 01f0 56       		pushw	%si
 300 01f1 57       		pushw	%di
 301 01f2 FF360000 		pushw	int1a_reg_cx
 302 01f6 FF360000 		pushw	int1a_reg_dx
 303 01fa E8FEFF   		call	updateTickOffset
 304 01fd BF0200   		movw	$2,	%di
 305 0200 57       		pushw	%di
 306 0201 B86C00   		movw	$108,	%ax
 307 0204 50       		pushw	%ax
 308 0205 BE4000   		movw	$64,	%si
 309 0208 56       		pushw	%si
 310 0209 B80000   		movw	$int1a_reg_dx,	%ax
 311 020c 50       		pushw	%ax
 312 020d E8FEFF   		call	copy_data
 313 0210 57       		pushw	%di
 314 0211 B86E00   		movw	$110,	%ax
 315 0214 50       		pushw	%ax
 316 0215 56       		pushw	%si
 317 0216 B80000   		movw	$int1a_reg_cx,	%ax
 318 0219 50       		pushw	%ax
 319 021a E8FEFF   		call	copy_data
 320 021d 83C414   		addw	$20,	%sp
 321 0220 5F       		popw	%di
 322 0221 5E       		popw	%si
 323 0222 C3       		ret
 325              		.global	int1a_handler_ah02
 327              	int1a_handler_ah02:
 328 0223 55       		pushw	%bp
 329 0224 89E5     		movw	%sp,	%bp
 330 0226 83EC04   		subw	$4,	%sp
 331 0229 8D46FF   		leaw	-1(%bp),	%ax
 332 022c 50       		pushw	%ax
 333 022d 8D46FE   		leaw	-2(%bp),	%ax
 334 0230 50       		pushw	%ax
 335 0231 8D46FD   		leaw	-3(%bp),	%ax
 336 0234 50       		pushw	%ax
 337 0235 31C0     		xorw	%ax,	%ax
 338 0237 50       		pushw	%ax
 339 0238 50       		pushw	%ax
 340 0239 50       		pushw	%ax
 341 023a E8FEFF   		call	emuGetTime
 342 023d 8A46FD   		movb	-3(%bp),	%al
 343 0240 B50A     		movb	$10,	%ch
 344 0242 30E4     		xorb	%ah,	%ah
 345 0244 F6F5     		divb	%ch
 346 0246 88C2     		movb	%al,	%dl
 347 0248 30F6     		xorb	%dh,	%dh
 348 024a D1E2     		shlw	$1,	%dx
 349 024c 89D3     		movw	%dx,	%bx
 350 024e D1E3     		shlw	$1,	%bx
 351 0250 D1E3     		shlw	$1,	%bx
 352 0252 D1E3     		shlw	$1,	%bx
 353 0254 88E2     		movb	%ah,	%dl
 354 0256 01D3     		addw	%dx,	%bx
 355 0258 B108     		movb	$8,	%cl
 356 025a D3E3     		shlw	%cl,	%bx
 357 025c 8A46FE   		movb	-2(%bp),	%al
 358 025f 30E4     		xorb	%ah,	%ah
 359 0261 F6F5     		divb	%ch
 360 0263 88C2     		movb	%al,	%dl
 361 0265 30F6     		xorb	%dh,	%dh
 362 0267 D1E2     		shlw	$1,	%dx
 363 0269 D1E2     		shlw	$1,	%dx
 364 026b D1E2     		shlw	$1,	%dx
 365 026d D1E2     		shlw	$1,	%dx
 366 026f 88E0     		movb	%ah,	%al
 367 0271 30E4     		xorb	%ah,	%ah
 368 0273 01C2     		addw	%ax,	%dx
 369 0275 01DA     		addw	%bx,	%dx
 370 0277 89160000 		movw	%dx,	int1a_reg_cx
 371 027b 8A46FF   		movb	-1(%bp),	%al
 372 027e 30E4     		xorb	%ah,	%ah
 373 0280 F6F5     		divb	%ch
 374 0282 88C2     		movb	%al,	%dl
 375 0284 30F6     		xorb	%dh,	%dh
 376 0286 D1E2     		shlw	$1,	%dx
 377 0288 D1E2     		shlw	$1,	%dx
 378 028a D1E2     		shlw	$1,	%dx
 379 028c D1E2     		shlw	$1,	%dx
 380 028e 88E0     		movb	%ah,	%al
 381 0290 01C2     		addw	%ax,	%dx
 382 0292 D3E2     		shlw	%cl,	%dx
 383 0294 89160000 		movw	%dx,	int1a_reg_dx
 384 0298 89EC     		movw	%bp,	%sp
 385 029a 5D       		popw	%bp
 386 029b C3       		ret
 388              		.global	int1a_handler_ah03
 390              	int1a_handler_ah03:
 391 029c C3       		ret
 393              		.global	int1a_handler_ah04
 395              	int1a_handler_ah04:
 396 029d 56       		pushw	%si
 397 029e 57       		pushw	%di
 398 029f 55       		pushw	%bp
 399 02a0 89E5     		movw	%sp,	%bp
 400 02a2 83EC04   		subw	$4,	%sp
 401 02a5 31C0     		xorw	%ax,	%ax
 402 02a7 50       		pushw	%ax
 403 02a8 50       		pushw	%ax
 404 02a9 50       		pushw	%ax
 405 02aa 8D46FD   		leaw	-3(%bp),	%ax
 406 02ad 50       		pushw	%ax
 407 02ae 8D46FC   		leaw	-4(%bp),	%ax
 408 02b1 50       		pushw	%ax
 409 02b2 8D46FE   		leaw	-2(%bp),	%ax
 410 02b5 50       		pushw	%ax
 411 02b6 E8FEFF   		call	emuGetTime
 412 02b9 8E5EFE   		movw	-2(%bp),	%ds
 413 02bc B9E803   		movw	$1000,	%cx
 414 02bf 8CD8     		movw	%ds,	%ax
 415 02c1 31D2     		xorw	%dx,	%dx
 416 02c3 F7F1     		divw	%cx
 417 02c5 89D3     		movw	%dx,	%bx
 418 02c7 89C1     		movw	%ax,	%cx
 419 02c9 D1E1     		shlw	$1,	%cx
 420 02cb D1E1     		shlw	$1,	%cx
 421 02cd D1E1     		shlw	$1,	%cx
 422 02cf D1E1     		shlw	$1,	%cx
 423 02d1 D1E1     		shlw	$1,	%cx
 424 02d3 D1E1     		shlw	$1,	%cx
 425 02d5 D1E1     		shlw	$1,	%cx
 426 02d7 D1E1     		shlw	$1,	%cx
 427 02d9 D1E1     		shlw	$1,	%cx
 428 02db D1E1     		shlw	$1,	%cx
 429 02dd D1E1     		shlw	$1,	%cx
 430 02df D1E1     		shlw	$1,	%cx
 431 02e1 8CD8     		movw	%ds,	%ax
 432 02e3 BE0A00   		movw	$10,	%si
 433 02e6 31D2     		xorw	%dx,	%dx
 434 02e8 F7F6     		divw	%si
 435 02ea 01D1     		addw	%dx,	%cx
 436 02ec 89CF     		movw	%cx,	%di
 437 02ee 8D745A   		leaw	90(%si),	%si
 438 02f1 89D8     		movw	%bx,	%ax
 439 02f3 31D2     		xorw	%dx,	%dx
 440 02f5 F7F6     		divw	%si
 441 02f7 B108     		movb	$8,	%cl
 442 02f9 D3E0     		shlw	%cl,	%ax
 443 02fb 89F9     		movw	%di,	%cx
 444 02fd 01C1     		addw	%ax,	%cx
 445 02ff 8CD8     		movw	%ds,	%ax
 446 0301 31D2     		xorw	%dx,	%dx
 447 0303 F7F6     		divw	%si
 448 0305 89D0     		movw	%dx,	%ax
 449 0307 BB0A00   		movw	$10,	%bx
 450 030a 31D2     		xorw	%dx,	%dx
 451 030c F7F3     		divw	%bx
 452 030e D1E0     		shlw	$1,	%ax
 453 0310 89C2     		movw	%ax,	%dx
 454 0312 D1E2     		shlw	$1,	%dx
 455 0314 D1E2     		shlw	$1,	%dx
 456 0316 D1E2     		shlw	$1,	%dx
 457 0318 01D1     		addw	%dx,	%cx
 458 031a 36890E00 		movw	%cx,	%ss:int1a_reg_cx
 458      00
 459 031f 8A46FC   		movb	-4(%bp),	%al
 460 0322 30E4     		xorb	%ah,	%ah
 461 0324 F6F3     		divb	%bl
 462 0326 88C2     		movb	%al,	%dl
 463 0328 30F6     		xorb	%dh,	%dh
 464 032a D1E2     		shlw	$1,	%dx
 465 032c 89D1     		movw	%dx,	%cx
 466 032e D1E1     		shlw	$1,	%cx
 467 0330 D1E1     		shlw	$1,	%cx
 468 0332 D1E1     		shlw	$1,	%cx
 469 0334 88E0     		movb	%ah,	%al
 470 0336 01C8     		addw	%cx,	%ax
 471 0338 B108     		movb	$8,	%cl
 472 033a D3E0     		shlw	%cl,	%ax
 473 033c 89C1     		movw	%ax,	%cx
 474 033e 8A46FD   		movb	-3(%bp),	%al
 475 0341 30E4     		xorb	%ah,	%ah
 476 0343 F6F3     		divb	%bl
 477 0345 88C2     		movb	%al,	%dl
 478 0347 30F6     		xorb	%dh,	%dh
 479 0349 D1E2     		shlw	$1,	%dx
 480 034b D1E2     		shlw	$1,	%dx
 481 034d D1E2     		shlw	$1,	%dx
 482 034f D1E2     		shlw	$1,	%dx
 483 0351 88E0     		movb	%ah,	%al
 484 0353 30E4     		xorb	%ah,	%ah
 485 0355 01C2     		addw	%ax,	%dx
 486 0357 01CA     		addw	%cx,	%dx
 487 0359 36891600 		movw	%dx,	%ss:int1a_reg_dx
 487      00
 488 035e 89EC     		movw	%bp,	%sp
 489 0360 5D       		popw	%bp
 490 0361 5F       		popw	%di
 491 0362 5E       		popw	%si
 492 0363 16       		pushw	%ss
 493 0364 1F       		popw	%ds
 494 0365 C3       		ret
 496              		.global	int1a_handler_ah05
 498              	int1a_handler_ah05:
 499 0366 C3       		ret
 501              		.comm	int1a_reg_ss2,2,2
 502              		.comm	int1a_reg_ss,2,2
 503              		.comm	int1a_reg_sp,2,2
 504              		.comm	int1a_reg_es,2,2
 505              		.comm	int1a_reg_dx,2,2
 506              		.comm	int1a_reg_cx,2,2
 507              		.comm	int1a_reg_bx,2,2
 508              		.comm	int1a_reg_ax,2,2
 509              		.ident	"GCC: (GNU) 6.3.0"
   1              		.arch i8086,jumps
   2              		.code16
   3              		.att_syntax prefix
   4              	#NO_APP
   5              		.text
   6              		.global	execEmuCMD
   8              	execEmuCMD:
   9 0000 56       		pushw	%si
  10 0001 55       		pushw	%bp
  11 0002 89E5     		movw	%sp,	%bp
  12 0004 8B7606   		movw	6(%bp),	%si
  13 0007 B82300   		movw	$35,	%ax
  14 000a 50       		pushw	%ax
  15 000b 56       		pushw	%si
  16 000c E8FEFF   		call	systemOutWord
  17 000f 8A4402   		movb	2(%si),	%al
  18 0012 89EC     		movw	%bp,	%sp
  19 0014 5D       		popw	%bp
  20 0015 5E       		popw	%si
  21 0016 C3       		ret
  23              		.global	emuPrintMessage
  25              	emuPrintMessage:
  26 0017 55       		pushw	%bp
  27 0018 89E5     		movw	%sp,	%bp
  28 001a 83EC04   		subw	$4,	%sp
  29 001d C746FC5A 		movw	$90,	-4(%bp)
  29      00
  30 0022 C646FE01 		movb	$1,	-2(%bp)
  31 0026 8A4604   		movb	4(%bp),	%al
  32 0029 8846FF   		movb	%al,	-1(%bp)
  33 002c B82300   		movw	$35,	%ax
  34 002f 50       		pushw	%ax
  35 0030 8D46FC   		leaw	-4(%bp),	%ax
  36 0033 50       		pushw	%ax
  37 0034 E8FEFF   		call	systemOutWord
  38 0037 8A46FE   		movb	-2(%bp),	%al
  39 003a 89EC     		movw	%bp,	%sp
  40 003c 5D       		popw	%bp
  41 003d C3       		ret
  43              		.global	emuGetMemoryCapacity
  45              	emuGetMemoryCapacity:
  46 003e 55       		pushw	%bp
  47 003f 89E5     		movw	%sp,	%bp
  48 0041 83EC08   		subw	$8,	%sp
  49 0044 C746F95A 		movw	$858,	-7(%bp)
  49      03
  50 0049 C646FB01 		movb	$1,	-5(%bp)
  51 004d B82300   		movw	$35,	%ax
  52 0050 50       		pushw	%ax
  53 0051 8D46F9   		leaw	-7(%bp),	%ax
  54 0054 50       		pushw	%ax
  55 0055 E8FEFF   		call	systemOutWord
  56 0058 83C404   		addw	$4,	%sp
  57 005b 8B46FC   		movw	-4(%bp),	%ax
  58 005e 8B56FE   		movw	-2(%bp),	%dx
  59 0061 89EC     		movw	%bp,	%sp
  60 0063 5D       		popw	%bp
  61 0064 C3       		ret
  63              		.global	emuGetCPUType
  65              	emuGetCPUType:
  66 0065 55       		pushw	%bp
  67 0066 89E5     		movw	%sp,	%bp
  68 0068 83EC06   		subw	$6,	%sp
  69 006b C746FB5A 		movw	$1114,	-5(%bp)
  69      04
  70 0070 C646FD01 		movb	$1,	-3(%bp)
  71 0074 B82300   		movw	$35,	%ax
  72 0077 50       		pushw	%ax
  73 0078 8D46FB   		leaw	-5(%bp),	%ax
  74 007b 50       		pushw	%ax
  75 007c E8FEFF   		call	systemOutWord
  76 007f 8B46FE   		movw	-2(%bp),	%ax
  77 0082 89EC     		movw	%bp,	%sp
  78 0084 5D       		popw	%bp
  79 0085 C3       		ret
  81              		.global	emuLogMessage
  83              	emuLogMessage:
  84 0086 55       		pushw	%bp
  85 0087 89E5     		movw	%sp,	%bp
  86 0089 83EC08   		subw	$8,	%sp
  87 008c 8B5604   		movw	4(%bp),	%dx
  88 008f 8B4606   		movw	6(%bp),	%ax
  89 0092 C746F95A 		movw	$346,	-7(%bp)
  89      01
  90 0097 C646FB01 		movb	$1,	-5(%bp)
  91 009b 8856FC   		movb	%dl,	-4(%bp)
  92 009e B108     		movb	$8,	%cl
  93 00a0 D3EA     		shrw	%cl,	%dx
  94 00a2 8856FD   		movb	%dl,	-3(%bp)
  95 00a5 8846FE   		movb	%al,	-2(%bp)
  96 00a8 D3E8     		shrw	%cl,	%ax
  97 00aa 8846FF   		movb	%al,	-1(%bp)
  98 00ad B82300   		movw	$35,	%ax
  99 00b0 50       		pushw	%ax
 100 00b1 8D46F9   		leaw	-7(%bp),	%ax
 101 00b4 50       		pushw	%ax
 102 00b5 E8FEFF   		call	systemOutWord
 103 00b8 8A46FB   		movb	-5(%bp),	%al
 104 00bb 89EC     		movw	%bp,	%sp
 105 00bd 5D       		popw	%bp
 106 00be C3       		ret
 108              		.global	emuGetTime
 110              	emuGetTime:
 111 00bf 55       		pushw	%bp
 112 00c0 89E5     		movw	%sp,	%bp
 113 00c2 83EC0A   		subw	$10,	%sp
 114 00c5 C746F75A 		movw	$602,	-9(%bp)
 114      02
 115 00ca C646F901 		movb	$1,	-7(%bp)
 116 00ce B82300   		movw	$35,	%ax
 117 00d1 50       		pushw	%ax
 118 00d2 8D46F7   		leaw	-9(%bp),	%ax
 119 00d5 50       		pushw	%ax
 120 00d6 E8FEFF   		call	systemOutWord
 121 00d9 8A46F9   		movb	-7(%bp),	%al
 122 00dc 83C404   		addw	$4,	%sp
 123 00df 837E0400 		cmpw	$0,	4(%bp)
 124 00e3 740E     		je	.L12
 125 00e5 8A56FA   		movb	-6(%bp),	%dl
 126 00e8 30F6     		xorb	%dh,	%dh
 127 00ea 81C26C07 		addw	$1900,	%dx
 128 00ee 8B5E04   		movw	4(%bp),	%bx
 129 00f1 8917     		movw	%dx,	(%bx)
 130              	.L12:
 131 00f3 837E0600 		cmpw	$0,	6(%bp)
 132 00f7 7408     		je	.L13
 133 00f9 8A66FB   		movb	-5(%bp),	%ah
 134 00fc 8B5E06   		movw	6(%bp),	%bx
 135 00ff 8827     		movb	%ah,	(%bx)
 136              	.L13:
 137 0101 837E0800 		cmpw	$0,	8(%bp)
 138 0105 7408     		je	.L14
 139 0107 8A66FC   		movb	-4(%bp),	%ah
 140 010a 8B5E08   		movw	8(%bp),	%bx
 141 010d 8827     		movb	%ah,	(%bx)
 142              	.L14:
 143 010f 837E0A00 		cmpw	$0,	10(%bp)
 144 0113 7408     		je	.L15
 145 0115 8A66FD   		movb	-3(%bp),	%ah
 146 0118 8B5E0A   		movw	10(%bp),	%bx
 147 011b 8827     		movb	%ah,	(%bx)
 148              	.L15:
 149 011d 837E0C00 		cmpw	$0,	12(%bp)
 150 0121 7408     		je	.L16
 151 0123 8A66FE   		movb	-2(%bp),	%ah
 152 0126 8B5E0C   		movw	12(%bp),	%bx
 153 0129 8827     		movb	%ah,	(%bx)
 154              	.L16:
 155 012b 837E0E00 		cmpw	$0,	14(%bp)
 156 012f 7408     		je	.L11
 157 0131 8A66FF   		movb	-1(%bp),	%ah
 158 0134 8B5E0E   		movw	14(%bp),	%bx
 159 0137 8827     		movb	%ah,	(%bx)
 160              	.L11:
 161 0139 89EC     		movw	%bp,	%sp
 162 013b 5D       		popw	%bp
 163 013c C3       		ret
 165              		.global	emuGetDriveSize
 167              	emuGetDriveSize:
 168 013d 56       		pushw	%si
 169 013e 55       		pushw	%bp
 170 013f 89E5     		movw	%sp,	%bp
 171 0141 83EC0A   		subw	$10,	%sp
 172 0144 8B7608   		movw	8(%bp),	%si
 173 0147 C746F85A 		movw	$4186,	-8(%bp)
 173      10
 174 014c C646FA01 		movb	$1,	-6(%bp)
 175 0150 8A4606   		movb	6(%bp),	%al
 176 0153 8846FB   		movb	%al,	-5(%bp)
 177 0156 B82300   		movw	$35,	%ax
 178 0159 50       		pushw	%ax
 179 015a 8D46F8   		leaw	-8(%bp),	%ax
 180 015d 50       		pushw	%ax
 181 015e E8FEFF   		call	systemOutWord
 182 0161 8B46FE   		movw	-2(%bp),	%ax
 183 0164 89C2     		movw	%ax,	%dx
 184 0166 B108     		movb	$8,	%cl
 185 0168 D3E2     		shlw	%cl,	%dx
 186 016a 8A4EFD   		movb	-3(%bp),	%cl
 187 016d 08CA     		orb	%cl,	%dl
 188 016f 30C0     		xorb	%al,	%al
 189 0171 08F0     		orb	%dh,	%al
 190 0173 B108     		movb	$8,	%cl
 191 0175 D3E2     		shlw	%cl,	%dx
 192 0177 8A4EFC   		movb	-4(%bp),	%cl
 193 017a 08CA     		orb	%cl,	%dl
 194 017c 8914     		movw	%dx,	(%si)
 195 017e 894402   		movw	%ax,	2(%si)
 196 0181 8A46FA   		movb	-6(%bp),	%al
 197 0184 89EC     		movw	%bp,	%sp
 198 0186 5D       		popw	%bp
 199 0187 5E       		popw	%si
 200 0188 C3       		ret
 202              		.global	emuReadDriveSector
 204              	emuReadDriveSector:
 205 0189 55       		pushw	%bp
 206 018a 89E5     		movw	%sp,	%bp
 207 018c 83EC0C   		subw	$12,	%sp
 208 018f 8B5606   		movw	6(%bp),	%dx
 209 0192 8B4608   		movw	8(%bp),	%ax
 210 0195 C746F45A 		movw	$4442,	-12(%bp)
 210      11
 211 019a C646F601 		movb	$1,	-10(%bp)
 212 019e 8A4E04   		movb	4(%bp),	%cl
 213 01a1 884EF7   		movb	%cl,	-9(%bp)
 214 01a4 8856F8   		movb	%dl,	-8(%bp)
 215 01a7 B108     		movb	$8,	%cl
 216 01a9 D3EA     		shrw	%cl,	%dx
 217 01ab 8856F9   		movb	%dl,	-7(%bp)
 218 01ae 8846FA   		movb	%al,	-6(%bp)
 219 01b1 D3E8     		shrw	%cl,	%ax
 220 01b3 8846FB   		movb	%al,	-5(%bp)
 221 01b6 8A460A   		movb	10(%bp),	%al
 222 01b9 8846FC   		movb	%al,	-4(%bp)
 223 01bc 8B460A   		movw	10(%bp),	%ax
 224 01bf D3E8     		shrw	%cl,	%ax
 225 01c1 8846FD   		movb	%al,	-3(%bp)
 226 01c4 8A460C   		movb	12(%bp),	%al
 227 01c7 8846FE   		movb	%al,	-2(%bp)
 228 01ca 8B460C   		movw	12(%bp),	%ax
 229 01cd D3E8     		shrw	%cl,	%ax
 230 01cf 8846FF   		movb	%al,	-1(%bp)
 231 01d2 B82300   		movw	$35,	%ax
 232 01d5 50       		pushw	%ax
 233 01d6 8D46F4   		leaw	-12(%bp),	%ax
 234 01d9 50       		pushw	%ax
 235 01da E8FEFF   		call	systemOutWord
 236 01dd 8A46F6   		movb	-10(%bp),	%al
 237 01e0 89EC     		movw	%bp,	%sp
 238 01e2 5D       		popw	%bp
 239 01e3 C3       		ret
 241              		.global	emuWriteDriveSector
 243              	emuWriteDriveSector:
 244 01e4 55       		pushw	%bp
 245 01e5 89E5     		movw	%sp,	%bp
 246 01e7 83EC0C   		subw	$12,	%sp
 247 01ea 8B5606   		movw	6(%bp),	%dx
 248 01ed 8B4608   		movw	8(%bp),	%ax
 249 01f0 C746F45A 		movw	$4698,	-12(%bp)
 249      12
 250 01f5 C646F601 		movb	$1,	-10(%bp)
 251 01f9 8A4E04   		movb	4(%bp),	%cl
 252 01fc 884EF7   		movb	%cl,	-9(%bp)
 253 01ff 8856F8   		movb	%dl,	-8(%bp)
 254 0202 B108     		movb	$8,	%cl
 255 0204 D3EA     		shrw	%cl,	%dx
 256 0206 8856F9   		movb	%dl,	-7(%bp)
 257 0209 8846FA   		movb	%al,	-6(%bp)
 258 020c D3E8     		shrw	%cl,	%ax
 259 020e 8846FB   		movb	%al,	-5(%bp)
 260 0211 8A460A   		movb	10(%bp),	%al
 261 0214 8846FC   		movb	%al,	-4(%bp)
 262 0217 8B460A   		movw	10(%bp),	%ax
 263 021a D3E8     		shrw	%cl,	%ax
 264 021c 8846FD   		movb	%al,	-3(%bp)
 265 021f 8A460C   		movb	12(%bp),	%al
 266 0222 8846FE   		movb	%al,	-2(%bp)
 267 0225 8B460C   		movw	12(%bp),	%ax
 268 0228 D3E8     		shrw	%cl,	%ax
 269 022a 8846FF   		movb	%al,	-1(%bp)
 270 022d B82300   		movw	$35,	%ax
 271 0230 50       		pushw	%ax
 272 0231 8D46F4   		leaw	-12(%bp),	%ax
 273 0234 50       		pushw	%ax
 274 0235 E8FEFF   		call	systemOutWord
 275 0238 8A46F6   		movb	-10(%bp),	%al
 276 023b 89EC     		movw	%bp,	%sp
 277 023d 5D       		popw	%bp
 278 023e C3       		ret
 280              		.ident	"GCC: (GNU) 6.3.0"
   1              	
   2              	// i186 is specified in this file because POPA and PUSHA are used in a error handling function
   3              	
   4              		.arch i186,jumps
   5              		.code16 
   6              		.att_syntax prefix 
   7              		.text
   8              	
   9              	.global _int0x00_default_handler
  10              	_int0x00_default_handler:
  11 0000 2EC70600 		movw $0x00, %cs:intr_num
  11      000000
  12 0007 E9E709   		jmp _intr_default_handler
  13              	
  14              	.global _int0x01_default_handler
  15              	_int0x01_default_handler:
  16 000a 2EC70600 		movw $0x01, %cs:intr_num
  16      000100
  17 0011 E9DD09   		jmp _intr_default_handler
  18              	
  19              	.global _int0x02_default_handler
  20              	_int0x02_default_handler:
  21 0014 2EC70600 		movw $0x02, %cs:intr_num
  21      000200
  22 001b E9D309   		jmp _intr_default_handler
  23              	
  24              	.global _int0x03_default_handler
  25              	_int0x03_default_handler:
  26 001e 2EC70600 		movw $0x03, %cs:intr_num
  26      000300
  27 0025 E9C909   		jmp _intr_default_handler
  28              	
  29              	.global _int0x04_default_handler
  30              	_int0x04_default_handler:
  31 0028 2EC70600 		movw $0x04, %cs:intr_num
  31      000400
  32 002f E9BF09   		jmp _intr_default_handler
  33              	
  34              	.global _int0x05_default_handler
  35              	_int0x05_default_handler:
  36 0032 2EC70600 		movw $0x05, %cs:intr_num
  36      000500
  37 0039 E9B509   		jmp _intr_default_handler
  38              	
  39              	.global _int0x06_default_handler
  40              	_int0x06_default_handler:
  41 003c 2EC70600 		movw $0x06, %cs:intr_num
  41      000600
  42 0043 E9AB09   		jmp _intr_default_handler
  43              	
  44              	.global _int0x07_default_handler
  45              	_int0x07_default_handler:
  46 0046 2EC70600 		movw $0x07, %cs:intr_num
  46      000700
  47 004d E9A109   		jmp _intr_default_handler
  48              	
  49              	.global _int0x08_default_handler
  50              	_int0x08_default_handler:
  51 0050 2EC70600 		movw $0x08, %cs:intr_num
  51      000800
  52 0057 E99709   		jmp _intr_default_handler
  53              	
  54              	.global _int0x09_default_handler
  55              	_int0x09_default_handler:
  56 005a 2EC70600 		movw $0x09, %cs:intr_num
  56      000900
  57 0061 E98D09   		jmp _intr_default_handler
  58              	
  59              	.global _int0x0a_default_handler
  60              	_int0x0a_default_handler:
  61 0064 2EC70600 		movw $0x0a, %cs:intr_num
  61      000A00
  62 006b E98309   		jmp _intr_default_handler
  63              	
  64              	.global _int0x0b_default_handler
  65              	_int0x0b_default_handler:
  66 006e 2EC70600 		movw $0x0b, %cs:intr_num
  66      000B00
  67 0075 E97909   		jmp _intr_default_handler
  68              	
  69              	.global _int0x0c_default_handler
  70              	_int0x0c_default_handler:
  71 0078 2EC70600 		movw $0x0c, %cs:intr_num
  71      000C00
  72 007f E96F09   		jmp _intr_default_handler
  73              	
  74              	.global _int0x0d_default_handler
  75              	_int0x0d_default_handler:
  76 0082 2EC70600 		movw $0x0d, %cs:intr_num
  76      000D00
  77 0089 E96509   		jmp _intr_default_handler
  78              	
  79              	.global _int0x0e_default_handler
  80              	_int0x0e_default_handler:
  81 008c 2EC70600 		movw $0x0e, %cs:intr_num
  81      000E00
  82 0093 E95B09   		jmp _intr_default_handler
  83              	
  84              	.global _int0x0f_default_handler
  85              	_int0x0f_default_handler:
  86 0096 2EC70600 		movw $0x0f, %cs:intr_num
  86      000F00
  87 009d E95109   		jmp _intr_default_handler
  88              	
  89              	.global _int0x10_default_handler
  90              	_int0x10_default_handler:
  91 00a0 2EC70600 		movw $0x10, %cs:intr_num
  91      001000
  92 00a7 E94709   		jmp _intr_default_handler
  93              	
  94              	.global _int0x11_default_handler
  95              	_int0x11_default_handler:
  96 00aa 2EC70600 		movw $0x11, %cs:intr_num
  96      001100
  97 00b1 E93D09   		jmp _intr_default_handler
  98              	
  99              	.global _int0x12_default_handler
 100              	_int0x12_default_handler:
 101 00b4 2EC70600 		movw $0x12, %cs:intr_num
 101      001200
 102 00bb E93309   		jmp _intr_default_handler
 103              	
 104              	.global _int0x13_default_handler
 105              	_int0x13_default_handler:
 106 00be 2EC70600 		movw $0x13, %cs:intr_num
 106      001300
 107 00c5 E92909   		jmp _intr_default_handler
 108              	
 109              	.global _int0x14_default_handler
 110              	_int0x14_default_handler:
 111 00c8 2EC70600 		movw $0x14, %cs:intr_num
 111      001400
 112 00cf E91F09   		jmp _intr_default_handler
 113              	
 114              	.global _int0x15_default_handler
 115              	_int0x15_default_handler:
 116 00d2 2EC70600 		movw $0x15, %cs:intr_num
 116      001500
 117 00d9 E91509   		jmp _intr_default_handler
 118              	
 119              	.global _int0x16_default_handler
 120              	_int0x16_default_handler:
 121 00dc 2EC70600 		movw $0x16, %cs:intr_num
 121      001600
 122 00e3 E90B09   		jmp _intr_default_handler
 123              	
 124              	.global _int0x17_default_handler
 125              	_int0x17_default_handler:
 126 00e6 2EC70600 		movw $0x17, %cs:intr_num
 126      001700
 127 00ed E90109   		jmp _intr_default_handler
 128              	
 129              	.global _int0x18_default_handler
 130              	_int0x18_default_handler:
 131 00f0 2EC70600 		movw $0x18, %cs:intr_num
 131      001800
 132 00f7 E9F708   		jmp _intr_default_handler
 133              	
 134              	.global _int0x19_default_handler
 135              	_int0x19_default_handler:
 136 00fa 2EC70600 		movw $0x19, %cs:intr_num
 136      001900
 137 0101 E9ED08   		jmp _intr_default_handler
 138              	
 139              	.global _int0x1a_default_handler
 140              	_int0x1a_default_handler:
 141 0104 2EC70600 		movw $0x1a, %cs:intr_num
 141      001A00
 142 010b E9E308   		jmp _intr_default_handler
 143              	
 144              	.global _int0x1b_default_handler
 145              	_int0x1b_default_handler:
 146 010e 2EC70600 		movw $0x1b, %cs:intr_num
 146      001B00
 147 0115 E9D908   		jmp _intr_default_handler
 148              	
 149              	.global _int0x1c_default_handler
 150              	_int0x1c_default_handler:
 151 0118 2EC70600 		movw $0x1c, %cs:intr_num
 151      001C00
 152 011f E9CF08   		jmp _intr_default_handler
 153              	
 154              	.global _int0x1d_default_handler
 155              	_int0x1d_default_handler:
 156 0122 2EC70600 		movw $0x1d, %cs:intr_num
 156      001D00
 157 0129 E9C508   		jmp _intr_default_handler
 158              	
 159              	.global _int0x1e_default_handler
 160              	_int0x1e_default_handler:
 161 012c 2EC70600 		movw $0x1e, %cs:intr_num
 161      001E00
 162 0133 E9BB08   		jmp _intr_default_handler
 163              	
 164              	.global _int0x1f_default_handler
 165              	_int0x1f_default_handler:
 166 0136 2EC70600 		movw $0x1f, %cs:intr_num
 166      001F00
 167 013d E9B108   		jmp _intr_default_handler
 168              	
 169              	.global _int0x20_default_handler
 170              	_int0x20_default_handler:
 171 0140 2EC70600 		movw $0x20, %cs:intr_num
 171      002000
 172 0147 E9A708   		jmp _intr_default_handler
 173              	
 174              	.global _int0x21_default_handler
 175              	_int0x21_default_handler:
 176 014a 2EC70600 		movw $0x21, %cs:intr_num
 176      002100
 177 0151 E99D08   		jmp _intr_default_handler
 178              	
 179              	.global _int0x22_default_handler
 180              	_int0x22_default_handler:
 181 0154 2EC70600 		movw $0x22, %cs:intr_num
 181      002200
 182 015b E99308   		jmp _intr_default_handler
 183              	
 184              	.global _int0x23_default_handler
 185              	_int0x23_default_handler:
 186 015e 2EC70600 		movw $0x23, %cs:intr_num
 186      002300
 187 0165 E98908   		jmp _intr_default_handler
 188              	
 189              	.global _int0x24_default_handler
 190              	_int0x24_default_handler:
 191 0168 2EC70600 		movw $0x24, %cs:intr_num
 191      002400
 192 016f E97F08   		jmp _intr_default_handler
 193              	
 194              	.global _int0x25_default_handler
 195              	_int0x25_default_handler:
 196 0172 2EC70600 		movw $0x25, %cs:intr_num
 196      002500
 197 0179 E97508   		jmp _intr_default_handler
 198              	
 199              	.global _int0x26_default_handler
 200              	_int0x26_default_handler:
 201 017c 2EC70600 		movw $0x26, %cs:intr_num
 201      002600
 202 0183 E96B08   		jmp _intr_default_handler
 203              	
 204              	.global _int0x27_default_handler
 205              	_int0x27_default_handler:
 206 0186 2EC70600 		movw $0x27, %cs:intr_num
 206      002700
 207 018d E96108   		jmp _intr_default_handler
 208              	
 209              	.global _int0x28_default_handler
 210              	_int0x28_default_handler:
 211 0190 2EC70600 		movw $0x28, %cs:intr_num
 211      002800
 212 0197 E95708   		jmp _intr_default_handler
 213              	
 214              	.global _int0x29_default_handler
 215              	_int0x29_default_handler:
 216 019a 2EC70600 		movw $0x29, %cs:intr_num
 216      002900
 217 01a1 E94D08   		jmp _intr_default_handler
 218              	
 219              	.global _int0x2a_default_handler
 220              	_int0x2a_default_handler:
 221 01a4 2EC70600 		movw $0x2a, %cs:intr_num
 221      002A00
 222 01ab E94308   		jmp _intr_default_handler
 223              	
 224              	.global _int0x2b_default_handler
 225              	_int0x2b_default_handler:
 226 01ae 2EC70600 		movw $0x2b, %cs:intr_num
 226      002B00
 227 01b5 E93908   		jmp _intr_default_handler
 228              	
 229              	.global _int0x2c_default_handler
 230              	_int0x2c_default_handler:
 231 01b8 2EC70600 		movw $0x2c, %cs:intr_num
 231      002C00
 232 01bf E92F08   		jmp _intr_default_handler
 233              	
 234              	.global _int0x2d_default_handler
 235              	_int0x2d_default_handler:
 236 01c2 2EC70600 		movw $0x2d, %cs:intr_num
 236      002D00
 237 01c9 E92508   		jmp _intr_default_handler
 238              	
 239              	.global _int0x2e_default_handler
 240              	_int0x2e_default_handler:
 241 01cc 2EC70600 		movw $0x2e, %cs:intr_num
 241      002E00
 242 01d3 E91B08   		jmp _intr_default_handler
 243              	
 244              	.global _int0x2f_default_handler
 245              	_int0x2f_default_handler:
 246 01d6 2EC70600 		movw $0x2f, %cs:intr_num
 246      002F00
 247 01dd E91108   		jmp _intr_default_handler
 248              	
 249              	.global _int0x30_default_handler
 250              	_int0x30_default_handler:
 251 01e0 2EC70600 		movw $0x30, %cs:intr_num
 251      003000
 252 01e7 E90708   		jmp _intr_default_handler
 253              	
 254              	.global _int0x31_default_handler
 255              	_int0x31_default_handler:
 256 01ea 2EC70600 		movw $0x31, %cs:intr_num
 256      003100
 257 01f1 E9FD07   		jmp _intr_default_handler
 258              	
 259              	.global _int0x32_default_handler
 260              	_int0x32_default_handler:
 261 01f4 2EC70600 		movw $0x32, %cs:intr_num
 261      003200
 262 01fb E9F307   		jmp _intr_default_handler
 263              	
 264              	.global _int0x33_default_handler
 265              	_int0x33_default_handler:
 266 01fe 2EC70600 		movw $0x33, %cs:intr_num
 266      003300
 267 0205 E9E907   		jmp _intr_default_handler
 268              	
 269              	.global _int0x34_default_handler
 270              	_int0x34_default_handler:
 271 0208 2EC70600 		movw $0x34, %cs:intr_num
 271      003400
 272 020f E9DF07   		jmp _intr_default_handler
 273              	
 274              	.global _int0x35_default_handler
 275              	_int0x35_default_handler:
 276 0212 2EC70600 		movw $0x35, %cs:intr_num
 276      003500
 277 0219 E9D507   		jmp _intr_default_handler
 278              	
 279              	.global _int0x36_default_handler
 280              	_int0x36_default_handler:
 281 021c 2EC70600 		movw $0x36, %cs:intr_num
 281      003600
 282 0223 E9CB07   		jmp _intr_default_handler
 283              	
 284              	.global _int0x37_default_handler
 285              	_int0x37_default_handler:
 286 0226 2EC70600 		movw $0x37, %cs:intr_num
 286      003700
 287 022d E9C107   		jmp _intr_default_handler
 288              	
 289              	.global _int0x38_default_handler
 290              	_int0x38_default_handler:
 291 0230 2EC70600 		movw $0x38, %cs:intr_num
 291      003800
 292 0237 E9B707   		jmp _intr_default_handler
 293              	
 294              	.global _int0x39_default_handler
 295              	_int0x39_default_handler:
 296 023a 2EC70600 		movw $0x39, %cs:intr_num
 296      003900
 297 0241 E9AD07   		jmp _intr_default_handler
 298              	
 299              	.global _int0x3a_default_handler
 300              	_int0x3a_default_handler:
 301 0244 2EC70600 		movw $0x3a, %cs:intr_num
 301      003A00
 302 024b E9A307   		jmp _intr_default_handler
 303              	
 304              	.global _int0x3b_default_handler
 305              	_int0x3b_default_handler:
 306 024e 2EC70600 		movw $0x3b, %cs:intr_num
 306      003B00
 307 0255 E99907   		jmp _intr_default_handler
 308              	
 309              	.global _int0x3c_default_handler
 310              	_int0x3c_default_handler:
 311 0258 2EC70600 		movw $0x3c, %cs:intr_num
 311      003C00
 312 025f E98F07   		jmp _intr_default_handler
 313              	
 314              	.global _int0x3d_default_handler
 315              	_int0x3d_default_handler:
 316 0262 2EC70600 		movw $0x3d, %cs:intr_num
 316      003D00
 317 0269 E98507   		jmp _intr_default_handler
 318              	
 319              	.global _int0x3e_default_handler
 320              	_int0x3e_default_handler:
 321 026c 2EC70600 		movw $0x3e, %cs:intr_num
 321      003E00
 322 0273 E97B07   		jmp _intr_default_handler
 323              	
 324              	.global _int0x3f_default_handler
 325              	_int0x3f_default_handler:
 326 0276 2EC70600 		movw $0x3f, %cs:intr_num
 326      003F00
 327 027d E97107   		jmp _intr_default_handler
 328              	
 329              	.global _int0x40_default_handler
 330              	_int0x40_default_handler:
 331 0280 2EC70600 		movw $0x40, %cs:intr_num
 331      004000
 332 0287 E96707   		jmp _intr_default_handler
 333              	
 334              	.global _int0x41_default_handler
 335              	_int0x41_default_handler:
 336 028a 2EC70600 		movw $0x41, %cs:intr_num
 336      004100
 337 0291 E95D07   		jmp _intr_default_handler
 338              	
 339              	.global _int0x42_default_handler
 340              	_int0x42_default_handler:
 341 0294 2EC70600 		movw $0x42, %cs:intr_num
 341      004200
 342 029b E95307   		jmp _intr_default_handler
 343              	
 344              	.global _int0x43_default_handler
 345              	_int0x43_default_handler:
 346 029e 2EC70600 		movw $0x43, %cs:intr_num
 346      004300
 347 02a5 E94907   		jmp _intr_default_handler
 348              	
 349              	.global _int0x44_default_handler
 350              	_int0x44_default_handler:
 351 02a8 2EC70600 		movw $0x44, %cs:intr_num
 351      004400
 352 02af E93F07   		jmp _intr_default_handler
 353              	
 354              	.global _int0x45_default_handler
 355              	_int0x45_default_handler:
 356 02b2 2EC70600 		movw $0x45, %cs:intr_num
 356      004500
 357 02b9 E93507   		jmp _intr_default_handler
 358              	
 359              	.global _int0x46_default_handler
 360              	_int0x46_default_handler:
 361 02bc 2EC70600 		movw $0x46, %cs:intr_num
 361      004600
 362 02c3 E92B07   		jmp _intr_default_handler
 363              	
 364              	.global _int0x47_default_handler
 365              	_int0x47_default_handler:
 366 02c6 2EC70600 		movw $0x47, %cs:intr_num
 366      004700
 367 02cd E92107   		jmp _intr_default_handler
 368              	
 369              	.global _int0x48_default_handler
 370              	_int0x48_default_handler:
 371 02d0 2EC70600 		movw $0x48, %cs:intr_num
 371      004800
 372 02d7 E91707   		jmp _intr_default_handler
 373              	
 374              	.global _int0x49_default_handler
 375              	_int0x49_default_handler:
 376 02da 2EC70600 		movw $0x49, %cs:intr_num
 376      004900
 377 02e1 E90D07   		jmp _intr_default_handler
 378              	
 379              	.global _int0x4a_default_handler
 380              	_int0x4a_default_handler:
 381 02e4 2EC70600 		movw $0x4a, %cs:intr_num
 381      004A00
 382 02eb E90307   		jmp _intr_default_handler
 383              	
 384              	.global _int0x4b_default_handler
 385              	_int0x4b_default_handler:
 386 02ee 2EC70600 		movw $0x4b, %cs:intr_num
 386      004B00
 387 02f5 E9F906   		jmp _intr_default_handler
 388              	
 389              	.global _int0x4c_default_handler
 390              	_int0x4c_default_handler:
 391 02f8 2EC70600 		movw $0x4c, %cs:intr_num
 391      004C00
 392 02ff E9EF06   		jmp _intr_default_handler
 393              	
 394              	.global _int0x4d_default_handler
 395              	_int0x4d_default_handler:
 396 0302 2EC70600 		movw $0x4d, %cs:intr_num
 396      004D00
 397 0309 E9E506   		jmp _intr_default_handler
 398              	
 399              	.global _int0x4e_default_handler
 400              	_int0x4e_default_handler:
 401 030c 2EC70600 		movw $0x4e, %cs:intr_num
 401      004E00
 402 0313 E9DB06   		jmp _intr_default_handler
 403              	
 404              	.global _int0x4f_default_handler
 405              	_int0x4f_default_handler:
 406 0316 2EC70600 		movw $0x4f, %cs:intr_num
 406      004F00
 407 031d E9D106   		jmp _intr_default_handler
 408              	
 409              	.global _int0x50_default_handler
 410              	_int0x50_default_handler:
 411 0320 2EC70600 		movw $0x50, %cs:intr_num
 411      005000
 412 0327 E9C706   		jmp _intr_default_handler
 413              	
 414              	.global _int0x51_default_handler
 415              	_int0x51_default_handler:
 416 032a 2EC70600 		movw $0x51, %cs:intr_num
 416      005100
 417 0331 E9BD06   		jmp _intr_default_handler
 418              	
 419              	.global _int0x52_default_handler
 420              	_int0x52_default_handler:
 421 0334 2EC70600 		movw $0x52, %cs:intr_num
 421      005200
 422 033b E9B306   		jmp _intr_default_handler
 423              	
 424              	.global _int0x53_default_handler
 425              	_int0x53_default_handler:
 426 033e 2EC70600 		movw $0x53, %cs:intr_num
 426      005300
 427 0345 E9A906   		jmp _intr_default_handler
 428              	
 429              	.global _int0x54_default_handler
 430              	_int0x54_default_handler:
 431 0348 2EC70600 		movw $0x54, %cs:intr_num
 431      005400
 432 034f E99F06   		jmp _intr_default_handler
 433              	
 434              	.global _int0x55_default_handler
 435              	_int0x55_default_handler:
 436 0352 2EC70600 		movw $0x55, %cs:intr_num
 436      005500
 437 0359 E99506   		jmp _intr_default_handler
 438              	
 439              	.global _int0x56_default_handler
 440              	_int0x56_default_handler:
 441 035c 2EC70600 		movw $0x56, %cs:intr_num
 441      005600
 442 0363 E98B06   		jmp _intr_default_handler
 443              	
 444              	.global _int0x57_default_handler
 445              	_int0x57_default_handler:
 446 0366 2EC70600 		movw $0x57, %cs:intr_num
 446      005700
 447 036d E98106   		jmp _intr_default_handler
 448              	
 449              	.global _int0x58_default_handler
 450              	_int0x58_default_handler:
 451 0370 2EC70600 		movw $0x58, %cs:intr_num
 451      005800
 452 0377 E97706   		jmp _intr_default_handler
 453              	
 454              	.global _int0x59_default_handler
 455              	_int0x59_default_handler:
 456 037a 2EC70600 		movw $0x59, %cs:intr_num
 456      005900
 457 0381 E96D06   		jmp _intr_default_handler
 458              	
 459              	.global _int0x5a_default_handler
 460              	_int0x5a_default_handler:
 461 0384 2EC70600 		movw $0x5a, %cs:intr_num
 461      005A00
 462 038b E96306   		jmp _intr_default_handler
 463              	
 464              	.global _int0x5b_default_handler
 465              	_int0x5b_default_handler:
 466 038e 2EC70600 		movw $0x5b, %cs:intr_num
 466      005B00
 467 0395 E95906   		jmp _intr_default_handler
 468              	
 469              	.global _int0x5c_default_handler
 470              	_int0x5c_default_handler:
 471 0398 2EC70600 		movw $0x5c, %cs:intr_num
 471      005C00
 472 039f E94F06   		jmp _intr_default_handler
 473              	
 474              	.global _int0x5d_default_handler
 475              	_int0x5d_default_handler:
 476 03a2 2EC70600 		movw $0x5d, %cs:intr_num
 476      005D00
 477 03a9 E94506   		jmp _intr_default_handler
 478              	
 479              	.global _int0x5e_default_handler
 480              	_int0x5e_default_handler:
 481 03ac 2EC70600 		movw $0x5e, %cs:intr_num
 481      005E00
 482 03b3 E93B06   		jmp _intr_default_handler
 483              	
 484              	.global _int0x5f_default_handler
 485              	_int0x5f_default_handler:
 486 03b6 2EC70600 		movw $0x5f, %cs:intr_num
 486      005F00
 487 03bd E93106   		jmp _intr_default_handler
 488              	
 489              	.global _int0x60_default_handler
 490              	_int0x60_default_handler:
 491 03c0 2EC70600 		movw $0x60, %cs:intr_num
 491      006000
 492 03c7 E92706   		jmp _intr_default_handler
 493              	
 494              	.global _int0x61_default_handler
 495              	_int0x61_default_handler:
 496 03ca 2EC70600 		movw $0x61, %cs:intr_num
 496      006100
 497 03d1 E91D06   		jmp _intr_default_handler
 498              	
 499              	.global _int0x62_default_handler
 500              	_int0x62_default_handler:
 501 03d4 2EC70600 		movw $0x62, %cs:intr_num
 501      006200
 502 03db E91306   		jmp _intr_default_handler
 503              	
 504              	.global _int0x63_default_handler
 505              	_int0x63_default_handler:
 506 03de 2EC70600 		movw $0x63, %cs:intr_num
 506      006300
 507 03e5 E90906   		jmp _intr_default_handler
 508              	
 509              	.global _int0x64_default_handler
 510              	_int0x64_default_handler:
 511 03e8 2EC70600 		movw $0x64, %cs:intr_num
 511      006400
 512 03ef E9FF05   		jmp _intr_default_handler
 513              	
 514              	.global _int0x65_default_handler
 515              	_int0x65_default_handler:
 516 03f2 2EC70600 		movw $0x65, %cs:intr_num
 516      006500
 517 03f9 E9F505   		jmp _intr_default_handler
 518              	
 519              	.global _int0x66_default_handler
 520              	_int0x66_default_handler:
 521 03fc 2EC70600 		movw $0x66, %cs:intr_num
 521      006600
 522 0403 E9EB05   		jmp _intr_default_handler
 523              	
 524              	.global _int0x67_default_handler
 525              	_int0x67_default_handler:
 526 0406 2EC70600 		movw $0x67, %cs:intr_num
 526      006700
 527 040d E9E105   		jmp _intr_default_handler
 528              	
 529              	.global _int0x68_default_handler
 530              	_int0x68_default_handler:
 531 0410 2EC70600 		movw $0x68, %cs:intr_num
 531      006800
 532 0417 E9D705   		jmp _intr_default_handler
 533              	
 534              	.global _int0x69_default_handler
 535              	_int0x69_default_handler:
 536 041a 2EC70600 		movw $0x69, %cs:intr_num
 536      006900
 537 0421 E9CD05   		jmp _intr_default_handler
 538              	
 539              	.global _int0x6a_default_handler
 540              	_int0x6a_default_handler:
 541 0424 2EC70600 		movw $0x6a, %cs:intr_num
 541      006A00
 542 042b E9C305   		jmp _intr_default_handler
 543              	
 544              	.global _int0x6b_default_handler
 545              	_int0x6b_default_handler:
 546 042e 2EC70600 		movw $0x6b, %cs:intr_num
 546      006B00
 547 0435 E9B905   		jmp _intr_default_handler
 548              	
 549              	.global _int0x6c_default_handler
 550              	_int0x6c_default_handler:
 551 0438 2EC70600 		movw $0x6c, %cs:intr_num
 551      006C00
 552 043f E9AF05   		jmp _intr_default_handler
 553              	
 554              	.global _int0x6d_default_handler
 555              	_int0x6d_default_handler:
 556 0442 2EC70600 		movw $0x6d, %cs:intr_num
 556      006D00
 557 0449 E9A505   		jmp _intr_default_handler
 558              	
 559              	.global _int0x6e_default_handler
 560              	_int0x6e_default_handler:
 561 044c 2EC70600 		movw $0x6e, %cs:intr_num
 561      006E00
 562 0453 E99B05   		jmp _intr_default_handler
 563              	
 564              	.global _int0x6f_default_handler
 565              	_int0x6f_default_handler:
 566 0456 2EC70600 		movw $0x6f, %cs:intr_num
 566      006F00
 567 045d E99105   		jmp _intr_default_handler
 568              	
 569              	.global _int0x70_default_handler
 570              	_int0x70_default_handler:
 571 0460 2EC70600 		movw $0x70, %cs:intr_num
 571      007000
 572 0467 E98705   		jmp _intr_default_handler
 573              	
 574              	.global _int0x71_default_handler
 575              	_int0x71_default_handler:
 576 046a 2EC70600 		movw $0x71, %cs:intr_num
 576      007100
 577 0471 E97D05   		jmp _intr_default_handler
 578              	
 579              	.global _int0x72_default_handler
 580              	_int0x72_default_handler:
 581 0474 2EC70600 		movw $0x72, %cs:intr_num
 581      007200
 582 047b E97305   		jmp _intr_default_handler
 583              	
 584              	.global _int0x73_default_handler
 585              	_int0x73_default_handler:
 586 047e 2EC70600 		movw $0x73, %cs:intr_num
 586      007300
 587 0485 E96905   		jmp _intr_default_handler
 588              	
 589              	.global _int0x74_default_handler
 590              	_int0x74_default_handler:
 591 0488 2EC70600 		movw $0x74, %cs:intr_num
 591      007400
 592 048f E95F05   		jmp _intr_default_handler
 593              	
 594              	.global _int0x75_default_handler
 595              	_int0x75_default_handler:
 596 0492 2EC70600 		movw $0x75, %cs:intr_num
 596      007500
 597 0499 E95505   		jmp _intr_default_handler
 598              	
 599              	.global _int0x76_default_handler
 600              	_int0x76_default_handler:
 601 049c 2EC70600 		movw $0x76, %cs:intr_num
 601      007600
 602 04a3 E94B05   		jmp _intr_default_handler
 603              	
 604              	.global _int0x77_default_handler
 605              	_int0x77_default_handler:
 606 04a6 2EC70600 		movw $0x77, %cs:intr_num
 606      007700
 607 04ad E94105   		jmp _intr_default_handler
 608              	
 609              	.global _int0x78_default_handler
 610              	_int0x78_default_handler:
 611 04b0 2EC70600 		movw $0x78, %cs:intr_num
 611      007800
 612 04b7 E93705   		jmp _intr_default_handler
 613              	
 614              	.global _int0x79_default_handler
 615              	_int0x79_default_handler:
 616 04ba 2EC70600 		movw $0x79, %cs:intr_num
 616      007900
 617 04c1 E92D05   		jmp _intr_default_handler
 618              	
 619              	.global _int0x7a_default_handler
 620              	_int0x7a_default_handler:
 621 04c4 2EC70600 		movw $0x7a, %cs:intr_num
 621      007A00
 622 04cb E92305   		jmp _intr_default_handler
 623              	
 624              	.global _int0x7b_default_handler
 625              	_int0x7b_default_handler:
 626 04ce 2EC70600 		movw $0x7b, %cs:intr_num
 626      007B00
 627 04d5 E91905   		jmp _intr_default_handler
 628              	
 629              	.global _int0x7c_default_handler
 630              	_int0x7c_default_handler:
 631 04d8 2EC70600 		movw $0x7c, %cs:intr_num
 631      007C00
 632 04df E90F05   		jmp _intr_default_handler
 633              	
 634              	.global _int0x7d_default_handler
 635              	_int0x7d_default_handler:
 636 04e2 2EC70600 		movw $0x7d, %cs:intr_num
 636      007D00
 637 04e9 E90505   		jmp _intr_default_handler
 638              	
 639              	.global _int0x7e_default_handler
 640              	_int0x7e_default_handler:
 641 04ec 2EC70600 		movw $0x7e, %cs:intr_num
 641      007E00
 642 04f3 E9FB04   		jmp _intr_default_handler
 643              	
 644              	.global _int0x7f_default_handler
 645              	_int0x7f_default_handler:
 646 04f6 2EC70600 		movw $0x7f, %cs:intr_num
 646      007F00
 647 04fd E9F104   		jmp _intr_default_handler
 648              	
 649              	.global _int0x80_default_handler
 650              	_int0x80_default_handler:
 651 0500 2EC70600 		movw $0x80, %cs:intr_num
 651      008000
 652 0507 E9E704   		jmp _intr_default_handler
 653              	
 654              	.global _int0x81_default_handler
 655              	_int0x81_default_handler:
 656 050a 2EC70600 		movw $0x81, %cs:intr_num
 656      008100
 657 0511 E9DD04   		jmp _intr_default_handler
 658              	
 659              	.global _int0x82_default_handler
 660              	_int0x82_default_handler:
 661 0514 2EC70600 		movw $0x82, %cs:intr_num
 661      008200
 662 051b E9D304   		jmp _intr_default_handler
 663              	
 664              	.global _int0x83_default_handler
 665              	_int0x83_default_handler:
 666 051e 2EC70600 		movw $0x83, %cs:intr_num
 666      008300
 667 0525 E9C904   		jmp _intr_default_handler
 668              	
 669              	.global _int0x84_default_handler
 670              	_int0x84_default_handler:
 671 0528 2EC70600 		movw $0x84, %cs:intr_num
 671      008400
 672 052f E9BF04   		jmp _intr_default_handler
 673              	
 674              	.global _int0x85_default_handler
 675              	_int0x85_default_handler:
 676 0532 2EC70600 		movw $0x85, %cs:intr_num
 676      008500
 677 0539 E9B504   		jmp _intr_default_handler
 678              	
 679              	.global _int0x86_default_handler
 680              	_int0x86_default_handler:
 681 053c 2EC70600 		movw $0x86, %cs:intr_num
 681      008600
 682 0543 E9AB04   		jmp _intr_default_handler
 683              	
 684              	.global _int0x87_default_handler
 685              	_int0x87_default_handler:
 686 0546 2EC70600 		movw $0x87, %cs:intr_num
 686      008700
 687 054d E9A104   		jmp _intr_default_handler
 688              	
 689              	.global _int0x88_default_handler
 690              	_int0x88_default_handler:
 691 0550 2EC70600 		movw $0x88, %cs:intr_num
 691      008800
 692 0557 E99704   		jmp _intr_default_handler
 693              	
 694              	.global _int0x89_default_handler
 695              	_int0x89_default_handler:
 696 055a 2EC70600 		movw $0x89, %cs:intr_num
 696      008900
 697 0561 E98D04   		jmp _intr_default_handler
 698              	
 699              	.global _int0x8a_default_handler
 700              	_int0x8a_default_handler:
 701 0564 2EC70600 		movw $0x8a, %cs:intr_num
 701      008A00
 702 056b E98304   		jmp _intr_default_handler
 703              	
 704              	.global _int0x8b_default_handler
 705              	_int0x8b_default_handler:
 706 056e 2EC70600 		movw $0x8b, %cs:intr_num
 706      008B00
 707 0575 E97904   		jmp _intr_default_handler
 708              	
 709              	.global _int0x8c_default_handler
 710              	_int0x8c_default_handler:
 711 0578 2EC70600 		movw $0x8c, %cs:intr_num
 711      008C00
 712 057f E96F04   		jmp _intr_default_handler
 713              	
 714              	.global _int0x8d_default_handler
 715              	_int0x8d_default_handler:
 716 0582 2EC70600 		movw $0x8d, %cs:intr_num
 716      008D00
 717 0589 E96504   		jmp _intr_default_handler
 718              	
 719              	.global _int0x8e_default_handler
 720              	_int0x8e_default_handler:
 721 058c 2EC70600 		movw $0x8e, %cs:intr_num
 721      008E00
 722 0593 E95B04   		jmp _intr_default_handler
 723              	
 724              	.global _int0x8f_default_handler
 725              	_int0x8f_default_handler:
 726 0596 2EC70600 		movw $0x8f, %cs:intr_num
 726      008F00
 727 059d E95104   		jmp _intr_default_handler
 728              	
 729              	.global _int0x90_default_handler
 730              	_int0x90_default_handler:
 731 05a0 2EC70600 		movw $0x90, %cs:intr_num
 731      009000
 732 05a7 E94704   		jmp _intr_default_handler
 733              	
 734              	.global _int0x91_default_handler
 735              	_int0x91_default_handler:
 736 05aa 2EC70600 		movw $0x91, %cs:intr_num
 736      009100
 737 05b1 E93D04   		jmp _intr_default_handler
 738              	
 739              	.global _int0x92_default_handler
 740              	_int0x92_default_handler:
 741 05b4 2EC70600 		movw $0x92, %cs:intr_num
 741      009200
 742 05bb E93304   		jmp _intr_default_handler
 743              	
 744              	.global _int0x93_default_handler
 745              	_int0x93_default_handler:
 746 05be 2EC70600 		movw $0x93, %cs:intr_num
 746      009300
 747 05c5 E92904   		jmp _intr_default_handler
 748              	
 749              	.global _int0x94_default_handler
 750              	_int0x94_default_handler:
 751 05c8 2EC70600 		movw $0x94, %cs:intr_num
 751      009400
 752 05cf E91F04   		jmp _intr_default_handler
 753              	
 754              	.global _int0x95_default_handler
 755              	_int0x95_default_handler:
 756 05d2 2EC70600 		movw $0x95, %cs:intr_num
 756      009500
 757 05d9 E91504   		jmp _intr_default_handler
 758              	
 759              	.global _int0x96_default_handler
 760              	_int0x96_default_handler:
 761 05dc 2EC70600 		movw $0x96, %cs:intr_num
 761      009600
 762 05e3 E90B04   		jmp _intr_default_handler
 763              	
 764              	.global _int0x97_default_handler
 765              	_int0x97_default_handler:
 766 05e6 2EC70600 		movw $0x97, %cs:intr_num
 766      009700
 767 05ed E90104   		jmp _intr_default_handler
 768              	
 769              	.global _int0x98_default_handler
 770              	_int0x98_default_handler:
 771 05f0 2EC70600 		movw $0x98, %cs:intr_num
 771      009800
 772 05f7 E9F703   		jmp _intr_default_handler
 773              	
 774              	.global _int0x99_default_handler
 775              	_int0x99_default_handler:
 776 05fa 2EC70600 		movw $0x99, %cs:intr_num
 776      009900
 777 0601 E9ED03   		jmp _intr_default_handler
 778              	
 779              	.global _int0x9a_default_handler
 780              	_int0x9a_default_handler:
 781 0604 2EC70600 		movw $0x9a, %cs:intr_num
 781      009A00
 782 060b E9E303   		jmp _intr_default_handler
 783              	
 784              	.global _int0x9b_default_handler
 785              	_int0x9b_default_handler:
 786 060e 2EC70600 		movw $0x9b, %cs:intr_num
 786      009B00
 787 0615 E9D903   		jmp _intr_default_handler
 788              	
 789              	.global _int0x9c_default_handler
 790              	_int0x9c_default_handler:
 791 0618 2EC70600 		movw $0x9c, %cs:intr_num
 791      009C00
 792 061f E9CF03   		jmp _intr_default_handler
 793              	
 794              	.global _int0x9d_default_handler
 795              	_int0x9d_default_handler:
 796 0622 2EC70600 		movw $0x9d, %cs:intr_num
 796      009D00
 797 0629 E9C503   		jmp _intr_default_handler
 798              	
 799              	.global _int0x9e_default_handler
 800              	_int0x9e_default_handler:
 801 062c 2EC70600 		movw $0x9e, %cs:intr_num
 801      009E00
 802 0633 E9BB03   		jmp _intr_default_handler
 803              	
 804              	.global _int0x9f_default_handler
 805              	_int0x9f_default_handler:
 806 0636 2EC70600 		movw $0x9f, %cs:intr_num
 806      009F00
 807 063d E9B103   		jmp _intr_default_handler
 808              	
 809              	.global _int0xa0_default_handler
 810              	_int0xa0_default_handler:
 811 0640 2EC70600 		movw $0xa0, %cs:intr_num
 811      00A000
 812 0647 E9A703   		jmp _intr_default_handler
 813              	
 814              	.global _int0xa1_default_handler
 815              	_int0xa1_default_handler:
 816 064a 2EC70600 		movw $0xa1, %cs:intr_num
 816      00A100
 817 0651 E99D03   		jmp _intr_default_handler
 818              	
 819              	.global _int0xa2_default_handler
 820              	_int0xa2_default_handler:
 821 0654 2EC70600 		movw $0xa2, %cs:intr_num
 821      00A200
 822 065b E99303   		jmp _intr_default_handler
 823              	
 824              	.global _int0xa3_default_handler
 825              	_int0xa3_default_handler:
 826 065e 2EC70600 		movw $0xa3, %cs:intr_num
 826      00A300
 827 0665 E98903   		jmp _intr_default_handler
 828              	
 829              	.global _int0xa4_default_handler
 830              	_int0xa4_default_handler:
 831 0668 2EC70600 		movw $0xa4, %cs:intr_num
 831      00A400
 832 066f E97F03   		jmp _intr_default_handler
 833              	
 834              	.global _int0xa5_default_handler
 835              	_int0xa5_default_handler:
 836 0672 2EC70600 		movw $0xa5, %cs:intr_num
 836      00A500
 837 0679 E97503   		jmp _intr_default_handler
 838              	
 839              	.global _int0xa6_default_handler
 840              	_int0xa6_default_handler:
 841 067c 2EC70600 		movw $0xa6, %cs:intr_num
 841      00A600
 842 0683 E96B03   		jmp _intr_default_handler
 843              	
 844              	.global _int0xa7_default_handler
 845              	_int0xa7_default_handler:
 846 0686 2EC70600 		movw $0xa7, %cs:intr_num
 846      00A700
 847 068d E96103   		jmp _intr_default_handler
 848              	
 849              	.global _int0xa8_default_handler
 850              	_int0xa8_default_handler:
 851 0690 2EC70600 		movw $0xa8, %cs:intr_num
 851      00A800
 852 0697 E95703   		jmp _intr_default_handler
 853              	
 854              	.global _int0xa9_default_handler
 855              	_int0xa9_default_handler:
 856 069a 2EC70600 		movw $0xa9, %cs:intr_num
 856      00A900
 857 06a1 E94D03   		jmp _intr_default_handler
 858              	
 859              	.global _int0xaa_default_handler
 860              	_int0xaa_default_handler:
 861 06a4 2EC70600 		movw $0xaa, %cs:intr_num
 861      00AA00
 862 06ab E94303   		jmp _intr_default_handler
 863              	
 864              	.global _int0xab_default_handler
 865              	_int0xab_default_handler:
 866 06ae 2EC70600 		movw $0xab, %cs:intr_num
 866      00AB00
 867 06b5 E93903   		jmp _intr_default_handler
 868              	
 869              	.global _int0xac_default_handler
 870              	_int0xac_default_handler:
 871 06b8 2EC70600 		movw $0xac, %cs:intr_num
 871      00AC00
 872 06bf E92F03   		jmp _intr_default_handler
 873              	
 874              	.global _int0xad_default_handler
 875              	_int0xad_default_handler:
 876 06c2 2EC70600 		movw $0xad, %cs:intr_num
 876      00AD00
 877 06c9 E92503   		jmp _intr_default_handler
 878              	
 879              	.global _int0xae_default_handler
 880              	_int0xae_default_handler:
 881 06cc 2EC70600 		movw $0xae, %cs:intr_num
 881      00AE00
 882 06d3 E91B03   		jmp _intr_default_handler
 883              	
 884              	.global _int0xaf_default_handler
 885              	_int0xaf_default_handler:
 886 06d6 2EC70600 		movw $0xaf, %cs:intr_num
 886      00AF00
 887 06dd E91103   		jmp _intr_default_handler
 888              	
 889              	.global _int0xb0_default_handler
 890              	_int0xb0_default_handler:
 891 06e0 2EC70600 		movw $0xb0, %cs:intr_num
 891      00B000
 892 06e7 E90703   		jmp _intr_default_handler
 893              	
 894              	.global _int0xb1_default_handler
 895              	_int0xb1_default_handler:
 896 06ea 2EC70600 		movw $0xb1, %cs:intr_num
 896      00B100
 897 06f1 E9FD02   		jmp _intr_default_handler
 898              	
 899              	.global _int0xb2_default_handler
 900              	_int0xb2_default_handler:
 901 06f4 2EC70600 		movw $0xb2, %cs:intr_num
 901      00B200
 902 06fb E9F302   		jmp _intr_default_handler
 903              	
 904              	.global _int0xb3_default_handler
 905              	_int0xb3_default_handler:
 906 06fe 2EC70600 		movw $0xb3, %cs:intr_num
 906      00B300
 907 0705 E9E902   		jmp _intr_default_handler
 908              	
 909              	.global _int0xb4_default_handler
 910              	_int0xb4_default_handler:
 911 0708 2EC70600 		movw $0xb4, %cs:intr_num
 911      00B400
 912 070f E9DF02   		jmp _intr_default_handler
 913              	
 914              	.global _int0xb5_default_handler
 915              	_int0xb5_default_handler:
 916 0712 2EC70600 		movw $0xb5, %cs:intr_num
 916      00B500
 917 0719 E9D502   		jmp _intr_default_handler
 918              	
 919              	.global _int0xb6_default_handler
 920              	_int0xb6_default_handler:
 921 071c 2EC70600 		movw $0xb6, %cs:intr_num
 921      00B600
 922 0723 E9CB02   		jmp _intr_default_handler
 923              	
 924              	.global _int0xb7_default_handler
 925              	_int0xb7_default_handler:
 926 0726 2EC70600 		movw $0xb7, %cs:intr_num
 926      00B700
 927 072d E9C102   		jmp _intr_default_handler
 928              	
 929              	.global _int0xb8_default_handler
 930              	_int0xb8_default_handler:
 931 0730 2EC70600 		movw $0xb8, %cs:intr_num
 931      00B800
 932 0737 E9B702   		jmp _intr_default_handler
 933              	
 934              	.global _int0xb9_default_handler
 935              	_int0xb9_default_handler:
 936 073a 2EC70600 		movw $0xb9, %cs:intr_num
 936      00B900
 937 0741 E9AD02   		jmp _intr_default_handler
 938              	
 939              	.global _int0xba_default_handler
 940              	_int0xba_default_handler:
 941 0744 2EC70600 		movw $0xba, %cs:intr_num
 941      00BA00
 942 074b E9A302   		jmp _intr_default_handler
 943              	
 944              	.global _int0xbb_default_handler
 945              	_int0xbb_default_handler:
 946 074e 2EC70600 		movw $0xbb, %cs:intr_num
 946      00BB00
 947 0755 E99902   		jmp _intr_default_handler
 948              	
 949              	.global _int0xbc_default_handler
 950              	_int0xbc_default_handler:
 951 0758 2EC70600 		movw $0xbc, %cs:intr_num
 951      00BC00
 952 075f E98F02   		jmp _intr_default_handler
 953              	
 954              	.global _int0xbd_default_handler
 955              	_int0xbd_default_handler:
 956 0762 2EC70600 		movw $0xbd, %cs:intr_num
 956      00BD00
 957 0769 E98502   		jmp _intr_default_handler
 958              	
 959              	.global _int0xbe_default_handler
 960              	_int0xbe_default_handler:
 961 076c 2EC70600 		movw $0xbe, %cs:intr_num
 961      00BE00
 962 0773 E97B02   		jmp _intr_default_handler
 963              	
 964              	.global _int0xbf_default_handler
 965              	_int0xbf_default_handler:
 966 0776 2EC70600 		movw $0xbf, %cs:intr_num
 966      00BF00
 967 077d E97102   		jmp _intr_default_handler
 968              	
 969              	.global _int0xc0_default_handler
 970              	_int0xc0_default_handler:
 971 0780 2EC70600 		movw $0xc0, %cs:intr_num
 971      00C000
 972 0787 E96702   		jmp _intr_default_handler
 973              	
 974              	.global _int0xc1_default_handler
 975              	_int0xc1_default_handler:
 976 078a 2EC70600 		movw $0xc1, %cs:intr_num
 976      00C100
 977 0791 E95D02   		jmp _intr_default_handler
 978              	
 979              	.global _int0xc2_default_handler
 980              	_int0xc2_default_handler:
 981 0794 2EC70600 		movw $0xc2, %cs:intr_num
 981      00C200
 982 079b E95302   		jmp _intr_default_handler
 983              	
 984              	.global _int0xc3_default_handler
 985              	_int0xc3_default_handler:
 986 079e 2EC70600 		movw $0xc3, %cs:intr_num
 986      00C300
 987 07a5 E94902   		jmp _intr_default_handler
 988              	
 989              	.global _int0xc4_default_handler
 990              	_int0xc4_default_handler:
 991 07a8 2EC70600 		movw $0xc4, %cs:intr_num
 991      00C400
 992 07af E93F02   		jmp _intr_default_handler
 993              	
 994              	.global _int0xc5_default_handler
 995              	_int0xc5_default_handler:
 996 07b2 2EC70600 		movw $0xc5, %cs:intr_num
 996      00C500
 997 07b9 E93502   		jmp _intr_default_handler
 998              	
 999              	.global _int0xc6_default_handler
 1000              	_int0xc6_default_handler:
 1001 07bc 2EC70600 		movw $0xc6, %cs:intr_num
 1001      00C600
 1002 07c3 E92B02   		jmp _intr_default_handler
 1003              	
 1004              	.global _int0xc7_default_handler
 1005              	_int0xc7_default_handler:
 1006 07c6 2EC70600 		movw $0xc7, %cs:intr_num
 1006      00C700
 1007 07cd E92102   		jmp _intr_default_handler
 1008              	
 1009              	.global _int0xc8_default_handler
 1010              	_int0xc8_default_handler:
 1011 07d0 2EC70600 		movw $0xc8, %cs:intr_num
 1011      00C800
 1012 07d7 E91702   		jmp _intr_default_handler
 1013              	
 1014              	.global _int0xc9_default_handler
 1015              	_int0xc9_default_handler:
 1016 07da 2EC70600 		movw $0xc9, %cs:intr_num
 1016      00C900
 1017 07e1 E90D02   		jmp _intr_default_handler
 1018              	
 1019              	.global _int0xca_default_handler
 1020              	_int0xca_default_handler:
 1021 07e4 2EC70600 		movw $0xca, %cs:intr_num
 1021      00CA00
 1022 07eb E90302   		jmp _intr_default_handler
 1023              	
 1024              	.global _int0xcb_default_handler
 1025              	_int0xcb_default_handler:
 1026 07ee 2EC70600 		movw $0xcb, %cs:intr_num
 1026      00CB00
 1027 07f5 E9F901   		jmp _intr_default_handler
 1028              	
 1029              	.global _int0xcc_default_handler
 1030              	_int0xcc_default_handler:
 1031 07f8 2EC70600 		movw $0xcc, %cs:intr_num
 1031      00CC00
 1032 07ff E9EF01   		jmp _intr_default_handler
 1033              	
 1034              	.global _int0xcd_default_handler
 1035              	_int0xcd_default_handler:
 1036 0802 2EC70600 		movw $0xcd, %cs:intr_num
 1036      00CD00
 1037 0809 E9E501   		jmp _intr_default_handler
 1038              	
 1039              	.global _int0xce_default_handler
 1040              	_int0xce_default_handler:
 1041 080c 2EC70600 		movw $0xce, %cs:intr_num
 1041      00CE00
 1042 0813 E9DB01   		jmp _intr_default_handler
 1043              	
 1044              	.global _int0xcf_default_handler
 1045              	_int0xcf_default_handler:
 1046 0816 2EC70600 		movw $0xcf, %cs:intr_num
 1046      00CF00
 1047 081d E9D101   		jmp _intr_default_handler
 1048              	
 1049              	.global _int0xd0_default_handler
 1050              	_int0xd0_default_handler:
 1051 0820 2EC70600 		movw $0xd0, %cs:intr_num
 1051      00D000
 1052 0827 E9C701   		jmp _intr_default_handler
 1053              	
 1054              	.global _int0xd1_default_handler
 1055              	_int0xd1_default_handler:
 1056 082a 2EC70600 		movw $0xd1, %cs:intr_num
 1056      00D100
 1057 0831 E9BD01   		jmp _intr_default_handler
 1058              	
 1059              	.global _int0xd2_default_handler
 1060              	_int0xd2_default_handler:
 1061 0834 2EC70600 		movw $0xd2, %cs:intr_num
 1061      00D200
 1062 083b E9B301   		jmp _intr_default_handler
 1063              	
 1064              	.global _int0xd3_default_handler
 1065              	_int0xd3_default_handler:
 1066 083e 2EC70600 		movw $0xd3, %cs:intr_num
 1066      00D300
 1067 0845 E9A901   		jmp _intr_default_handler
 1068              	
 1069              	.global _int0xd4_default_handler
 1070              	_int0xd4_default_handler:
 1071 0848 2EC70600 		movw $0xd4, %cs:intr_num
 1071      00D400
 1072 084f E99F01   		jmp _intr_default_handler
 1073              	
 1074              	.global _int0xd5_default_handler
 1075              	_int0xd5_default_handler:
 1076 0852 2EC70600 		movw $0xd5, %cs:intr_num
 1076      00D500
 1077 0859 E99501   		jmp _intr_default_handler
 1078              	
 1079              	.global _int0xd6_default_handler
 1080              	_int0xd6_default_handler:
 1081 085c 2EC70600 		movw $0xd6, %cs:intr_num
 1081      00D600
 1082 0863 E98B01   		jmp _intr_default_handler
 1083              	
 1084              	.global _int0xd7_default_handler
 1085              	_int0xd7_default_handler:
 1086 0866 2EC70600 		movw $0xd7, %cs:intr_num
 1086      00D700
 1087 086d E98101   		jmp _intr_default_handler
 1088              	
 1089              	.global _int0xd8_default_handler
 1090              	_int0xd8_default_handler:
 1091 0870 2EC70600 		movw $0xd8, %cs:intr_num
 1091      00D800
 1092 0877 E97701   		jmp _intr_default_handler
 1093              	
 1094              	.global _int0xd9_default_handler
 1095              	_int0xd9_default_handler:
 1096 087a 2EC70600 		movw $0xd9, %cs:intr_num
 1096      00D900
 1097 0881 E96D01   		jmp _intr_default_handler
 1098              	
 1099              	.global _int0xda_default_handler
 1100              	_int0xda_default_handler:
 1101 0884 2EC70600 		movw $0xda, %cs:intr_num
 1101      00DA00
 1102 088b E96301   		jmp _intr_default_handler
 1103              	
 1104              	.global _int0xdb_default_handler
 1105              	_int0xdb_default_handler:
 1106 088e 2EC70600 		movw $0xdb, %cs:intr_num
 1106      00DB00
 1107 0895 E95901   		jmp _intr_default_handler
 1108              	
 1109              	.global _int0xdc_default_handler
 1110              	_int0xdc_default_handler:
 1111 0898 2EC70600 		movw $0xdc, %cs:intr_num
 1111      00DC00
 1112 089f E94F01   		jmp _intr_default_handler
 1113              	
 1114              	.global _int0xdd_default_handler
 1115              	_int0xdd_default_handler:
 1116 08a2 2EC70600 		movw $0xdd, %cs:intr_num
 1116      00DD00
 1117 08a9 E94501   		jmp _intr_default_handler
 1118              	
 1119              	.global _int0xde_default_handler
 1120              	_int0xde_default_handler:
 1121 08ac 2EC70600 		movw $0xde, %cs:intr_num
 1121      00DE00
 1122 08b3 E93B01   		jmp _intr_default_handler
 1123              	
 1124              	.global _int0xdf_default_handler
 1125              	_int0xdf_default_handler:
 1126 08b6 2EC70600 		movw $0xdf, %cs:intr_num
 1126      00DF00
 1127 08bd E93101   		jmp _intr_default_handler
 1128              	
 1129              	.global _int0xe0_default_handler
 1130              	_int0xe0_default_handler:
 1131 08c0 2EC70600 		movw $0xe0, %cs:intr_num
 1131      00E000
 1132 08c7 E92701   		jmp _intr_default_handler
 1133              	
 1134              	.global _int0xe1_default_handler
 1135              	_int0xe1_default_handler:
 1136 08ca 2EC70600 		movw $0xe1, %cs:intr_num
 1136      00E100
 1137 08d1 E91D01   		jmp _intr_default_handler
 1138              	
 1139              	.global _int0xe2_default_handler
 1140              	_int0xe2_default_handler:
 1141 08d4 2EC70600 		movw $0xe2, %cs:intr_num
 1141      00E200
 1142 08db E91301   		jmp _intr_default_handler
 1143              	
 1144              	.global _int0xe3_default_handler
 1145              	_int0xe3_default_handler:
 1146 08de 2EC70600 		movw $0xe3, %cs:intr_num
 1146      00E300
 1147 08e5 E90901   		jmp _intr_default_handler
 1148              	
 1149              	.global _int0xe4_default_handler
 1150              	_int0xe4_default_handler:
 1151 08e8 2EC70600 		movw $0xe4, %cs:intr_num
 1151      00E400
 1152 08ef E9FF00   		jmp _intr_default_handler
 1153              	
 1154              	.global _int0xe5_default_handler
 1155              	_int0xe5_default_handler:
 1156 08f2 2EC70600 		movw $0xe5, %cs:intr_num
 1156      00E500
 1157 08f9 E9F500   		jmp _intr_default_handler
 1158              	
 1159              	.global _int0xe6_default_handler
 1160              	_int0xe6_default_handler:
 1161 08fc 2EC70600 		movw $0xe6, %cs:intr_num
 1161      00E600
 1162 0903 E9EB00   		jmp _intr_default_handler
 1163              	
 1164              	.global _int0xe7_default_handler
 1165              	_int0xe7_default_handler:
 1166 0906 2EC70600 		movw $0xe7, %cs:intr_num
 1166      00E700
 1167 090d E9E100   		jmp _intr_default_handler
 1168              	
 1169              	.global _int0xe8_default_handler
 1170              	_int0xe8_default_handler:
 1171 0910 2EC70600 		movw $0xe8, %cs:intr_num
 1171      00E800
 1172 0917 E9D700   		jmp _intr_default_handler
 1173              	
 1174              	.global _int0xe9_default_handler
 1175              	_int0xe9_default_handler:
 1176 091a 2EC70600 		movw $0xe9, %cs:intr_num
 1176      00E900
 1177 0921 E9CD00   		jmp _intr_default_handler
 1178              	
 1179              	.global _int0xea_default_handler
 1180              	_int0xea_default_handler:
 1181 0924 2EC70600 		movw $0xea, %cs:intr_num
 1181      00EA00
 1182 092b E9C300   		jmp _intr_default_handler
 1183              	
 1184              	.global _int0xeb_default_handler
 1185              	_int0xeb_default_handler:
 1186 092e 2EC70600 		movw $0xeb, %cs:intr_num
 1186      00EB00
 1187 0935 E9B900   		jmp _intr_default_handler
 1188              	
 1189              	.global _int0xec_default_handler
 1190              	_int0xec_default_handler:
 1191 0938 2EC70600 		movw $0xec, %cs:intr_num
 1191      00EC00
 1192 093f E9AF00   		jmp _intr_default_handler
 1193              	
 1194              	.global _int0xed_default_handler
 1195              	_int0xed_default_handler:
 1196 0942 2EC70600 		movw $0xed, %cs:intr_num
 1196      00ED00
 1197 0949 E9A500   		jmp _intr_default_handler
 1198              	
 1199              	.global _int0xee_default_handler
 1200              	_int0xee_default_handler:
 1201 094c 2EC70600 		movw $0xee, %cs:intr_num
 1201      00EE00
 1202 0953 E99B00   		jmp _intr_default_handler
 1203              	
 1204              	.global _int0xef_default_handler
 1205              	_int0xef_default_handler:
 1206 0956 2EC70600 		movw $0xef, %cs:intr_num
 1206      00EF00
 1207 095d E99100   		jmp _intr_default_handler
 1208              	
 1209              	.global _int0xf0_default_handler
 1210              	_int0xf0_default_handler:
 1211 0960 2EC70600 		movw $0xf0, %cs:intr_num
 1211      00F000
 1212 0967 E98700   		jmp _intr_default_handler
 1213              	
 1214              	.global _int0xf1_default_handler
 1215              	_int0xf1_default_handler:
 1216 096a 2EC70600 		movw $0xf1, %cs:intr_num
 1216      00F100
 1217 0971 EB7E     		jmp _intr_default_handler
 1218              	
 1219              	.global _int0xf2_default_handler
 1220              	_int0xf2_default_handler:
 1221 0973 2EC70600 		movw $0xf2, %cs:intr_num
 1221      00F200
 1222 097a EB75     		jmp _intr_default_handler
 1223              	
 1224              	.global _int0xf3_default_handler
 1225              	_int0xf3_default_handler:
 1226 097c 2EC70600 		movw $0xf3, %cs:intr_num
 1226      00F300
 1227 0983 EB6C     		jmp _intr_default_handler
 1228              	
 1229              	.global _int0xf4_default_handler
 1230              	_int0xf4_default_handler:
 1231 0985 2EC70600 		movw $0xf4, %cs:intr_num
 1231      00F400
 1232 098c EB63     		jmp _intr_default_handler
 1233              	
 1234              	.global _int0xf5_default_handler
 1235              	_int0xf5_default_handler:
 1236 098e 2EC70600 		movw $0xf5, %cs:intr_num
 1236      00F500
 1237 0995 EB5A     		jmp _intr_default_handler
 1238              	
 1239              	.global _int0xf6_default_handler
 1240              	_int0xf6_default_handler:
 1241 0997 2EC70600 		movw $0xf6, %cs:intr_num
 1241      00F600
 1242 099e EB51     		jmp _intr_default_handler
 1243              	
 1244              	.global _int0xf7_default_handler
 1245              	_int0xf7_default_handler:
 1246 09a0 2EC70600 		movw $0xf7, %cs:intr_num
 1246      00F700
 1247 09a7 EB48     		jmp _intr_default_handler
 1248              	
 1249              	.global _int0xf8_default_handler
 1250              	_int0xf8_default_handler:
 1251 09a9 2EC70600 		movw $0xf8, %cs:intr_num
 1251      00F800
 1252 09b0 EB3F     		jmp _intr_default_handler
 1253              	
 1254              	.global _int0xf9_default_handler
 1255              	_int0xf9_default_handler:
 1256 09b2 2EC70600 		movw $0xf9, %cs:intr_num
 1256      00F900
 1257 09b9 EB36     		jmp _intr_default_handler
 1258              	
 1259              	.global _int0xfa_default_handler
 1260              	_int0xfa_default_handler:
 1261 09bb 2EC70600 		movw $0xfa, %cs:intr_num
 1261      00FA00
 1262 09c2 EB2D     		jmp _intr_default_handler
 1263              	
 1264              	.global _int0xfb_default_handler
 1265              	_int0xfb_default_handler:
 1266 09c4 2EC70600 		movw $0xfb, %cs:intr_num
 1266      00FB00
 1267 09cb EB24     		jmp _intr_default_handler
 1268              	
 1269              	.global _int0xfc_default_handler
 1270              	_int0xfc_default_handler:
 1271 09cd 2EC70600 		movw $0xfc, %cs:intr_num
 1271      00FC00
 1272 09d4 EB1B     		jmp _intr_default_handler
 1273              	
 1274              	.global _int0xfd_default_handler
 1275              	_int0xfd_default_handler:
 1276 09d6 2EC70600 		movw $0xfd, %cs:intr_num
 1276      00FD00
 1277 09dd EB12     		jmp _intr_default_handler
 1278              	
 1279              	.global _int0xfe_default_handler
 1280              	_int0xfe_default_handler:
 1281 09df 2EC70600 		movw $0xfe, %cs:intr_num
 1281      00FE00
 1282 09e6 EB09     		jmp _intr_default_handler
 1283              	
 1284              	.global _int0xff_default_handler
 1285              	_int0xff_default_handler:
 1286 09e8 2EC70600 		movw $0xff, %cs:intr_num
 1286      00FF00
 1287 09ef EB00     		jmp _intr_default_handler
 1288              	
 1289              	.global _intr_default_handler
 1290              	_intr_default_handler:
 1291 09f1 16       		push %ss
 1292 09f2 1E       		push %ds
 1293 09f3 06       		push %es
 1294 09f4 60       		pusha
 1295 09f5 9C       		pushf
 1296 09f6 89C7     		mov %ax, %di
 1297 09f8 89E6     		mov %sp, %si
 1298 09fa 8CD0     		mov %ss, %ax
 1299 09fc 8EC0     		mov %ax, %es
 1300 09fe 8CC8     		mov %cs, %ax
 1301 0a00 8ED0     		mov %ax, %ss
 1302 0a02 8ED8     		mov %ax, %ds
 1303 0a04 B8FFFF   		mov $0xffff, %ax
 1304 0a07 89C4     		mov %ax, %sp
 1305 0a09 52       		push	%dx
 1306 0a0a 51       		push	%cx
 1307 0a0b 53       		push	%bx
 1308 0a0c 57       		push	%di
 1309 0a0d 06       		push	%es
 1310 0a0e 56       		push	%si
 1311 0a0f E8FEFF   		call	intr_print_default_msg
 1312 0a12 8CC0     		mov %es, %ax
 1313 0a14 8ED0     		mov %ax, %ss
 1314 0a16 89F4     		mov %si, %sp
 1315 0a18 9D       		popf
 1316 0a19 61       		popa
 1317 0a1a 07       		pop %es
 1318 0a1b 1F       		pop %ds
 1319 0a1c 17       		pop %ss
 1320 0a1d CF       		iret
 1321              	
 1322              	.global int_default_vector_table
 1323              	int_default_vector_table:
 1324 0a1e 0000     	.word _int0x00_default_handler
 1325 0a20 0000     	.word _int0x01_default_handler
 1326 0a22 0000     	.word _int0x02_default_handler
 1327 0a24 0000     	.word _int0x03_default_handler
 1328 0a26 0000     	.word _int0x04_default_handler
 1329 0a28 0000     	.word _int0x05_default_handler
 1330 0a2a 0000     	.word _int0x06_default_handler
 1331 0a2c 0000     	.word _int0x07_default_handler
 1332 0a2e 0000     	.word _int0x08_default_handler
 1333 0a30 0000     	.word _int0x09_default_handler
 1334 0a32 0000     	.word _int0x0a_default_handler
 1335 0a34 0000     	.word _int0x0b_default_handler
 1336 0a36 0000     	.word _int0x0c_default_handler
 1337 0a38 0000     	.word _int0x0d_default_handler
 1338 0a3a 0000     	.word _int0x0e_default_handler
 1339 0a3c 0000     	.word _int0x0f_default_handler
 1340 0a3e 0000     	.word _int0x10_default_handler
 1341 0a40 0000     	.word _int0x11_default_handler
 1342 0a42 0000     	.word _int0x12_default_handler
 1343 0a44 0000     	.word _int0x13_default_handler
 1344 0a46 0000     	.word _int0x14_default_handler
 1345 0a48 0000     	.word _int0x15_default_handler
 1346 0a4a 0000     	.word _int0x16_default_handler
 1347 0a4c 0000     	.word _int0x17_default_handler
 1348 0a4e 0000     	.word _int0x18_default_handler
 1349 0a50 0000     	.word _int0x19_default_handler
 1350 0a52 0000     	.word _int0x1a_default_handler
 1351 0a54 0000     	.word _int0x1b_default_handler
 1352 0a56 0000     	.word _int0x1c_default_handler
 1353 0a58 0000     	.word _int0x1d_default_handler
 1354 0a5a 0000     	.word _int0x1e_default_handler
 1355 0a5c 0000     	.word _int0x1f_default_handler
 1356 0a5e 0000     	.word _int0x20_default_handler
 1357 0a60 0000     	.word _int0x21_default_handler
 1358 0a62 0000     	.word _int0x22_default_handler
 1359 0a64 0000     	.word _int0x23_default_handler
 1360 0a66 0000     	.word _int0x24_default_handler
 1361 0a68 0000     	.word _int0x25_default_handler
 1362 0a6a 0000     	.word _int0x26_default_handler
 1363 0a6c 0000     	.word _int0x27_default_handler
 1364 0a6e 0000     	.word _int0x28_default_handler
 1365 0a70 0000     	.word _int0x29_default_handler
 1366 0a72 0000     	.word _int0x2a_default_handler
 1367 0a74 0000     	.word _int0x2b_default_handler
 1368 0a76 0000     	.word _int0x2c_default_handler
 1369 0a78 0000     	.word _int0x2d_default_handler
 1370 0a7a 0000     	.word _int0x2e_default_handler
 1371 0a7c 0000     	.word _int0x2f_default_handler
 1372 0a7e 0000     	.word _int0x30_default_handler
 1373 0a80 0000     	.word _int0x31_default_handler
 1374 0a82 0000     	.word _int0x32_default_handler
 1375 0a84 0000     	.word _int0x33_default_handler
 1376 0a86 0000     	.word _int0x34_default_handler
 1377 0a88 0000     	.word _int0x35_default_handler
 1378 0a8a 0000     	.word _int0x36_default_handler
 1379 0a8c 0000     	.word _int0x37_default_handler
 1380 0a8e 0000     	.word _int0x38_default_handler
 1381 0a90 0000     	.word _int0x39_default_handler
 1382 0a92 0000     	.word _int0x3a_default_handler
 1383 0a94 0000     	.word _int0x3b_default_handler
 1384 0a96 0000     	.word _int0x3c_default_handler
 1385 0a98 0000     	.word _int0x3d_default_handler
 1386 0a9a 0000     	.word _int0x3e_default_handler
 1387 0a9c 0000     	.word _int0x3f_default_handler
 1388 0a9e 0000     	.word _int0x40_default_handler
 1389 0aa0 0000     	.word _int0x41_default_handler
 1390 0aa2 0000     	.word _int0x42_default_handler
 1391 0aa4 0000     	.word _int0x43_default_handler
 1392 0aa6 0000     	.word _int0x44_default_handler
 1393 0aa8 0000     	.word _int0x45_default_handler
 1394 0aaa 0000     	.word _int0x46_default_handler
 1395 0aac 0000     	.word _int0x47_default_handler
 1396 0aae 0000     	.word _int0x48_default_handler
 1397 0ab0 0000     	.word _int0x49_default_handler
 1398 0ab2 0000     	.word _int0x4a_default_handler
 1399 0ab4 0000     	.word _int0x4b_default_handler
 1400 0ab6 0000     	.word _int0x4c_default_handler
 1401 0ab8 0000     	.word _int0x4d_default_handler
 1402 0aba 0000     	.word _int0x4e_default_handler
 1403 0abc 0000     	.word _int0x4f_default_handler
 1404 0abe 0000     	.word _int0x50_default_handler
 1405 0ac0 0000     	.word _int0x51_default_handler
 1406 0ac2 0000     	.word _int0x52_default_handler
 1407 0ac4 0000     	.word _int0x53_default_handler
 1408 0ac6 0000     	.word _int0x54_default_handler
 1409 0ac8 0000     	.word _int0x55_default_handler
 1410 0aca 0000     	.word _int0x56_default_handler
 1411 0acc 0000     	.word _int0x57_default_handler
 1412 0ace 0000     	.word _int0x58_default_handler
 1413 0ad0 0000     	.word _int0x59_default_handler
 1414 0ad2 0000     	.word _int0x5a_default_handler
 1415 0ad4 0000     	.word _int0x5b_default_handler
 1416 0ad6 0000     	.word _int0x5c_default_handler
 1417 0ad8 0000     	.word _int0x5d_default_handler
 1418 0ada 0000     	.word _int0x5e_default_handler
 1419 0adc 0000     	.word _int0x5f_default_handler
 1420 0ade 0000     	.word _int0x60_default_handler
 1421 0ae0 0000     	.word _int0x61_default_handler
 1422 0ae2 0000     	.word _int0x62_default_handler
 1423 0ae4 0000     	.word _int0x63_default_handler
 1424 0ae6 0000     	.word _int0x64_default_handler
 1425 0ae8 0000     	.word _int0x65_default_handler
 1426 0aea 0000     	.word _int0x66_default_handler
 1427 0aec 0000     	.word _int0x67_default_handler
 1428 0aee 0000     	.word _int0x68_default_handler
 1429 0af0 0000     	.word _int0x69_default_handler
 1430 0af2 0000     	.word _int0x6a_default_handler
 1431 0af4 0000     	.word _int0x6b_default_handler
 1432 0af6 0000     	.word _int0x6c_default_handler
 1433 0af8 0000     	.word _int0x6d_default_handler
 1434 0afa 0000     	.word _int0x6e_default_handler
 1435 0afc 0000     	.word _int0x6f_default_handler
 1436 0afe 0000     	.word _int0x70_default_handler
 1437 0b00 0000     	.word _int0x71_default_handler
 1438 0b02 0000     	.word _int0x72_default_handler
 1439 0b04 0000     	.word _int0x73_default_handler
 1440 0b06 0000     	.word _int0x74_default_handler
 1441 0b08 0000     	.word _int0x75_default_handler
 1442 0b0a 0000     	.word _int0x76_default_handler
 1443 0b0c 0000     	.word _int0x77_default_handler
 1444 0b0e 0000     	.word _int0x78_default_handler
 1445 0b10 0000     	.word _int0x79_default_handler
 1446 0b12 0000     	.word _int0x7a_default_handler
 1447 0b14 0000     	.word _int0x7b_default_handler
 1448 0b16 0000     	.word _int0x7c_default_handler
 1449 0b18 0000     	.word _int0x7d_default_handler
 1450 0b1a 0000     	.word _int0x7e_default_handler
 1451 0b1c 0000     	.word _int0x7f_default_handler
 1452 0b1e 0000     	.word _int0x80_default_handler
 1453 0b20 0000     	.word _int0x81_default_handler
 1454 0b22 0000     	.word _int0x82_default_handler
 1455 0b24 0000     	.word _int0x83_default_handler
 1456 0b26 0000     	.word _int0x84_default_handler
 1457 0b28 0000     	.word _int0x85_default_handler
 1458 0b2a 0000     	.word _int0x86_default_handler
 1459 0b2c 0000     	.word _int0x87_default_handler
 1460 0b2e 0000     	.word _int0x88_default_handler
 1461 0b30 0000     	.word _int0x89_default_handler
 1462 0b32 0000     	.word _int0x8a_default_handler
 1463 0b34 0000     	.word _int0x8b_default_handler
 1464 0b36 0000     	.word _int0x8c_default_handler
 1465 0b38 0000     	.word _int0x8d_default_handler
 1466 0b3a 0000     	.word _int0x8e_default_handler
 1467 0b3c 0000     	.word _int0x8f_default_handler
 1468 0b3e 0000     	.word _int0x90_default_handler
 1469 0b40 0000     	.word _int0x91_default_handler
 1470 0b42 0000     	.word _int0x92_default_handler
 1471 0b44 0000     	.word _int0x93_default_handler
 1472 0b46 0000     	.word _int0x94_default_handler
 1473 0b48 0000     	.word _int0x95_default_handler
 1474 0b4a 0000     	.word _int0x96_default_handler
 1475 0b4c 0000     	.word _int0x97_default_handler
 1476 0b4e 0000     	.word _int0x98_default_handler
 1477 0b50 0000     	.word _int0x99_default_handler
 1478 0b52 0000     	.word _int0x9a_default_handler
 1479 0b54 0000     	.word _int0x9b_default_handler
 1480 0b56 0000     	.word _int0x9c_default_handler
 1481 0b58 0000     	.word _int0x9d_default_handler
 1482 0b5a 0000     	.word _int0x9e_default_handler
 1483 0b5c 0000     	.word _int0x9f_default_handler
 1484 0b5e 0000     	.word _int0xa0_default_handler
 1485 0b60 0000     	.word _int0xa1_default_handler
 1486 0b62 0000     	.word _int0xa2_default_handler
 1487 0b64 0000     	.word _int0xa3_default_handler
 1488 0b66 0000     	.word _int0xa4_default_handler
 1489 0b68 0000     	.word _int0xa5_default_handler
 1490 0b6a 0000     	.word _int0xa6_default_handler
 1491 0b6c 0000     	.word _int0xa7_default_handler
 1492 0b6e 0000     	.word _int0xa8_default_handler
 1493 0b70 0000     	.word _int0xa9_default_handler
 1494 0b72 0000     	.word _int0xaa_default_handler
 1495 0b74 0000     	.word _int0xab_default_handler
 1496 0b76 0000     	.word _int0xac_default_handler
 1497 0b78 0000     	.word _int0xad_default_handler
 1498 0b7a 0000     	.word _int0xae_default_handler
 1499 0b7c 0000     	.word _int0xaf_default_handler
 1500 0b7e 0000     	.word _int0xb0_default_handler
 1501 0b80 0000     	.word _int0xb1_default_handler
 1502 0b82 0000     	.word _int0xb2_default_handler
 1503 0b84 0000     	.word _int0xb3_default_handler
 1504 0b86 0000     	.word _int0xb4_default_handler
 1505 0b88 0000     	.word _int0xb5_default_handler
 1506 0b8a 0000     	.word _int0xb6_default_handler
 1507 0b8c 0000     	.word _int0xb7_default_handler
 1508 0b8e 0000     	.word _int0xb8_default_handler
 1509 0b90 0000     	.word _int0xb9_default_handler
 1510 0b92 0000     	.word _int0xba_default_handler
 1511 0b94 0000     	.word _int0xbb_default_handler
 1512 0b96 0000     	.word _int0xbc_default_handler
 1513 0b98 0000     	.word _int0xbd_default_handler
 1514 0b9a 0000     	.word _int0xbe_default_handler
 1515 0b9c 0000     	.word _int0xbf_default_handler
 1516 0b9e 0000     	.word _int0xc0_default_handler
 1517 0ba0 0000     	.word _int0xc1_default_handler
 1518 0ba2 0000     	.word _int0xc2_default_handler
 1519 0ba4 0000     	.word _int0xc3_default_handler
 1520 0ba6 0000     	.word _int0xc4_default_handler
 1521 0ba8 0000     	.word _int0xc5_default_handler
 1522 0baa 0000     	.word _int0xc6_default_handler
 1523 0bac 0000     	.word _int0xc7_default_handler
 1524 0bae 0000     	.word _int0xc8_default_handler
 1525 0bb0 0000     	.word _int0xc9_default_handler
 1526 0bb2 0000     	.word _int0xca_default_handler
 1527 0bb4 0000     	.word _int0xcb_default_handler
 1528 0bb6 0000     	.word _int0xcc_default_handler
 1529 0bb8 0000     	.word _int0xcd_default_handler
 1530 0bba 0000     	.word _int0xce_default_handler
 1531 0bbc 0000     	.word _int0xcf_default_handler
 1532 0bbe 0000     	.word _int0xd0_default_handler
 1533 0bc0 0000     	.word _int0xd1_default_handler
 1534 0bc2 0000     	.word _int0xd2_default_handler
 1535 0bc4 0000     	.word _int0xd3_default_handler
 1536 0bc6 0000     	.word _int0xd4_default_handler
 1537 0bc8 0000     	.word _int0xd5_default_handler
 1538 0bca 0000     	.word _int0xd6_default_handler
 1539 0bcc 0000     	.word _int0xd7_default_handler
 1540 0bce 0000     	.word _int0xd8_default_handler
 1541 0bd0 0000     	.word _int0xd9_default_handler
 1542 0bd2 0000     	.word _int0xda_default_handler
 1543 0bd4 0000     	.word _int0xdb_default_handler
 1544 0bd6 0000     	.word _int0xdc_default_handler
 1545 0bd8 0000     	.word _int0xdd_default_handler
 1546 0bda 0000     	.word _int0xde_default_handler
 1547 0bdc 0000     	.word _int0xdf_default_handler
 1548 0bde 0000     	.word _int0xe0_default_handler
 1549 0be0 0000     	.word _int0xe1_default_handler
 1550 0be2 0000     	.word _int0xe2_default_handler
 1551 0be4 0000     	.word _int0xe3_default_handler
 1552 0be6 0000     	.word _int0xe4_default_handler
 1553 0be8 0000     	.word _int0xe5_default_handler
 1554 0bea 0000     	.word _int0xe6_default_handler
 1555 0bec 0000     	.word _int0xe7_default_handler
 1556 0bee 0000     	.word _int0xe8_default_handler
 1557 0bf0 0000     	.word _int0xe9_default_handler
 1558 0bf2 0000     	.word _int0xea_default_handler
 1559 0bf4 0000     	.word _int0xeb_default_handler
 1560 0bf6 0000     	.word _int0xec_default_handler
 1561 0bf8 0000     	.word _int0xed_default_handler
 1562 0bfa 0000     	.word _int0xee_default_handler
 1563 0bfc 0000     	.word _int0xef_default_handler
 1564 0bfe 0000     	.word _int0xf0_default_handler
 1565 0c00 0000     	.word _int0xf1_default_handler
 1566 0c02 0000     	.word _int0xf2_default_handler
 1567 0c04 0000     	.word _int0xf3_default_handler
 1568 0c06 0000     	.word _int0xf4_default_handler
 1569 0c08 0000     	.word _int0xf5_default_handler
 1570 0c0a 0000     	.word _int0xf6_default_handler
 1571 0c0c 0000     	.word _int0xf7_default_handler
 1572 0c0e 0000     	.word _int0xf8_default_handler
 1573 0c10 0000     	.word _int0xf9_default_handler
 1574 0c12 0000     	.word _int0xfa_default_handler
 1575 0c14 0000     	.word _int0xfb_default_handler
 1576 0c16 0000     	.word _int0xfc_default_handler
 1577 0c18 0000     	.word _int0xfd_default_handler
 1578 0c1a 0000     	.word _int0xfe_default_handler
 1579 0c1c 0000     	.word _int0xff_default_handler
